(*Generated by Lem from aarch64_types.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail2_valuesTheory sail2_prompt_monadTheory sail2_promptTheory sail2_instr_kindsTheory sail2_operators_mwordsTheory sail2_stringTheory;

val _ = numLib.prefer_num();



val _ = new_theory "aarch64_types"

(*Generated by Sail from aarch64.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
val _ = type_abbrev((*  'n *) "bits" , ``:  'n words$word``);





val _ = Hol_datatype `
 exception  =
    Error_Undefined of (unit)
  | Error_See of (string)
  | Error_Implementation_Defined of (string)
  | Error_ReservedEncoding of (unit)
  | Error_ExceptionTaken of (unit)
  | Error_Unpredictable of (unit)
  | Error_SError of (bool)`;




val _ = Hol_datatype `
 boolean = FALSE | TRUE`;




val _ = Hol_datatype `
 signal = LOW | HIGH`;




val _ = Hol_datatype `
 RetCode =
  RC_OK
  | RC_UNDEFINED
  | RC_UNPREDICTABLE
  | RC_SEE
  | RC_IMPLEMENTATION_DEFINED
  | RC_EXCEPTION_TAKEN
  | RC_ASSERT_FAILED
  | RC_UNMATCHED_CASE`;




val _ = type_abbrev( "TUBE_Type"  , ``: 32 bits``);

val _ = type_abbrev( "ScheduleIRQ_Type"  , ``: 32 bits``);

val _ = type_abbrev( "ClearIRQ_Type"  , ``: 32 bits``);

val _ = type_abbrev( "ScheduleFIQ_Type"  , ``: 32 bits``);

val _ = type_abbrev( "ClearFIQ_Type"  , ``: 32 bits``);

val _ = type_abbrev( "TargetCPU_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Lo1_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Lo1_Hi_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Hi1_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Hi1_Hi_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Lo2_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Lo2_Hi_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Hi2_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AbortRgn64Hi2_Hi_Type"  , ``: 32 bits``);

val _ = type_abbrev( "AXIAbortCtl_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_PARAM_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_STATUS_Type"  , ``: 32 bits``);

val _ = type_abbrev( "PPURBAR_Type"  , ``: 32 bits``);

val _ = type_abbrev( "PPURSER_Type"  , ``: 32 bits``);

val _ = type_abbrev( "PPURACR_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_STATUS_64_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_STATUS_64_HI_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_PARAM_64_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTE_API_PARAM_64_HI_Type"  , ``: 32 bits``);

val _ = type_abbrev( "SCRType"  , ``: 32 bits``);

val _ = type_abbrev( "SCTLRType"  , ``: 64 bits``);

val _ = type_abbrev( "MAIRType"  , ``: 64 bits``);

val _ = type_abbrev( "ESRType"  , ``: 32 bits``);

val _ = type_abbrev( "FPCRType"  , ``: 32 bits``);

val _ = type_abbrev( "FPSRType"  , ``: 32 bits``);

val _ = type_abbrev( "FPSCRType"  , ``: 32 bits``);

val _ = type_abbrev( "CPSRType"  , ``: 32 bits``);

val _ = type_abbrev( "APSRType"  , ``: 32 bits``);

val _ = type_abbrev( "ITSTATEType"  , ``: 8 bits``);

val _ = type_abbrev( "CPACRType"  , ``: 32 bits``);

val _ = type_abbrev( "CNTKCTLType"  , ``: 32 bits``);

val _ = Hol_datatype `
 GTEParamType = GTEParam_WORD | GTEParam_LIST | GTEParam_EOACCESS`;




val _ = type_abbrev( "GTE_PPU_SizeEn_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTEExtObsAccess_Type"  , ``: 16 bits``);

val _ = type_abbrev( "GTEASAccess_Type"  , ``: 32 bits``);

val _ = type_abbrev( "GTEASRecordedAccess_Type"  , ``: 32 bits``);

val _ = Hol_datatype `
 AccType =
  AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_ORDEREDATOMIC
  | AccType_ORDEREDATOMICRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_NV2REGISTER
  | AccType_DC
  | AccType_DC_UNPRIV
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT`;




val _ = Hol_datatype `
 MemType = MemType_Normal | MemType_Device`;




val _ = Hol_datatype `
 DeviceType = DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE`;




val _ = Hol_datatype `
 MemAttrHints  =
  <| MemAttrHints_attrs : 2 bits; MemAttrHints_hints : 2 bits; MemAttrHints_transient : bool  |>`;



val _ = Hol_datatype `
 MemoryAttributes  =
  <| MemoryAttributes_typ : MemType;
     MemoryAttributes_device : DeviceType;
     MemoryAttributes_inner : MemAttrHints;
     MemoryAttributes_outer : MemAttrHints;
     MemoryAttributes_tagged : bool;
     MemoryAttributes_shareable : bool;
     MemoryAttributes_outershareable : bool  |>`;



val _ = Hol_datatype `
 FullAddress  = <| FullAddress_address : 52 bits; FullAddress_NS : 1 bits  |>`;



val _ = Hol_datatype `
 Fault =
  Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_BranchTarget
  | Fault_HWUpdateAccessFlag
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint`;




val _ = Hol_datatype `
 FaultRecord  =
  <| FaultRecord_typ : Fault;
     FaultRecord_acctype : AccType;
     FaultRecord_ipaddress : FullAddress;
     FaultRecord_s2fs1walk : bool;
     FaultRecord_write : bool;
     FaultRecord_level : ii;
     FaultRecord_extflag : 1 bits;
     FaultRecord_secondstage : bool;
     FaultRecord_domain : 4 bits;
     FaultRecord_errortype : 2 bits;
     FaultRecord_debugmoe : 4 bits  |>`;



val _ = type_abbrev( "PARTIDtype"  , ``: 16 bits``);

val _ = type_abbrev( "PMGtype"  , ``: 8 bits``);

val _ = Hol_datatype `
 MPAMinfo  =
  <| MPAMinfo_mpam_ns : 1 bits; MPAMinfo_partid : 16 bits; MPAMinfo_pmg : 8 bits  |>`;



val _ = Hol_datatype `
 AddressDescriptor  =
  <| AddressDescriptor_fault : FaultRecord;
     AddressDescriptor_memattrs : MemoryAttributes;
     AddressDescriptor_paddress : FullAddress;
     AddressDescriptor_vaddress : 64 bits  |>`;



val _ = Hol_datatype `
 AccessDescriptor  =
  <| AccessDescriptor_acctype : AccType;
     AccessDescriptor_mpam : MPAMinfo;
     AccessDescriptor_page_table_walk : bool;
     AccessDescriptor_secondstage : bool;
     AccessDescriptor_s2fs1walk : bool;
     AccessDescriptor_level : ii  |>`;



val _ = Hol_datatype `
 Permissions  =
  <| Permissions_ap : 3 bits;
     Permissions_xn : 1 bits;
     Permissions_xxn : 1 bits;
     Permissions_pxn : 1 bits  |>`;



val _ = Hol_datatype `
 DescriptorUpdate  =
  <| DescriptorUpdate_AF : bool;
     DescriptorUpdate_AP : bool;
     DescriptorUpdate_descaddr : AddressDescriptor  |>`;



val _ = Hol_datatype `
 TLBRecord  =
  <| TLBRecord_perms : Permissions;
     TLBRecord_nG : 1 bits;
     TLBRecord_domain : 4 bits;
     TLBRecord_GP : 1 bits;
     TLBRecord_contiguous : bool;
     TLBRecord_level : ii;
     TLBRecord_blocksize : ii;
     TLBRecord_descupdate : DescriptorUpdate;
     TLBRecord_CnP : 1 bits;
     TLBRecord_addrdesc : AddressDescriptor  |>`;



val _ = Hol_datatype `
 MBReqDomain =
  MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem`;




val _ = Hol_datatype `
 MBReqTypes = MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All`;




val _ = Hol_datatype `
 PrefetchHint = Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC`;




val _ = Hol_datatype `
 ProcState  =
  <| ProcState_N : 1 bits;
     ProcState_Z : 1 bits;
     ProcState_C : 1 bits;
     ProcState_V : 1 bits;
     ProcState_D : 1 bits;
     ProcState_A : 1 bits;
     ProcState_I : 1 bits;
     ProcState_F : 1 bits;
     ProcState_PAN : 1 bits;
     ProcState_UAO : 1 bits;
     ProcState_DIT : 1 bits;
     ProcState_TCO : 1 bits;
     ProcState_BTYPE : 2 bits;
     ProcState_SS : 1 bits;
     ProcState_IL : 1 bits;
     ProcState_EL : 2 bits;
     ProcState_nRW : 1 bits;
     ProcState_SP : 1 bits;
     ProcState_Q : 1 bits;
     ProcState_GE : 4 bits;
     ProcState_SSBS : 1 bits;
     ProcState_IT : 8 bits;
     ProcState_J : 1 bits;
     ProcState_T : 1 bits;
     ProcState_E : 1 bits;
     ProcState_M : 5 bits  |>`;



val _ = Hol_datatype `
 PrivilegeLevel = PL3 | PL2 | PL1 | PL0`;




val _ = Hol_datatype `
 InstrSet = InstrSet_A64 | InstrSet_A32 | InstrSet_T32`;




val _ = Hol_datatype `
 ArchVersion = ARMv8p0 | ARMv8p1 | ARMv8p2 | ARMv8p3 | ARMv8p4 | ARMv8p5`;




val _ = Hol_datatype `
 Unpredictable =
  Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_OORTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_ZEROPMSEVFR
  | Unpredictable_NOOPTYPES
  | Unpredictable_ZEROMINLATENCY
  | Unpredictable_ZEROBTYPE
  | Unpredictable_CLEARERRITEZERO`;




val _ = Hol_datatype `
 Constraint =
  Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK`;




val _ = Hol_datatype `
 FPExc =
  FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm`;




val _ = Hol_datatype `
 FPRounding =
  FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD`;




val _ = Hol_datatype `
 FPType = FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN`;




val _ = Hol_datatype `
 BranchType =
  BranchType_DIRCALL
  | BranchType_INDCALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_DIR
  | BranchType_INDIR
  | BranchType_EXCEPTION
  | BranchType_RESET
  | BranchType_UNKNOWN`;




val _ = Hol_datatype `
 TLBContext  =
  <| TLBContext_twostage : bool;
     TLBContext_secondstage : bool;
     TLBContext_asid : 16 bits;
     TLBContext_vmid : 16 bits;
     TLBContext_el : 2 bits;
     TLBContext_secure : bool;
     TLBContext_t_sz : 6 bits;
     TLBContext_granule_size : ii  |>`;



val _ = Hol_datatype `
 TLBLine  =
  <| TLBLine_address : 64 bits;
     TLBLine_context : TLBContext;
     TLBLine_data : TLBRecord;
     TLBLine_valid_name : bool  |>`;



val _ = Hol_datatype `
 Exception =
  Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_PACTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_ERetTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_NV2DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_BranchTarget
  | Exception_FIQ`;




val _ = Hol_datatype `
 ExceptionRecord  =
  <| ExceptionRecord_typ : Exception;
     ExceptionRecord_syndrome : 25 bits;
     ExceptionRecord_vaddress : 64 bits;
     ExceptionRecord_ipavalid : bool;
     ExceptionRecord_NS : 1 bits;
     ExceptionRecord_ipaddress : 52 bits  |>`;



val _ = Hol_datatype `
 SystemAccessType = SystemAccessType_RT | SystemAccessType_RRT | SystemAccessType_DT`;




val _ = Hol_datatype `
 SysRegAccess =
  SysRegAccess_OK
  | SysRegAccess_UNDEFINED
  | SysRegAccess_TrapToEL1
  | SysRegAccess_TrapToEL2
  | SysRegAccess_TrapToEL3`;




val _ = Hol_datatype `
 OpType = OpType_Load | OpType_Store | OpType_LoadAtomic | OpType_Branch | OpType_Other`;




val _ = Hol_datatype `
 TimeStamp = TimeStamp_None | TimeStamp_Virtual | TimeStamp_Physical`;




val _ = Hol_datatype `
 CountOp = CountOp_CLZ | CountOp_CLS | CountOp_CNT`;




val _ = Hol_datatype `
 ExtendType =
  ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX`;




val _ = Hol_datatype `
 FPMaxMinOp = FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM`;




val _ = Hol_datatype `
 FPUnaryOp = FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT`;




val _ = Hol_datatype `
 FPConvOp =
  FPConvOp_CVT_FtoI
  | FPConvOp_CVT_ItoF
  | FPConvOp_MOV_FtoI
  | FPConvOp_MOV_ItoF
  | FPConvOp_CVT_FtoI_JS`;




val _ = Hol_datatype `
 MoveWideOp = MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K`;




val _ = Hol_datatype `
 ShiftType = ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR`;




val _ = Hol_datatype `
 LogicalOp = LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR`;




val _ = Hol_datatype `
 MemOp = MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH`;




val _ = Hol_datatype `
 MemAtomicOp =
  MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP`;




val _ = Hol_datatype `
 MemBarrierOp =
  MemBarrierOp_DSB
  | MemBarrierOp_DMB
  | MemBarrierOp_ISB
  | MemBarrierOp_SSBB
  | MemBarrierOp_PSSBB
  | MemBarrierOp_SB`;




val _ = Hol_datatype `
 SystemHintOp =
  SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB
  | SystemHintOp_TSB
  | SystemHintOp_BTI
  | SystemHintOp_CSDB`;




val _ = Hol_datatype `
 PSTATEField =
  PSTATEField_DAIFSet
  | PSTATEField_DAIFClr
  | PSTATEField_PAN
  | PSTATEField_UAO
  | PSTATEField_DIT
  | PSTATEField_SP`;




val _ = Hol_datatype `
 SystemOp = Sys_AT | Sys_DC | Sys_IC | Sys_TLBI | Sys_SYS`;




val _ = Hol_datatype `
 VBitOp = VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR`;




val _ = Hol_datatype `
 CompareOp = CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT`;




val _ = Hol_datatype `
 ImmediateOp = ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC`;




val _ = Hol_datatype `
 ReduceOp =
  ReduceOp_FMINNUM | ReduceOp_FMAXNUM | ReduceOp_FMIN | ReduceOp_FMAX | ReduceOp_FADD | ReduceOp_ADD`;




val _ = Hol_datatype `
 SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX`;




val _ = Hol_datatype `
 AArch32_SErrorSyndrome  =
  <| AArch32_SErrorSyndrome_AET : 2 bits; AArch32_SErrorSyndrome_ExT : 1 bits  |>`;



val _ = Hol_datatype `
 CrossTriggerOut =
  CrossTriggerOut_DebugRequest
  | CrossTriggerOut_RestartRequest
  | CrossTriggerOut_IRQ
  | CrossTriggerOut_RSVD3
  | CrossTriggerOut_TraceExtIn0
  | CrossTriggerOut_TraceExtIn1
  | CrossTriggerOut_TraceExtIn2
  | CrossTriggerOut_TraceExtIn3`;




val _ = Hol_datatype `
 CrossTriggerIn =
  CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3`;




val _ = Hol_datatype `
 InterruptID =
  InterruptID_PMUIRQ
  | InterruptID_COMMIRQ
  | InterruptID_CTIIRQ
  | InterruptID_COMMRX
  | InterruptID_COMMTX`;




val _ = Hol_datatype `
 PCSample  =
  <| PCSample_valid_name : bool;
     PCSample_pc : 64 bits;
     PCSample_el : 2 bits;
     PCSample_rw : 1 bits;
     PCSample_ns : 1 bits;
     PCSample_has_el2 : bool;
     PCSample_contextidr : 32 bits;
     PCSample_contextidr_el2 : 32 bits;
     PCSample_el0h : bool;
     PCSample_vmid : 16 bits  |>`;



val _ = Hol_datatype `
 VCGEtype = VCGEtype_signed | VCGEtype_unsigned | VCGEtype_fp`;




val _ = Hol_datatype `
 VCGTtype = VCGTtype_signed | VCGTtype_unsigned | VCGTtype_fp`;




val _ = Hol_datatype `
 VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL`;




val _ = Hol_datatype `
 InterruptReq  =
  <| InterruptReq_take_SE : bool;
     InterruptReq_take_vSE : bool;
     InterruptReq_take_IRQ : bool;
     InterruptReq_take_vIRQ : bool;
     InterruptReq_take_FIQ : bool;
     InterruptReq_take_vFIQ : bool;
     InterruptReq_iesb_req : bool  |>`;



val _ = Hol_datatype `
 AsyncErrorType =
  AsyncErrorType_UC
  | AsyncErrorType_UEU
  | AsyncErrorType_UEO
  | AsyncErrorType_UER
  | AsyncErrorType_CE`;






val _ = Hol_datatype `
 register_value  =
    Regval_vector of ((ii # bool # register_value list))
  | Regval_list of ( register_value list)
  | Regval_option of ( register_value option)
  | Regval_GTEParamType of (GTEParamType)
  | Regval_ProcState of (ProcState)
  | Regval_TLBLine of (TLBLine)
  | Regval_bool of (bool)
  | Regval_int of (ii)
  | Regval_signal of (signal)
  | Regval_vector_11_dec_bit of ( 11 words$word)
  | Regval_vector_128_dec_bit of ( 128 words$word)
  | Regval_vector_16_dec_bit of ( 16 words$word)
  | Regval_vector_1_dec_bit of ( 1 words$word)
  | Regval_vector_2_dec_bit of ( 2 words$word)
  | Regval_vector_32_dec_bit of ( 32 words$word)
  | Regval_vector_4_dec_bit of ( 4 words$word)
  | Regval_vector_52_dec_bit of ( 52 words$word)
  | Regval_vector_56_dec_bit of ( 56 words$word)
  | Regval_vector_64_dec_bit of ( 64 words$word)`;




val _ = Hol_datatype `
 regstate  =
  <| CNTHCTL_EL2 :  32 words$word;
     CPTR_EL2 :  32 words$word;
     CCSIDR_EL1 :  64 words$word;
     ACTLR_EL1 :  64 words$word;
     ACTLR_EL2 :  64 words$word;
     ACTLR_EL3 :  64 words$word;
     AFSR0_EL1 :  32 words$word;
     AFSR0_EL2 :  32 words$word;
     AFSR0_EL3 :  32 words$word;
     AFSR1_EL1 :  32 words$word;
     AFSR1_EL2 :  32 words$word;
     AFSR1_EL3 :  32 words$word;
     AIDR_EL1 :  32 words$word;
     AMAIR_EL1 :  64 words$word;
     AMAIR_EL2 :  64 words$word;
     AMAIR_EL3 :  64 words$word;
     APDAKeyHi_EL1 :  64 words$word;
     APDAKeyLo_EL1 :  64 words$word;
     APDBKeyHi_EL1 :  64 words$word;
     APDBKeyLo_EL1 :  64 words$word;
     APGAKeyHi_EL1 :  64 words$word;
     APGAKeyLo_EL1 :  64 words$word;
     APIAKeyHi_EL1 :  64 words$word;
     APIAKeyLo_EL1 :  64 words$word;
     APIBKeyHi_EL1 :  64 words$word;
     APIBKeyLo_EL1 :  64 words$word;
     BTypeCompatible : bool;
     BTypeNext :  2 words$word;
     CCSIDR2_EL1 :  32 words$word;
     CLIDR_EL1 :  64 words$word;
     CNTFRQ_EL0 :  32 words$word;
     CNTHPS_CTL_EL2 :  32 words$word;
     CNTHPS_CVAL_EL2 :  64 words$word;
     CNTHPS_TVAL_EL2 :  32 words$word;
     CNTHP_CTL_EL2 :  32 words$word;
     CNTHP_CVAL_EL2 :  64 words$word;
     CNTHP_TVAL_EL2 :  32 words$word;
     CNTHVS_CTL_EL2 :  32 words$word;
     CNTHVS_CVAL_EL2 :  64 words$word;
     CNTHVS_TVAL_EL2 :  32 words$word;
     CNTHV_CTL_EL2 :  32 words$word;
     CNTHV_CVAL_EL2 :  64 words$word;
     CNTHV_TVAL_EL2 :  32 words$word;
     CNTKCTL_EL1 :  32 words$word;
     CNTPCT_EL0 :  64 words$word;
     CNTPS_CTL_EL1 :  32 words$word;
     CNTPS_CVAL_EL1 :  64 words$word;
     CNTPS_TVAL_EL1 :  32 words$word;
     CNTP_CTL_EL0 :  32 words$word;
     CNTP_CTL_S :  32 words$word;
     CNTP_CVAL_EL0 :  64 words$word;
     CNTP_TVAL_EL0 :  32 words$word;
     CNTVCT_EL0 :  64 words$word;
     CNTVOFF_EL2 :  64 words$word;
     CNTV_CTL_EL0 :  32 words$word;
     CNTV_CVAL_EL0 :  64 words$word;
     CNTV_TVAL_EL0 :  32 words$word;
     CPACR_EL1 :  32 words$word;
     CPTR_EL3 :  32 words$word;
     CSSELR_EL1 :  32 words$word;
     CSSELR_S :  32 words$word;
     CTR_EL0 :  64 words$word;
     DBGAUTHSTATUS_EL1 :  32 words$word;
     DBGCLAIMCLR_EL1 :  32 words$word;
     DBGCLAIMSET_EL1 :  32 words$word;
     DBGDEVID1 :  32 words$word;
     DBGDEVID2 :  32 words$word;
     DBGDSCRint :  32 words$word;
     DBGDTRRX_EL0 :  32 words$word;
     DBGDTRTX_EL0 :  32 words$word;
     DBGDTR_EL0 :  64 words$word;
     DBGWFAR :  32 words$word;
     DCZID_EL0 :  32 words$word;
     DISR_EL1 :  64 words$word;
     EDECCR :  32 words$word;
     EDECR :  32 words$word;
     EDESR :  32 words$word;
     EDLSR :  32 words$word;
     EDPCSR :  64 words$word;
     EDPFR :  64 words$word;
     EDPRCR :  32 words$word;
     EDPRSR :  32 words$word;
     EDVIDSR :  32 words$word;
     ELR_EL0 :  64 words$word;
     ESP_EL0 :  64 words$word;
     ESR_EL0 :  32 words$word;
     EventRegister :  1 words$word;
     FAR_EL0 :  64 words$word;
     FCSEIDR :  32 words$word;
     FPCR :  32 words$word;
     FPEXC32_EL2 :  32 words$word;
     FPSCR :  32 words$word;
     FPSID :  32 words$word;
     FPSR :  32 words$word;
     GCR_EL1 :  32 words$word;
     HACR_EL2 :  32 words$word;
     HSTR_EL2 :  32 words$word;
     ICC_AP0R_EL1 : ( 32 words$word) list;
     ICC_AP1R_EL1 : ( 32 words$word) list;
     ICC_ASGI1R_EL1 :  64 words$word;
     ICC_BPR0_EL1 :  32 words$word;
     ICC_BPR1_EL1_NS :  32 words$word;
     ICC_BPR1_EL1_S :  32 words$word;
     ICC_CTLR_EL1_NS :  32 words$word;
     ICC_CTLR_EL1_S :  32 words$word;
     ICC_CTLR_EL3 :  32 words$word;
     ICC_DIR_EL1 :  32 words$word;
     ICC_EOIR0_EL1 :  32 words$word;
     ICC_EOIR1_EL1 :  32 words$word;
     ICC_HPPIR0_EL1 :  32 words$word;
     ICC_HPPIR1_EL1 :  32 words$word;
     ICC_IAR0_EL1 :  32 words$word;
     ICC_IAR1_EL1 :  32 words$word;
     ICC_IGRPEN0_EL1 :  32 words$word;
     ICC_IGRPEN1_EL1_NS :  32 words$word;
     ICC_IGRPEN1_EL1_S :  32 words$word;
     ICC_IGRPEN1_EL3 :  32 words$word;
     ICC_PMR_EL1 :  32 words$word;
     ICC_RPR_EL1 :  32 words$word;
     ICC_SGI0R_EL1 :  64 words$word;
     ICC_SGI1R_EL1 :  64 words$word;
     ICC_SRE_EL1_NS :  32 words$word;
     ICC_SRE_EL1_S :  32 words$word;
     ICC_SRE_EL2 :  32 words$word;
     ICC_SRE_EL3 :  32 words$word;
     ICH_AP0R_EL2 : ( 32 words$word) list;
     ICH_AP1R_EL2 : ( 32 words$word) list;
     ICH_EISR_EL2 :  32 words$word;
     ICH_ELRSR_EL2 :  32 words$word;
     ICH_HCR_EL2 :  32 words$word;
     ICH_MISR_EL2 :  32 words$word;
     ICH_VMCR_EL2 :  32 words$word;
     ICH_VTR_EL2 :  32 words$word;
     ICV_AP0R_EL1 : ( 32 words$word) list;
     ICV_AP1R_EL1 : ( 32 words$word) list;
     ICV_BPR0_EL1 :  32 words$word;
     ICV_BPR1_EL1 :  32 words$word;
     ICV_CTLR_EL1 :  32 words$word;
     ICV_DIR_EL1 :  32 words$word;
     ICV_EOIR0_EL1 :  32 words$word;
     ICV_EOIR1_EL1 :  32 words$word;
     ICV_HPPIR0_EL1 :  32 words$word;
     ICV_HPPIR1_EL1 :  32 words$word;
     ICV_IAR0_EL1 :  32 words$word;
     ICV_IAR1_EL1 :  32 words$word;
     ICV_IGRPEN0_EL1 :  32 words$word;
     ICV_IGRPEN1_EL1 :  32 words$word;
     ICV_PMR_EL1 :  32 words$word;
     ICV_RPR_EL1 :  32 words$word;
     ID_AA64AFR0_EL1 :  32 words$word;
     ID_AA64AFR1_EL1 :  32 words$word;
     ID_AA64DFR1_EL1 :  32 words$word;
     ID_AA64ISAR0_EL1 :  64 words$word;
     ID_AA64ISAR1_EL1 :  64 words$word;
     ID_AA64MMFR0_EL1 :  64 words$word;
     ID_AA64MMFR1_EL1 :  32 words$word;
     ID_AA64MMFR2_EL1 :  64 words$word;
     ID_AA64PFR0_EL1 :  64 words$word;
     ID_AA64PFR1_EL1 :  32 words$word;
     ID_AFR0_EL1 :  32 words$word;
     ID_DFR0_EL1 :  32 words$word;
     ID_ISAR0_EL1 :  32 words$word;
     ID_ISAR1_EL1 :  32 words$word;
     ID_ISAR2_EL1 :  32 words$word;
     ID_ISAR3_EL1 :  32 words$word;
     ID_ISAR4_EL1 :  32 words$word;
     ID_ISAR5_EL1 :  32 words$word;
     ID_ISAR6_EL1 :  32 words$word;
     ID_MMFR0_EL1 :  32 words$word;
     ID_MMFR1_EL1 :  32 words$word;
     ID_MMFR2_EL1 :  32 words$word;
     ID_MMFR3_EL1 :  32 words$word;
     ID_MMFR4_EL1 :  32 words$word;
     ID_PFR0_EL1 :  32 words$word;
     ID_PFR1_EL1 :  32 words$word;
     ID_PFR2_EL1 :  32 words$word;
     ISR_EL1 :  32 words$word;
     LORC_EL1 :  32 words$word;
     LOREA_EL1 :  64 words$word;
     LORID_EL1 :  32 words$word;
     LORN_EL1 :  32 words$word;
     LORSA_EL1 :  64 words$word;
     MDCCINT_EL1 :  32 words$word;
     MDCCSR_EL0 :  32 words$word;
     MDRAR_EL1 :  64 words$word;
     MIDR_EL1 :  32 words$word;
     MVFR0_EL1 :  32 words$word;
     MVFR1_EL1 :  32 words$word;
     MVFR2_EL1 :  32 words$word;
     NSACR :  32 words$word;
     OSDTRRX_EL1 :  32 words$word;
     OSDTRTX_EL1 :  32 words$word;
     OSECCR_EL1 :  32 words$word;
     OSLAR_EL1 :  32 words$word;
     PAR_EL1 :  64 words$word;
     PAR_S :  64 words$word;
     PMCCFILTR_EL0 :  32 words$word;
     PMCCNTR_EL0 :  64 words$word;
     PMCEID0_EL0 :  64 words$word;
     PMCEID1_EL0 :  64 words$word;
     PMCNTENCLR_EL0 :  32 words$word;
     PMCNTENSET_EL0 :  32 words$word;
     PMCR_EL0 :  32 words$word;
     PMEVCNTR_EL0 : ( 32 words$word) list;
     PMEVTYPER_EL0 : ( 32 words$word) list;
     PMINTENCLR_EL1 :  32 words$word;
     PMINTENSET_EL1 :  32 words$word;
     PMLSR :  32 words$word;
     PMMIR :  32 words$word;
     PMMIR_EL1 :  32 words$word;
     PMOVSCLR_EL0 :  32 words$word;
     PMOVSSET_EL0 :  32 words$word;
     PMPCSR :  64 words$word;
     PMSELR_EL0 :  32 words$word;
     PMSWINC_EL0 :  32 words$word;
     PMUSERENR_EL0 :  32 words$word;
     PMVIDSR :  32 words$word;
     PMXEVCNTR_EL0 :  32 words$word;
     PMXEVTYPER_EL0 :  32 words$word;
     RC0 : ( 64 words$word) list;
     RD_EL0 :  64 words$word;
     REVIDR_EL1 :  32 words$word;
     RGSR_EL1 :  32 words$word;
     RMR_EL1 :  32 words$word;
     RMR_EL2 :  32 words$word;
     RMR_EL3 :  32 words$word;
     RMUID_EL0 :  32 words$word;
     RNDR :  64 words$word;
     RNDRRS :  64 words$word;
     RVBAR :  32 words$word;
     RVBAR_EL1 :  64 words$word;
     RVBAR_EL2 :  64 words$word;
     RVBAR_EL3 :  64 words$word;
     SCXTNUM_EL0 :  64 words$word;
     SCXTNUM_EL1 :  64 words$word;
     SCXTNUM_EL2 :  64 words$word;
     SCXTNUM_EL3 :  64 words$word;
     SDER32_EL2 :  32 words$word;
     SPSR_EL0 :  32 words$word;
     SP_EL0 :  64 words$word;
     SP_EL1 :  64 words$word;
     SP_EL2 :  64 words$word;
     SP_EL3 :  64 words$word;
     ShouldAdvanceIT : bool;
     TLBTR :  32 words$word;
     TPIDRRO_EL0 :  64 words$word;
     TPIDR_EL0 :  64 words$word;
     TPIDR_EL1 :  64 words$word;
     TPIDR_EL2 :  64 words$word;
     TPIDR_EL3 :  64 words$word;
     TRFCR_EL1 :  32 words$word;
     TRFCR_EL2 :  32 words$word;
     VBAR_EL0 :  64 words$word;
     VDISR_EL2 :  64 words$word;
     VMPIDR_EL2 :  64 words$word;
     VNCR_EL2 :  64 words$word;
     VPIDR_EL2 :  32 words$word;
     V : ( 128 words$word) list;
     currentCond :  4 words$word;
     exclusive_block_address :  52 words$word;
     saved_exception_level :  2 words$word;
     unconditional : bool;
     CONTEXTIDR_S :  32 words$word;
     GTEExtObsAccess : ( 16 words$word) list;
     GTEExtObsAddress : ( 64 words$word) list;
     GTEExtObsData : ( 64 words$word) list;
     GTEExtObsResult : ( 64 words$word) list;
     GTEExtObsActive : bool list;
     GTEExtObsCount : ii list;
     GTEExtObsIndex : ii list;
     GTEExtObsResultIndex : ii list;
     GTEExtObsResultIsAddress : bool list;
     GTEListParam0 : ( 64 words$word) list;
     GTEListParam1 : ( 64 words$word) list;
     GTEParam : ( 64 words$word) list;
     GTE_AS_RecordedAccess : ( 32 words$word) list;
     GTE_AS_RecordedAddress : ( 64 words$word) list;
     GTE_AS_RecordedData : ( 64 words$word) list;
     GTE_PPU_Access : ( 32 words$word) list;
     GTE_PPU_Address : ( 64 words$word) list;
     GTE_PPU_SizeEn : ( 32 words$word) list;
     TCR_EL2 :  64 words$word;
     AbortRgn64Hi1 :  32 words$word;
     AbortRgn64Hi1_Hi :  32 words$word;
     AbortRgn64Hi2 :  32 words$word;
     AbortRgn64Hi2_Hi :  32 words$word;
     AbortRgn64Lo1 :  32 words$word;
     AbortRgn64Lo1_Hi :  32 words$word;
     AbortRgn64Lo2 :  32 words$word;
     AbortRgn64Lo2_Hi :  32 words$word;
     CNTCR :  32 words$word;
     CNTCV :  64 words$word;
     CNTFID0 :  32 words$word;
     CNTSR :  32 words$word;
     CONTEXTIDR_EL1 :  32 words$word;
     CONTEXTIDR_EL2 :  32 words$word;
     DACR32_EL2 :  32 words$word;
     DACR_S :  32 words$word;
     DBGBCR : ( 32 words$word) list;
     DBGBCR_EL1 : ( 32 words$word) list;
     DBGBVR : ( 32 words$word) list;
     DBGBVR_EL1 : ( 64 words$word) list;
     DBGBXVR : ( 32 words$word) list;
     DBGDIDR :  32 words$word;
     DBGEN : signal;
     DBGPRCR_EL1 :  32 words$word;
     DBGVCR32_EL2 :  32 words$word;
     DBGWCR : ( 32 words$word) list;
     DBGWCR_EL1 : ( 32 words$word) list;
     DBGWVR : ( 32 words$word) list;
     DBGWVR_EL1 : ( 64 words$word) list;
     DFSR_S :  32 words$word;
     DLR_EL0 :  64 words$word;
     DSPSR_EL0 :  32 words$word;
     EDSCR :  32 words$word;
     ELR_EL1 :  64 words$word;
     ELR_EL2 :  64 words$word;
     ELR_EL3 :  64 words$word;
     ESR_EL1 :  32 words$word;
     ESR_EL2 :  32 words$word;
     ESR_EL3 :  32 words$word;
     FAR_EL1 :  64 words$word;
     FAR_EL2 :  64 words$word;
     FAR_EL3 :  64 words$word;
     HCR_EL2 :  64 words$word;
     HPFAR_EL2 :  64 words$word;
     ID_AA64DFR0_EL1 :  64 words$word;
     IFSR32_EL2 :  32 words$word;
     IFSR_S :  32 words$word;
     InGuardedPage : bool;
     LR_mon :  32 words$word;
     MAIR0_S :  32 words$word;
     MAIR1_S :  32 words$word;
     MAIR_EL1 :  64 words$word;
     MAIR_EL2 :  64 words$word;
     MAIR_EL3 :  64 words$word;
     MDCR_EL2 :  32 words$word;
     MDCR_EL3 :  32 words$word;
     MDSCR_EL1 :  32 words$word;
     MPAM0_EL1 :  64 words$word;
     MPAM1_EL1 :  64 words$word;
     MPAM2_EL2 :  64 words$word;
     MPAM3_EL3 :  64 words$word;
     MPAMHCR_EL2 :  32 words$word;
     MPAMIDR_EL1 :  64 words$word;
     MPAMVPM0_EL2 :  64 words$word;
     MPAMVPM1_EL2 :  64 words$word;
     MPAMVPM2_EL2 :  64 words$word;
     MPAMVPM3_EL2 :  64 words$word;
     MPAMVPM4_EL2 :  64 words$word;
     MPAMVPM5_EL2 :  64 words$word;
     MPAMVPM6_EL2 :  64 words$word;
     MPAMVPM7_EL2 :  64 words$word;
     MPAMVPMV_EL2 :  32 words$word;
     MPIDR_EL1 :  64 words$word;
     MVBAR :  32 words$word;
     NMRR_S :  32 words$word;
     OSDLR_EL1 :  32 words$word;
     OSLSR_EL1 :  32 words$word;
     PRRR_S :  32 words$word;
     PSTATE : ProcState;
     SCR_EL3 :  32 words$word;
     SCTLR_EL1 :  64 words$word;
     SCTLR_EL2 :  64 words$word;
     SCTLR_EL3 :  64 words$word;
     SCTLR_S :  32 words$word;
     SDER32_EL3 :  32 words$word;
     SPIDEN : signal;
     SPSR_EL1 :  32 words$word;
     SPSR_EL2 :  32 words$word;
     SPSR_EL3 :  32 words$word;
     SPSR_abt :  32 words$word;
     SPSR_fiq :  32 words$word;
     SPSR_irq :  32 words$word;
     SPSR_und :  32 words$word;
     SP_mon :  32 words$word;
     ScheduledFIQ : bool;
     ScheduledIRQ : bool;
     TCR_EL1 :  64 words$word;
     TCR_EL3 :  32 words$word;
     TFSRE0_EL1 :  32 words$word;
     TFSR_EL1 :  32 words$word;
     TFSR_EL2 :  32 words$word;
     TFSR_EL3 :  32 words$word;
     TLBHits : ii;
     TLBMisses : ii;
     TTBCR2_S :  32 words$word;
     TTBCR_S :  32 words$word;
     TTBR0_EL1 :  64 words$word;
     TTBR0_EL2 :  64 words$word;
     TTBR0_EL3 :  64 words$word;
     TTBR0_S :  64 words$word;
     TTBR1_EL1 :  64 words$word;
     TTBR1_EL2 :  64 words$word;
     TTBR1_S :  64 words$word;
     VBAR_EL1 :  64 words$word;
     VBAR_EL2 :  64 words$word;
     VBAR_EL3 :  64 words$word;
     VBAR_S :  32 words$word;
     VSESR_EL2 :  64 words$word;
     VSTCR_EL2 :  32 words$word;
     VSTTBR_EL2 :  64 words$word;
     VTCR_EL2 :  32 words$word;
     VTTBR_EL2 :  64 words$word;
     AXIAbortCtl :  32 words$word;
     ClearFIQ :  32 words$word;
     ClearIRQ :  32 words$word;
     FIQPending : bool;
     GTEActive : bool;
     GTECurrentAPI :  32 words$word;
     GTEHaveParamLo : bool;
     GTEListParam : ii;
     GTEListParamIndex : ii;
     GTEListParamTerminator :  64 words$word;
     GTEListParamTerminatorCount : ii;
     GTEListParamTerminators : ii;
     GTEParamCount : ii;
     GTEParamLo :  32 words$word;
     GTEParamType : GTEParamType;
     GTEParamsComplete : bool;
     GTEStatus :  64 words$word;
     GTE_AS_Access :  32 words$word;
     GTE_AS_AccessCount : ii;
     GTE_AS_Address :  64 words$word;
     GTE_AS_Size :  64 words$word;
     IRQPending : bool;
     PC :  64 words$word;
     PPURACR :  32 words$word;
     PPURBAR :  64 words$word;
     PPURSER :  32 words$word;
     PendingPhysicalSE : bool;
     R : ( 64 words$word) list;
     ScheduleFIQ :  32 words$word;
     ScheduleIRQ :  32 words$word;
     TLB : TLBLine list;
     TargetCPU :  32 words$word;
     CNTControlBase :  52 words$word;
     LSISyndrome :  11 words$word;
     PC_changed : bool;
     currentInstr :  32 words$word;
     currentInstrLength : ii;
     defaultRAM :  56 words$word;
     highest_el_aarch32 : bool  |>`;





(*val GTEParamType_of_regval : register_value -> maybe GTEParamType*)

val _ = Define `
 ((GTEParamType_of_regval:register_value ->(GTEParamType)option) merge_var=
    ((case merge_var of   Regval_GTEParamType (v) => SOME v | g__42 => NONE )))`;


(*val regval_of_GTEParamType : GTEParamType -> register_value*)

val _ = Define `
 ((regval_of_GTEParamType:GTEParamType -> register_value) v=  (Regval_GTEParamType v))`;


(*val ProcState_of_regval : register_value -> maybe ProcState*)

val _ = Define `
 ((ProcState_of_regval:register_value ->(ProcState)option) merge_var=
    ((case merge_var of   Regval_ProcState (v) => SOME v | g__41 => NONE )))`;


(*val regval_of_ProcState : ProcState -> register_value*)

val _ = Define `
 ((regval_of_ProcState:ProcState -> register_value) v=  (Regval_ProcState v))`;


(*val TLBLine_of_regval : register_value -> maybe TLBLine*)

val _ = Define `
 ((TLBLine_of_regval:register_value ->(TLBLine)option) merge_var=
    ((case merge_var of   Regval_TLBLine (v) => SOME v | g__40 => NONE )))`;


(*val regval_of_TLBLine : TLBLine -> register_value*)

val _ = Define `
 ((regval_of_TLBLine:TLBLine -> register_value) v=  (Regval_TLBLine v))`;


(*val bool_of_regval : register_value -> maybe bool*)

val _ = Define `
 ((bool_of_regval:register_value ->(bool)option) merge_var=
    ((case merge_var of   Regval_bool (v) => SOME v | g__39 => NONE )))`;


(*val regval_of_bool : bool -> register_value*)

val _ = Define `
 ((regval_of_bool:bool -> register_value) v=  (Regval_bool v))`;


(*val int_of_regval : register_value -> maybe ii*)

val _ = Define `
 ((int_of_regval:register_value ->(int)option) merge_var=  ((case merge_var of   Regval_int (v) => SOME v | g__38 => NONE )))`;


(*val regval_of_int : ii -> register_value*)

val _ = Define `
 ((regval_of_int:int -> register_value) v=  (Regval_int v))`;


(*val signal_of_regval : register_value -> maybe signal*)

val _ = Define `
 ((signal_of_regval:register_value ->(signal)option) merge_var=
    ((case merge_var of   Regval_signal (v) => SOME v | g__37 => NONE )))`;


(*val regval_of_signal : signal -> register_value*)

val _ = Define `
 ((regval_of_signal:signal -> register_value) v=  (Regval_signal v))`;


(*val vector_11_dec_bit_of_regval : register_value -> maybe (mword ty11)*)

val _ = Define `
 ((vector_11_dec_bit_of_regval:register_value ->((11)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_11_dec_bit (v) => SOME v | g__36 => NONE )))`;


(*val regval_of_vector_11_dec_bit : mword ty11 -> register_value*)

val _ = Define `
 ((regval_of_vector_11_dec_bit:(11)words$word -> register_value) v=  (Regval_vector_11_dec_bit v))`;


(*val vector_128_dec_bit_of_regval : register_value -> maybe (mword ty128)*)

val _ = Define `
 ((vector_128_dec_bit_of_regval:register_value ->((128)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_128_dec_bit (v) => SOME v | g__35 => NONE )))`;


(*val regval_of_vector_128_dec_bit : mword ty128 -> register_value*)

val _ = Define `
 ((regval_of_vector_128_dec_bit:(128)words$word -> register_value) v=  (Regval_vector_128_dec_bit v))`;


(*val vector_16_dec_bit_of_regval : register_value -> maybe (mword ty16)*)

val _ = Define `
 ((vector_16_dec_bit_of_regval:register_value ->((16)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_16_dec_bit (v) => SOME v | g__34 => NONE )))`;


(*val regval_of_vector_16_dec_bit : mword ty16 -> register_value*)

val _ = Define `
 ((regval_of_vector_16_dec_bit:(16)words$word -> register_value) v=  (Regval_vector_16_dec_bit v))`;


(*val vector_1_dec_bit_of_regval : register_value -> maybe (mword ty1)*)

val _ = Define `
 ((vector_1_dec_bit_of_regval:register_value ->((1)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_1_dec_bit (v) => SOME v | g__33 => NONE )))`;


(*val regval_of_vector_1_dec_bit : mword ty1 -> register_value*)

val _ = Define `
 ((regval_of_vector_1_dec_bit:(1)words$word -> register_value) v=  (Regval_vector_1_dec_bit v))`;


(*val vector_2_dec_bit_of_regval : register_value -> maybe (mword ty2)*)

val _ = Define `
 ((vector_2_dec_bit_of_regval:register_value ->((2)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_2_dec_bit (v) => SOME v | g__32 => NONE )))`;


(*val regval_of_vector_2_dec_bit : mword ty2 -> register_value*)

val _ = Define `
 ((regval_of_vector_2_dec_bit:(2)words$word -> register_value) v=  (Regval_vector_2_dec_bit v))`;


(*val vector_32_dec_bit_of_regval : register_value -> maybe (mword ty32)*)

val _ = Define `
 ((vector_32_dec_bit_of_regval:register_value ->((32)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_32_dec_bit (v) => SOME v | g__31 => NONE )))`;


(*val regval_of_vector_32_dec_bit : mword ty32 -> register_value*)

val _ = Define `
 ((regval_of_vector_32_dec_bit:(32)words$word -> register_value) v=  (Regval_vector_32_dec_bit v))`;


(*val vector_4_dec_bit_of_regval : register_value -> maybe (mword ty4)*)

val _ = Define `
 ((vector_4_dec_bit_of_regval:register_value ->((4)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_4_dec_bit (v) => SOME v | g__30 => NONE )))`;


(*val regval_of_vector_4_dec_bit : mword ty4 -> register_value*)

val _ = Define `
 ((regval_of_vector_4_dec_bit:(4)words$word -> register_value) v=  (Regval_vector_4_dec_bit v))`;


(*val vector_52_dec_bit_of_regval : register_value -> maybe (mword ty52)*)

val _ = Define `
 ((vector_52_dec_bit_of_regval:register_value ->((52)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_52_dec_bit (v) => SOME v | g__29 => NONE )))`;


(*val regval_of_vector_52_dec_bit : mword ty52 -> register_value*)

val _ = Define `
 ((regval_of_vector_52_dec_bit:(52)words$word -> register_value) v=  (Regval_vector_52_dec_bit v))`;


(*val vector_56_dec_bit_of_regval : register_value -> maybe (mword ty56)*)

val _ = Define `
 ((vector_56_dec_bit_of_regval:register_value ->((56)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_56_dec_bit (v) => SOME v | g__28 => NONE )))`;


(*val regval_of_vector_56_dec_bit : mword ty56 -> register_value*)

val _ = Define `
 ((regval_of_vector_56_dec_bit:(56)words$word -> register_value) v=  (Regval_vector_56_dec_bit v))`;


(*val vector_64_dec_bit_of_regval : register_value -> maybe (mword ty64)*)

val _ = Define `
 ((vector_64_dec_bit_of_regval:register_value ->((64)words$word)option) merge_var=
    ((case merge_var of   Regval_vector_64_dec_bit (v) => SOME v | g__27 => NONE )))`;


(*val regval_of_vector_64_dec_bit : mword ty64 -> register_value*)

val _ = Define `
 ((regval_of_vector_64_dec_bit:(64)words$word -> register_value) v=  (Regval_vector_64_dec_bit v))`;




(*val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
val _ = Define `
 ((vector_of_regval:(register_value -> 'a option) -> register_value ->('a list)option) of_regval1= 
  (\x .  (case x of
               Regval_vector (_, _, v) => just_list (MAP of_regval1 v)
           | _ => NONE
         )))`;


(*val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value*)
val _ = Define `
 ((regval_of_vector:('a -> register_value) -> int -> bool -> 'a list -> register_value) regval_of1 size1 is_inc xs=  (Regval_vector (size1, is_inc, MAP regval_of1 xs)))`;


(*val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)*)
val _ = Define `
 ((list_of_regval:(register_value -> 'a option) -> register_value ->('a list)option) of_regval1= 
  (\x .  (case x of
               Regval_list v => just_list (MAP of_regval1 v)
           | _ => NONE
         )))`;


(*val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value*)
val _ = Define `
 ((regval_of_list:('a -> register_value) -> 'a list -> register_value) regval_of1 xs=  (Regval_list (MAP regval_of1 xs)))`;


(*val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)*)
val _ = Define `
 ((option_of_regval:(register_value -> 'a option) -> register_value ->('a option)option) of_regval1= 
  (\x .  (case x of
               Regval_option v => SOME (OPTION_BIND v of_regval1)
           | _ => NONE
         )))`;


(*val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value*)
val _ = Define `
 ((regval_of_option:('a -> register_value) -> 'a option -> register_value) regval_of1 v=  (Regval_option (OPTION_MAP regval_of1 v)))`;



val _ = Define `
 ((CNTHCTL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHCTL_EL2";
  read_from := (\ s .  s.CNTHCTL_EL2);
  write_to := (\ v s .  (( s with<| CNTHCTL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CPTR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CPTR_EL2";
  read_from := (\ s .  s.CPTR_EL2);
  write_to := (\ v s .  (( s with<| CPTR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CCSIDR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CCSIDR_EL1";
  read_from := (\ s .  s.CCSIDR_EL1);
  write_to := (\ v s .  (( s with<| CCSIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ACTLR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ACTLR_EL1";
  read_from := (\ s .  s.ACTLR_EL1);
  write_to := (\ v s .  (( s with<| ACTLR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ACTLR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ACTLR_EL2";
  read_from := (\ s .  s.ACTLR_EL2);
  write_to := (\ v s .  (( s with<| ACTLR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ACTLR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ACTLR_EL3";
  read_from := (\ s .  s.ACTLR_EL3);
  write_to := (\ v s .  (( s with<| ACTLR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((AFSR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AFSR0_EL1";
  read_from := (\ s .  s.AFSR0_EL1);
  write_to := (\ v s .  (( s with<| AFSR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AFSR0_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AFSR0_EL2";
  read_from := (\ s .  s.AFSR0_EL2);
  write_to := (\ v s .  (( s with<| AFSR0_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AFSR0_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AFSR0_EL3";
  read_from := (\ s .  s.AFSR0_EL3);
  write_to := (\ v s .  (( s with<| AFSR0_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AFSR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AFSR1_EL1";
  read_from := (\ s .  s.AFSR1_EL1);
  write_to := (\ v s .  (( s with<| AFSR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AFSR1_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AFSR1_EL2";
  read_from := (\ s .  s.AFSR1_EL2);
  write_to := (\ v s .  (( s with<| AFSR1_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AFSR1_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AFSR1_EL3";
  read_from := (\ s .  s.AFSR1_EL3);
  write_to := (\ v s .  (( s with<| AFSR1_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AIDR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AIDR_EL1";
  read_from := (\ s .  s.AIDR_EL1);
  write_to := (\ v s .  (( s with<| AIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AMAIR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "AMAIR_EL1";
  read_from := (\ s .  s.AMAIR_EL1);
  write_to := (\ v s .  (( s with<| AMAIR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((AMAIR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "AMAIR_EL2";
  read_from := (\ s .  s.AMAIR_EL2);
  write_to := (\ v s .  (( s with<| AMAIR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((AMAIR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "AMAIR_EL3";
  read_from := (\ s .  s.AMAIR_EL3);
  write_to := (\ v s .  (( s with<| AMAIR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDAKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDAKeyHi_EL1";
  read_from := (\ s .  s.APDAKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APDAKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDAKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDAKeyLo_EL1";
  read_from := (\ s .  s.APDAKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APDAKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDBKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDBKeyHi_EL1";
  read_from := (\ s .  s.APDBKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APDBKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APDBKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APDBKeyLo_EL1";
  read_from := (\ s .  s.APDBKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APDBKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APGAKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APGAKeyHi_EL1";
  read_from := (\ s .  s.APGAKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APGAKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APGAKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APGAKeyLo_EL1";
  read_from := (\ s .  s.APGAKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APGAKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIAKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIAKeyHi_EL1";
  read_from := (\ s .  s.APIAKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APIAKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIAKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIAKeyLo_EL1";
  read_from := (\ s .  s.APIAKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APIAKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIBKeyHi_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIBKeyHi_EL1";
  read_from := (\ s .  s.APIBKeyHi_EL1);
  write_to := (\ v s .  (( s with<| APIBKeyHi_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((APIBKeyLo_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "APIBKeyLo_EL1";
  read_from := (\ s .  s.APIBKeyLo_EL1);
  write_to := (\ v s .  (( s with<| APIBKeyLo_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((BTypeCompatible_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "BTypeCompatible";
  read_from := (\ s .  s.BTypeCompatible);
  write_to := (\ v s .  (( s with<| BTypeCompatible := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((BTypeNext_ref:((regstate),(register_value),((2)words$word))register_ref)=  (<|
  name := "BTypeNext";
  read_from := (\ s .  s.BTypeNext);
  write_to := (\ v s .  (( s with<| BTypeNext := v |>)));
  of_regval := (\ v .  vector_2_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_2_dec_bit v) |>))`;


val _ = Define `
 ((CCSIDR2_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CCSIDR2_EL1";
  read_from := (\ s .  s.CCSIDR2_EL1);
  write_to := (\ v s .  (( s with<| CCSIDR2_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CLIDR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CLIDR_EL1";
  read_from := (\ s .  s.CLIDR_EL1);
  write_to := (\ v s .  (( s with<| CLIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTFRQ_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTFRQ_EL0";
  read_from := (\ s .  s.CNTFRQ_EL0);
  write_to := (\ v s .  (( s with<| CNTFRQ_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHPS_CTL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHPS_CTL_EL2";
  read_from := (\ s .  s.CNTHPS_CTL_EL2);
  write_to := (\ v s .  (( s with<| CNTHPS_CTL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHPS_CVAL_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTHPS_CVAL_EL2";
  read_from := (\ s .  s.CNTHPS_CVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHPS_CVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTHPS_TVAL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHPS_TVAL_EL2";
  read_from := (\ s .  s.CNTHPS_TVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHPS_TVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHP_CTL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHP_CTL_EL2";
  read_from := (\ s .  s.CNTHP_CTL_EL2);
  write_to := (\ v s .  (( s with<| CNTHP_CTL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHP_CVAL_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTHP_CVAL_EL2";
  read_from := (\ s .  s.CNTHP_CVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHP_CVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTHP_TVAL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHP_TVAL_EL2";
  read_from := (\ s .  s.CNTHP_TVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHP_TVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHVS_CTL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHVS_CTL_EL2";
  read_from := (\ s .  s.CNTHVS_CTL_EL2);
  write_to := (\ v s .  (( s with<| CNTHVS_CTL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHVS_CVAL_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTHVS_CVAL_EL2";
  read_from := (\ s .  s.CNTHVS_CVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHVS_CVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTHVS_TVAL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHVS_TVAL_EL2";
  read_from := (\ s .  s.CNTHVS_TVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHVS_TVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHV_CTL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHV_CTL_EL2";
  read_from := (\ s .  s.CNTHV_CTL_EL2);
  write_to := (\ v s .  (( s with<| CNTHV_CTL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTHV_CVAL_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTHV_CVAL_EL2";
  read_from := (\ s .  s.CNTHV_CVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHV_CVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTHV_TVAL_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTHV_TVAL_EL2";
  read_from := (\ s .  s.CNTHV_TVAL_EL2);
  write_to := (\ v s .  (( s with<| CNTHV_TVAL_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTKCTL_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTKCTL_EL1";
  read_from := (\ s .  s.CNTKCTL_EL1);
  write_to := (\ v s .  (( s with<| CNTKCTL_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTPCT_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTPCT_EL0";
  read_from := (\ s .  s.CNTPCT_EL0);
  write_to := (\ v s .  (( s with<| CNTPCT_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTPS_CTL_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTPS_CTL_EL1";
  read_from := (\ s .  s.CNTPS_CTL_EL1);
  write_to := (\ v s .  (( s with<| CNTPS_CTL_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTPS_CVAL_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTPS_CVAL_EL1";
  read_from := (\ s .  s.CNTPS_CVAL_EL1);
  write_to := (\ v s .  (( s with<| CNTPS_CVAL_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTPS_TVAL_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTPS_TVAL_EL1";
  read_from := (\ s .  s.CNTPS_TVAL_EL1);
  write_to := (\ v s .  (( s with<| CNTPS_TVAL_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTP_CTL_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTP_CTL_EL0";
  read_from := (\ s .  s.CNTP_CTL_EL0);
  write_to := (\ v s .  (( s with<| CNTP_CTL_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTP_CTL_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTP_CTL_S";
  read_from := (\ s .  s.CNTP_CTL_S);
  write_to := (\ v s .  (( s with<| CNTP_CTL_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTP_CVAL_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTP_CVAL_EL0";
  read_from := (\ s .  s.CNTP_CVAL_EL0);
  write_to := (\ v s .  (( s with<| CNTP_CVAL_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTP_TVAL_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTP_TVAL_EL0";
  read_from := (\ s .  s.CNTP_TVAL_EL0);
  write_to := (\ v s .  (( s with<| CNTP_TVAL_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTVCT_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTVCT_EL0";
  read_from := (\ s .  s.CNTVCT_EL0);
  write_to := (\ v s .  (( s with<| CNTVCT_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTVOFF_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTVOFF_EL2";
  read_from := (\ s .  s.CNTVOFF_EL2);
  write_to := (\ v s .  (( s with<| CNTVOFF_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTV_CTL_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTV_CTL_EL0";
  read_from := (\ s .  s.CNTV_CTL_EL0);
  write_to := (\ v s .  (( s with<| CNTV_CTL_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTV_CVAL_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTV_CVAL_EL0";
  read_from := (\ s .  s.CNTV_CVAL_EL0);
  write_to := (\ v s .  (( s with<| CNTV_CVAL_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTV_TVAL_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTV_TVAL_EL0";
  read_from := (\ s .  s.CNTV_TVAL_EL0);
  write_to := (\ v s .  (( s with<| CNTV_TVAL_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CPACR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CPACR_EL1";
  read_from := (\ s .  s.CPACR_EL1);
  write_to := (\ v s .  (( s with<| CPACR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CPTR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CPTR_EL3";
  read_from := (\ s .  s.CPTR_EL3);
  write_to := (\ v s .  (( s with<| CPTR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CSSELR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CSSELR_EL1";
  read_from := (\ s .  s.CSSELR_EL1);
  write_to := (\ v s .  (( s with<| CSSELR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CSSELR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CSSELR_S";
  read_from := (\ s .  s.CSSELR_S);
  write_to := (\ v s .  (( s with<| CSSELR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CTR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CTR_EL0";
  read_from := (\ s .  s.CTR_EL0);
  write_to := (\ v s .  (( s with<| CTR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((DBGAUTHSTATUS_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGAUTHSTATUS_EL1";
  read_from := (\ s .  s.DBGAUTHSTATUS_EL1);
  write_to := (\ v s .  (( s with<| DBGAUTHSTATUS_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGCLAIMCLR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGCLAIMCLR_EL1";
  read_from := (\ s .  s.DBGCLAIMCLR_EL1);
  write_to := (\ v s .  (( s with<| DBGCLAIMCLR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGCLAIMSET_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGCLAIMSET_EL1";
  read_from := (\ s .  s.DBGCLAIMSET_EL1);
  write_to := (\ v s .  (( s with<| DBGCLAIMSET_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGDEVID1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGDEVID1";
  read_from := (\ s .  s.DBGDEVID1);
  write_to := (\ v s .  (( s with<| DBGDEVID1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGDEVID2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGDEVID2";
  read_from := (\ s .  s.DBGDEVID2);
  write_to := (\ v s .  (( s with<| DBGDEVID2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGDSCRint_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGDSCRint";
  read_from := (\ s .  s.DBGDSCRint);
  write_to := (\ v s .  (( s with<| DBGDSCRint := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGDTRRX_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGDTRRX_EL0";
  read_from := (\ s .  s.DBGDTRRX_EL0);
  write_to := (\ v s .  (( s with<| DBGDTRRX_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGDTRTX_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGDTRTX_EL0";
  read_from := (\ s .  s.DBGDTRTX_EL0);
  write_to := (\ v s .  (( s with<| DBGDTRTX_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGDTR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "DBGDTR_EL0";
  read_from := (\ s .  s.DBGDTR_EL0);
  write_to := (\ v s .  (( s with<| DBGDTR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((DBGWFAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGWFAR";
  read_from := (\ s .  s.DBGWFAR);
  write_to := (\ v s .  (( s with<| DBGWFAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DCZID_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DCZID_EL0";
  read_from := (\ s .  s.DCZID_EL0);
  write_to := (\ v s .  (( s with<| DCZID_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DISR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "DISR_EL1";
  read_from := (\ s .  s.DISR_EL1);
  write_to := (\ v s .  (( s with<| DISR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((EDECCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDECCR";
  read_from := (\ s .  s.EDECCR);
  write_to := (\ v s .  (( s with<| EDECCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDECR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDECR";
  read_from := (\ s .  s.EDECR);
  write_to := (\ v s .  (( s with<| EDECR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDESR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDESR";
  read_from := (\ s .  s.EDESR);
  write_to := (\ v s .  (( s with<| EDESR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDLSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDLSR";
  read_from := (\ s .  s.EDLSR);
  write_to := (\ v s .  (( s with<| EDLSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDPCSR_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "EDPCSR";
  read_from := (\ s .  s.EDPCSR);
  write_to := (\ v s .  (( s with<| EDPCSR := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((EDPFR_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "EDPFR";
  read_from := (\ s .  s.EDPFR);
  write_to := (\ v s .  (( s with<| EDPFR := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((EDPRCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDPRCR";
  read_from := (\ s .  s.EDPRCR);
  write_to := (\ v s .  (( s with<| EDPRCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDPRSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDPRSR";
  read_from := (\ s .  s.EDPRSR);
  write_to := (\ v s .  (( s with<| EDPRSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDVIDSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDVIDSR";
  read_from := (\ s .  s.EDVIDSR);
  write_to := (\ v s .  (( s with<| EDVIDSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL0";
  read_from := (\ s .  s.ELR_EL0);
  write_to := (\ v s .  (( s with<| ELR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ESP_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ESP_EL0";
  read_from := (\ s .  s.ESP_EL0);
  write_to := (\ v s .  (( s with<| ESP_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL0";
  read_from := (\ s .  s.ESR_EL0);
  write_to := (\ v s .  (( s with<| ESR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EventRegister_ref:((regstate),(register_value),((1)words$word))register_ref)=  (<|
  name := "EventRegister";
  read_from := (\ s .  s.EventRegister);
  write_to := (\ v s .  (( s with<| EventRegister := v |>)));
  of_regval := (\ v .  vector_1_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_1_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL0";
  read_from := (\ s .  s.FAR_EL0);
  write_to := (\ v s .  (( s with<| FAR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((FCSEIDR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FCSEIDR";
  read_from := (\ s .  s.FCSEIDR);
  write_to := (\ v s .  (( s with<| FCSEIDR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPCR";
  read_from := (\ s .  s.FPCR);
  write_to := (\ v s .  (( s with<| FPCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPEXC32_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPEXC32_EL2";
  read_from := (\ s .  s.FPEXC32_EL2);
  write_to := (\ v s .  (( s with<| FPEXC32_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPSCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPSCR";
  read_from := (\ s .  s.FPSCR);
  write_to := (\ v s .  (( s with<| FPSCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPSID_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPSID";
  read_from := (\ s .  s.FPSID);
  write_to := (\ v s .  (( s with<| FPSID := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FPSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "FPSR";
  read_from := (\ s .  s.FPSR);
  write_to := (\ v s .  (( s with<| FPSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((GCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "GCR_EL1";
  read_from := (\ s .  s.GCR_EL1);
  write_to := (\ v s .  (( s with<| GCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HACR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HACR_EL2";
  read_from := (\ s .  s.HACR_EL2);
  write_to := (\ v s .  (( s with<| HACR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((HSTR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "HSTR_EL2";
  read_from := (\ s .  s.HSTR_EL2);
  write_to := (\ v s .  (( s with<| HSTR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_AP0R_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "ICC_AP0R_EL1";
  read_from := (\ s .  s.ICC_AP0R_EL1);
  write_to := (\ v s .  (( s with<| ICC_AP0R_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((ICC_AP1R_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "ICC_AP1R_EL1";
  read_from := (\ s .  s.ICC_AP1R_EL1);
  write_to := (\ v s .  (( s with<| ICC_AP1R_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((ICC_ASGI1R_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ICC_ASGI1R_EL1";
  read_from := (\ s .  s.ICC_ASGI1R_EL1);
  write_to := (\ v s .  (( s with<| ICC_ASGI1R_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ICC_BPR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_BPR0_EL1";
  read_from := (\ s .  s.ICC_BPR0_EL1);
  write_to := (\ v s .  (( s with<| ICC_BPR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_BPR1_EL1_NS_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_BPR1_EL1_NS";
  read_from := (\ s .  s.ICC_BPR1_EL1_NS);
  write_to := (\ v s .  (( s with<| ICC_BPR1_EL1_NS := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_BPR1_EL1_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_BPR1_EL1_S";
  read_from := (\ s .  s.ICC_BPR1_EL1_S);
  write_to := (\ v s .  (( s with<| ICC_BPR1_EL1_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_CTLR_EL1_NS_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_CTLR_EL1_NS";
  read_from := (\ s .  s.ICC_CTLR_EL1_NS);
  write_to := (\ v s .  (( s with<| ICC_CTLR_EL1_NS := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_CTLR_EL1_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_CTLR_EL1_S";
  read_from := (\ s .  s.ICC_CTLR_EL1_S);
  write_to := (\ v s .  (( s with<| ICC_CTLR_EL1_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_CTLR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_CTLR_EL3";
  read_from := (\ s .  s.ICC_CTLR_EL3);
  write_to := (\ v s .  (( s with<| ICC_CTLR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_DIR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_DIR_EL1";
  read_from := (\ s .  s.ICC_DIR_EL1);
  write_to := (\ v s .  (( s with<| ICC_DIR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_EOIR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_EOIR0_EL1";
  read_from := (\ s .  s.ICC_EOIR0_EL1);
  write_to := (\ v s .  (( s with<| ICC_EOIR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_EOIR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_EOIR1_EL1";
  read_from := (\ s .  s.ICC_EOIR1_EL1);
  write_to := (\ v s .  (( s with<| ICC_EOIR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_HPPIR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_HPPIR0_EL1";
  read_from := (\ s .  s.ICC_HPPIR0_EL1);
  write_to := (\ v s .  (( s with<| ICC_HPPIR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_HPPIR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_HPPIR1_EL1";
  read_from := (\ s .  s.ICC_HPPIR1_EL1);
  write_to := (\ v s .  (( s with<| ICC_HPPIR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_IAR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_IAR0_EL1";
  read_from := (\ s .  s.ICC_IAR0_EL1);
  write_to := (\ v s .  (( s with<| ICC_IAR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_IAR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_IAR1_EL1";
  read_from := (\ s .  s.ICC_IAR1_EL1);
  write_to := (\ v s .  (( s with<| ICC_IAR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_IGRPEN0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_IGRPEN0_EL1";
  read_from := (\ s .  s.ICC_IGRPEN0_EL1);
  write_to := (\ v s .  (( s with<| ICC_IGRPEN0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_IGRPEN1_EL1_NS_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_IGRPEN1_EL1_NS";
  read_from := (\ s .  s.ICC_IGRPEN1_EL1_NS);
  write_to := (\ v s .  (( s with<| ICC_IGRPEN1_EL1_NS := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_IGRPEN1_EL1_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_IGRPEN1_EL1_S";
  read_from := (\ s .  s.ICC_IGRPEN1_EL1_S);
  write_to := (\ v s .  (( s with<| ICC_IGRPEN1_EL1_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_IGRPEN1_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_IGRPEN1_EL3";
  read_from := (\ s .  s.ICC_IGRPEN1_EL3);
  write_to := (\ v s .  (( s with<| ICC_IGRPEN1_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_PMR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_PMR_EL1";
  read_from := (\ s .  s.ICC_PMR_EL1);
  write_to := (\ v s .  (( s with<| ICC_PMR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_RPR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_RPR_EL1";
  read_from := (\ s .  s.ICC_RPR_EL1);
  write_to := (\ v s .  (( s with<| ICC_RPR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_SGI0R_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ICC_SGI0R_EL1";
  read_from := (\ s .  s.ICC_SGI0R_EL1);
  write_to := (\ v s .  (( s with<| ICC_SGI0R_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ICC_SGI1R_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ICC_SGI1R_EL1";
  read_from := (\ s .  s.ICC_SGI1R_EL1);
  write_to := (\ v s .  (( s with<| ICC_SGI1R_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ICC_SRE_EL1_NS_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_SRE_EL1_NS";
  read_from := (\ s .  s.ICC_SRE_EL1_NS);
  write_to := (\ v s .  (( s with<| ICC_SRE_EL1_NS := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_SRE_EL1_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_SRE_EL1_S";
  read_from := (\ s .  s.ICC_SRE_EL1_S);
  write_to := (\ v s .  (( s with<| ICC_SRE_EL1_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_SRE_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_SRE_EL2";
  read_from := (\ s .  s.ICC_SRE_EL2);
  write_to := (\ v s .  (( s with<| ICC_SRE_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICC_SRE_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICC_SRE_EL3";
  read_from := (\ s .  s.ICC_SRE_EL3);
  write_to := (\ v s .  (( s with<| ICC_SRE_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICH_AP0R_EL2_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "ICH_AP0R_EL2";
  read_from := (\ s .  s.ICH_AP0R_EL2);
  write_to := (\ v s .  (( s with<| ICH_AP0R_EL2 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((ICH_AP1R_EL2_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "ICH_AP1R_EL2";
  read_from := (\ s .  s.ICH_AP1R_EL2);
  write_to := (\ v s .  (( s with<| ICH_AP1R_EL2 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((ICH_EISR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICH_EISR_EL2";
  read_from := (\ s .  s.ICH_EISR_EL2);
  write_to := (\ v s .  (( s with<| ICH_EISR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICH_ELRSR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICH_ELRSR_EL2";
  read_from := (\ s .  s.ICH_ELRSR_EL2);
  write_to := (\ v s .  (( s with<| ICH_ELRSR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICH_HCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICH_HCR_EL2";
  read_from := (\ s .  s.ICH_HCR_EL2);
  write_to := (\ v s .  (( s with<| ICH_HCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICH_MISR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICH_MISR_EL2";
  read_from := (\ s .  s.ICH_MISR_EL2);
  write_to := (\ v s .  (( s with<| ICH_MISR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICH_VMCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICH_VMCR_EL2";
  read_from := (\ s .  s.ICH_VMCR_EL2);
  write_to := (\ v s .  (( s with<| ICH_VMCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICH_VTR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICH_VTR_EL2";
  read_from := (\ s .  s.ICH_VTR_EL2);
  write_to := (\ v s .  (( s with<| ICH_VTR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_AP0R_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "ICV_AP0R_EL1";
  read_from := (\ s .  s.ICV_AP0R_EL1);
  write_to := (\ v s .  (( s with<| ICV_AP0R_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((ICV_AP1R_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "ICV_AP1R_EL1";
  read_from := (\ s .  s.ICV_AP1R_EL1);
  write_to := (\ v s .  (( s with<| ICV_AP1R_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((ICV_BPR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_BPR0_EL1";
  read_from := (\ s .  s.ICV_BPR0_EL1);
  write_to := (\ v s .  (( s with<| ICV_BPR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_BPR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_BPR1_EL1";
  read_from := (\ s .  s.ICV_BPR1_EL1);
  write_to := (\ v s .  (( s with<| ICV_BPR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_CTLR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_CTLR_EL1";
  read_from := (\ s .  s.ICV_CTLR_EL1);
  write_to := (\ v s .  (( s with<| ICV_CTLR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_DIR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_DIR_EL1";
  read_from := (\ s .  s.ICV_DIR_EL1);
  write_to := (\ v s .  (( s with<| ICV_DIR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_EOIR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_EOIR0_EL1";
  read_from := (\ s .  s.ICV_EOIR0_EL1);
  write_to := (\ v s .  (( s with<| ICV_EOIR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_EOIR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_EOIR1_EL1";
  read_from := (\ s .  s.ICV_EOIR1_EL1);
  write_to := (\ v s .  (( s with<| ICV_EOIR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_HPPIR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_HPPIR0_EL1";
  read_from := (\ s .  s.ICV_HPPIR0_EL1);
  write_to := (\ v s .  (( s with<| ICV_HPPIR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_HPPIR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_HPPIR1_EL1";
  read_from := (\ s .  s.ICV_HPPIR1_EL1);
  write_to := (\ v s .  (( s with<| ICV_HPPIR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_IAR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_IAR0_EL1";
  read_from := (\ s .  s.ICV_IAR0_EL1);
  write_to := (\ v s .  (( s with<| ICV_IAR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_IAR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_IAR1_EL1";
  read_from := (\ s .  s.ICV_IAR1_EL1);
  write_to := (\ v s .  (( s with<| ICV_IAR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_IGRPEN0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_IGRPEN0_EL1";
  read_from := (\ s .  s.ICV_IGRPEN0_EL1);
  write_to := (\ v s .  (( s with<| ICV_IGRPEN0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_IGRPEN1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_IGRPEN1_EL1";
  read_from := (\ s .  s.ICV_IGRPEN1_EL1);
  write_to := (\ v s .  (( s with<| ICV_IGRPEN1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_PMR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_PMR_EL1";
  read_from := (\ s .  s.ICV_PMR_EL1);
  write_to := (\ v s .  (( s with<| ICV_PMR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ICV_RPR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ICV_RPR_EL1";
  read_from := (\ s .  s.ICV_RPR_EL1);
  write_to := (\ v s .  (( s with<| ICV_RPR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64AFR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_AA64AFR0_EL1";
  read_from := (\ s .  s.ID_AA64AFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64AFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64AFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_AA64AFR1_EL1";
  read_from := (\ s .  s.ID_AA64AFR1_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64AFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64DFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_AA64DFR1_EL1";
  read_from := (\ s .  s.ID_AA64DFR1_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64DFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64ISAR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64ISAR0_EL1";
  read_from := (\ s .  s.ID_AA64ISAR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64ISAR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64ISAR1_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64ISAR1_EL1";
  read_from := (\ s .  s.ID_AA64ISAR1_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64ISAR1_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64MMFR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64MMFR0_EL1";
  read_from := (\ s .  s.ID_AA64MMFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64MMFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64MMFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_AA64MMFR1_EL1";
  read_from := (\ s .  s.ID_AA64MMFR1_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64MMFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64MMFR2_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64MMFR2_EL1";
  read_from := (\ s .  s.ID_AA64MMFR2_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64MMFR2_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64PFR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64PFR0_EL1";
  read_from := (\ s .  s.ID_AA64PFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64PFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64PFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_AA64PFR1_EL1";
  read_from := (\ s .  s.ID_AA64PFR1_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64PFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_AFR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_AFR0_EL1";
  read_from := (\ s .  s.ID_AFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_DFR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_DFR0_EL1";
  read_from := (\ s .  s.ID_DFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_DFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR0_EL1";
  read_from := (\ s .  s.ID_ISAR0_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR1_EL1";
  read_from := (\ s .  s.ID_ISAR1_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR2_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR2_EL1";
  read_from := (\ s .  s.ID_ISAR2_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR2_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR3_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR3_EL1";
  read_from := (\ s .  s.ID_ISAR3_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR3_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR4_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR4_EL1";
  read_from := (\ s .  s.ID_ISAR4_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR4_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR5_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR5_EL1";
  read_from := (\ s .  s.ID_ISAR5_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR5_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_ISAR6_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_ISAR6_EL1";
  read_from := (\ s .  s.ID_ISAR6_EL1);
  write_to := (\ v s .  (( s with<| ID_ISAR6_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_MMFR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_MMFR0_EL1";
  read_from := (\ s .  s.ID_MMFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_MMFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_MMFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_MMFR1_EL1";
  read_from := (\ s .  s.ID_MMFR1_EL1);
  write_to := (\ v s .  (( s with<| ID_MMFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_MMFR2_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_MMFR2_EL1";
  read_from := (\ s .  s.ID_MMFR2_EL1);
  write_to := (\ v s .  (( s with<| ID_MMFR2_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_MMFR3_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_MMFR3_EL1";
  read_from := (\ s .  s.ID_MMFR3_EL1);
  write_to := (\ v s .  (( s with<| ID_MMFR3_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_MMFR4_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_MMFR4_EL1";
  read_from := (\ s .  s.ID_MMFR4_EL1);
  write_to := (\ v s .  (( s with<| ID_MMFR4_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_PFR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_PFR0_EL1";
  read_from := (\ s .  s.ID_PFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_PFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_PFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_PFR1_EL1";
  read_from := (\ s .  s.ID_PFR1_EL1);
  write_to := (\ v s .  (( s with<| ID_PFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ID_PFR2_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ID_PFR2_EL1";
  read_from := (\ s .  s.ID_PFR2_EL1);
  write_to := (\ v s .  (( s with<| ID_PFR2_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ISR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ISR_EL1";
  read_from := (\ s .  s.ISR_EL1);
  write_to := (\ v s .  (( s with<| ISR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((LORC_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "LORC_EL1";
  read_from := (\ s .  s.LORC_EL1);
  write_to := (\ v s .  (( s with<| LORC_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((LOREA_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "LOREA_EL1";
  read_from := (\ s .  s.LOREA_EL1);
  write_to := (\ v s .  (( s with<| LOREA_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((LORID_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "LORID_EL1";
  read_from := (\ s .  s.LORID_EL1);
  write_to := (\ v s .  (( s with<| LORID_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((LORN_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "LORN_EL1";
  read_from := (\ s .  s.LORN_EL1);
  write_to := (\ v s .  (( s with<| LORN_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((LORSA_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "LORSA_EL1";
  read_from := (\ s .  s.LORSA_EL1);
  write_to := (\ v s .  (( s with<| LORSA_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MDCCINT_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDCCINT_EL1";
  read_from := (\ s .  s.MDCCINT_EL1);
  write_to := (\ v s .  (( s with<| MDCCINT_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MDCCSR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDCCSR_EL0";
  read_from := (\ s .  s.MDCCSR_EL0);
  write_to := (\ v s .  (( s with<| MDCCSR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MDRAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MDRAR_EL1";
  read_from := (\ s .  s.MDRAR_EL1);
  write_to := (\ v s .  (( s with<| MDRAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MIDR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MIDR_EL1";
  read_from := (\ s .  s.MIDR_EL1);
  write_to := (\ v s .  (( s with<| MIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MVFR0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MVFR0_EL1";
  read_from := (\ s .  s.MVFR0_EL1);
  write_to := (\ v s .  (( s with<| MVFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MVFR1_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MVFR1_EL1";
  read_from := (\ s .  s.MVFR1_EL1);
  write_to := (\ v s .  (( s with<| MVFR1_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MVFR2_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MVFR2_EL1";
  read_from := (\ s .  s.MVFR2_EL1);
  write_to := (\ v s .  (( s with<| MVFR2_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((NSACR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "NSACR";
  read_from := (\ s .  s.NSACR);
  write_to := (\ v s .  (( s with<| NSACR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSDTRRX_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSDTRRX_EL1";
  read_from := (\ s .  s.OSDTRRX_EL1);
  write_to := (\ v s .  (( s with<| OSDTRRX_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSDTRTX_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSDTRTX_EL1";
  read_from := (\ s .  s.OSDTRTX_EL1);
  write_to := (\ v s .  (( s with<| OSDTRTX_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSECCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSECCR_EL1";
  read_from := (\ s .  s.OSECCR_EL1);
  write_to := (\ v s .  (( s with<| OSECCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSLAR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSLAR_EL1";
  read_from := (\ s .  s.OSLAR_EL1);
  write_to := (\ v s .  (( s with<| OSLAR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PAR_EL1";
  read_from := (\ s .  s.PAR_EL1);
  write_to := (\ v s .  (( s with<| PAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PAR_S_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PAR_S";
  read_from := (\ s .  s.PAR_S);
  write_to := (\ v s .  (( s with<| PAR_S := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PMCCFILTR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMCCFILTR_EL0";
  read_from := (\ s .  s.PMCCFILTR_EL0);
  write_to := (\ v s .  (( s with<| PMCCFILTR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMCCNTR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PMCCNTR_EL0";
  read_from := (\ s .  s.PMCCNTR_EL0);
  write_to := (\ v s .  (( s with<| PMCCNTR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PMCEID0_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PMCEID0_EL0";
  read_from := (\ s .  s.PMCEID0_EL0);
  write_to := (\ v s .  (( s with<| PMCEID0_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PMCEID1_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PMCEID1_EL0";
  read_from := (\ s .  s.PMCEID1_EL0);
  write_to := (\ v s .  (( s with<| PMCEID1_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PMCNTENCLR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMCNTENCLR_EL0";
  read_from := (\ s .  s.PMCNTENCLR_EL0);
  write_to := (\ v s .  (( s with<| PMCNTENCLR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMCNTENSET_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMCNTENSET_EL0";
  read_from := (\ s .  s.PMCNTENSET_EL0);
  write_to := (\ v s .  (( s with<| PMCNTENSET_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMCR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMCR_EL0";
  read_from := (\ s .  s.PMCR_EL0);
  write_to := (\ v s .  (( s with<| PMCR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMEVCNTR_EL0_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "PMEVCNTR_EL0";
  read_from := (\ s .  s.PMEVCNTR_EL0);
  write_to := (\ v s .  (( s with<| PMEVCNTR_EL0 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 33 : int)) F v) |>))`;


val _ = Define `
 ((PMEVTYPER_EL0_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "PMEVTYPER_EL0";
  read_from := (\ s .  s.PMEVTYPER_EL0);
  write_to := (\ v s .  (( s with<| PMEVTYPER_EL0 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 33 : int)) F v) |>))`;


val _ = Define `
 ((PMINTENCLR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMINTENCLR_EL1";
  read_from := (\ s .  s.PMINTENCLR_EL1);
  write_to := (\ v s .  (( s with<| PMINTENCLR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMINTENSET_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMINTENSET_EL1";
  read_from := (\ s .  s.PMINTENSET_EL1);
  write_to := (\ v s .  (( s with<| PMINTENSET_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMLSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMLSR";
  read_from := (\ s .  s.PMLSR);
  write_to := (\ v s .  (( s with<| PMLSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMMIR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMMIR";
  read_from := (\ s .  s.PMMIR);
  write_to := (\ v s .  (( s with<| PMMIR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMMIR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMMIR_EL1";
  read_from := (\ s .  s.PMMIR_EL1);
  write_to := (\ v s .  (( s with<| PMMIR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMOVSCLR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMOVSCLR_EL0";
  read_from := (\ s .  s.PMOVSCLR_EL0);
  write_to := (\ v s .  (( s with<| PMOVSCLR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMOVSSET_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMOVSSET_EL0";
  read_from := (\ s .  s.PMOVSSET_EL0);
  write_to := (\ v s .  (( s with<| PMOVSSET_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMPCSR_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "PMPCSR";
  read_from := (\ s .  s.PMPCSR);
  write_to := (\ v s .  (( s with<| PMPCSR := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PMSELR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMSELR_EL0";
  read_from := (\ s .  s.PMSELR_EL0);
  write_to := (\ v s .  (( s with<| PMSELR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMSWINC_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMSWINC_EL0";
  read_from := (\ s .  s.PMSWINC_EL0);
  write_to := (\ v s .  (( s with<| PMSWINC_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMUSERENR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMUSERENR_EL0";
  read_from := (\ s .  s.PMUSERENR_EL0);
  write_to := (\ v s .  (( s with<| PMUSERENR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMVIDSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMVIDSR";
  read_from := (\ s .  s.PMVIDSR);
  write_to := (\ v s .  (( s with<| PMVIDSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMXEVCNTR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMXEVCNTR_EL0";
  read_from := (\ s .  s.PMXEVCNTR_EL0);
  write_to := (\ v s .  (( s with<| PMXEVCNTR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PMXEVTYPER_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PMXEVTYPER_EL0";
  read_from := (\ s .  s.PMXEVTYPER_EL0);
  write_to := (\ v s .  (( s with<| PMXEVTYPER_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RC_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "RC";
  read_from := (\ s .  s.RC0);
  write_to := (\ v s .  (( s with<| RC0 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 5 : int)) F v) |>))`;


val _ = Define `
 ((RD_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RD_EL0";
  read_from := (\ s .  s.RD_EL0);
  write_to := (\ v s .  (( s with<| RD_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((REVIDR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "REVIDR_EL1";
  read_from := (\ s .  s.REVIDR_EL1);
  write_to := (\ v s .  (( s with<| REVIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RGSR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "RGSR_EL1";
  read_from := (\ s .  s.RGSR_EL1);
  write_to := (\ v s .  (( s with<| RGSR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RMR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "RMR_EL1";
  read_from := (\ s .  s.RMR_EL1);
  write_to := (\ v s .  (( s with<| RMR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RMR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "RMR_EL2";
  read_from := (\ s .  s.RMR_EL2);
  write_to := (\ v s .  (( s with<| RMR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RMR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "RMR_EL3";
  read_from := (\ s .  s.RMR_EL3);
  write_to := (\ v s .  (( s with<| RMR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RMUID_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "RMUID_EL0";
  read_from := (\ s .  s.RMUID_EL0);
  write_to := (\ v s .  (( s with<| RMUID_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RNDR_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RNDR";
  read_from := (\ s .  s.RNDR);
  write_to := (\ v s .  (( s with<| RNDR := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((RNDRRS_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RNDRRS";
  read_from := (\ s .  s.RNDRRS);
  write_to := (\ v s .  (( s with<| RNDRRS := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((RVBAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "RVBAR";
  read_from := (\ s .  s.RVBAR);
  write_to := (\ v s .  (( s with<| RVBAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((RVBAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RVBAR_EL1";
  read_from := (\ s .  s.RVBAR_EL1);
  write_to := (\ v s .  (( s with<| RVBAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((RVBAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RVBAR_EL2";
  read_from := (\ s .  s.RVBAR_EL2);
  write_to := (\ v s .  (( s with<| RVBAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((RVBAR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "RVBAR_EL3";
  read_from := (\ s .  s.RVBAR_EL3);
  write_to := (\ v s .  (( s with<| RVBAR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCXTNUM_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCXTNUM_EL0";
  read_from := (\ s .  s.SCXTNUM_EL0);
  write_to := (\ v s .  (( s with<| SCXTNUM_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCXTNUM_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCXTNUM_EL1";
  read_from := (\ s .  s.SCXTNUM_EL1);
  write_to := (\ v s .  (( s with<| SCXTNUM_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCXTNUM_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCXTNUM_EL2";
  read_from := (\ s .  s.SCXTNUM_EL2);
  write_to := (\ v s .  (( s with<| SCXTNUM_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCXTNUM_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCXTNUM_EL3";
  read_from := (\ s .  s.SCXTNUM_EL3);
  write_to := (\ v s .  (( s with<| SCXTNUM_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SDER32_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SDER32_EL2";
  read_from := (\ s .  s.SDER32_EL2);
  write_to := (\ v s .  (( s with<| SDER32_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL0";
  read_from := (\ s .  s.SPSR_EL0);
  write_to := (\ v s .  (( s with<| SPSR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL0";
  read_from := (\ s .  s.SP_EL0);
  write_to := (\ v s .  (( s with<| SP_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL1";
  read_from := (\ s .  s.SP_EL1);
  write_to := (\ v s .  (( s with<| SP_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL2";
  read_from := (\ s .  s.SP_EL2);
  write_to := (\ v s .  (( s with<| SP_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SP_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SP_EL3";
  read_from := (\ s .  s.SP_EL3);
  write_to := (\ v s .  (( s with<| SP_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ShouldAdvanceIT_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "ShouldAdvanceIT";
  read_from := (\ s .  s.ShouldAdvanceIT);
  write_to := (\ v s .  (( s with<| ShouldAdvanceIT := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((TLBTR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TLBTR";
  read_from := (\ s .  s.TLBTR);
  write_to := (\ v s .  (( s with<| TLBTR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TPIDRRO_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TPIDRRO_EL0";
  read_from := (\ s .  s.TPIDRRO_EL0);
  write_to := (\ v s .  (( s with<| TPIDRRO_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TPIDR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TPIDR_EL0";
  read_from := (\ s .  s.TPIDR_EL0);
  write_to := (\ v s .  (( s with<| TPIDR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TPIDR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TPIDR_EL1";
  read_from := (\ s .  s.TPIDR_EL1);
  write_to := (\ v s .  (( s with<| TPIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TPIDR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TPIDR_EL2";
  read_from := (\ s .  s.TPIDR_EL2);
  write_to := (\ v s .  (( s with<| TPIDR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TPIDR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TPIDR_EL3";
  read_from := (\ s .  s.TPIDR_EL3);
  write_to := (\ v s .  (( s with<| TPIDR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TRFCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TRFCR_EL1";
  read_from := (\ s .  s.TRFCR_EL1);
  write_to := (\ v s .  (( s with<| TRFCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TRFCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TRFCR_EL2";
  read_from := (\ s .  s.TRFCR_EL2);
  write_to := (\ v s .  (( s with<| TRFCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL0";
  read_from := (\ s .  s.VBAR_EL0);
  write_to := (\ v s .  (( s with<| VBAR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VDISR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VDISR_EL2";
  read_from := (\ s .  s.VDISR_EL2);
  write_to := (\ v s .  (( s with<| VDISR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VMPIDR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VMPIDR_EL2";
  read_from := (\ s .  s.VMPIDR_EL2);
  write_to := (\ v s .  (( s with<| VMPIDR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VNCR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VNCR_EL2";
  read_from := (\ s .  s.VNCR_EL2);
  write_to := (\ v s .  (( s with<| VNCR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VPIDR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VPIDR_EL2";
  read_from := (\ s .  s.VPIDR_EL2);
  write_to := (\ v s .  (( s with<| VPIDR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((V_ref:((regstate),(register_value),(((128)words$word)list))register_ref)=  (<|
  name := "_V";
  read_from := (\ s .  s.V);
  write_to := (\ v s .  (( s with<| V := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_128_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_128_dec_bit v)(( 32 : int)) F v) |>))`;


val _ = Define `
 ((currentCond_ref:((regstate),(register_value),((4)words$word))register_ref)=  (<|
  name := "__currentCond";
  read_from := (\ s .  s.currentCond);
  write_to := (\ v s .  (( s with<| currentCond := v |>)));
  of_regval := (\ v .  vector_4_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_4_dec_bit v) |>))`;


val _ = Define `
 ((exclusive_block_address_ref:((regstate),(register_value),((52)words$word))register_ref)=  (<|
  name := "__exclusive_block_address";
  read_from := (\ s .  s.exclusive_block_address);
  write_to := (\ v s .  (( s with<| exclusive_block_address := v |>)));
  of_regval := (\ v .  vector_52_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_52_dec_bit v) |>))`;


val _ = Define `
 ((saved_exception_level_ref:((regstate),(register_value),((2)words$word))register_ref)=  (<|
  name := "__saved_exception_level";
  read_from := (\ s .  s.saved_exception_level);
  write_to := (\ v s .  (( s with<| saved_exception_level := v |>)));
  of_regval := (\ v .  vector_2_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_2_dec_bit v) |>))`;


val _ = Define `
 ((unconditional_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__unconditional";
  read_from := (\ s .  s.unconditional);
  write_to := (\ v s .  (( s with<| unconditional := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((CONTEXTIDR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CONTEXTIDR_S";
  read_from := (\ s .  s.CONTEXTIDR_S);
  write_to := (\ v s .  (( s with<| CONTEXTIDR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((GTEExtObsAccess_ref:((regstate),(register_value),(((16)words$word)list))register_ref)=  (<|
  name := "_GTEExtObsAccess";
  read_from := (\ s .  s.GTEExtObsAccess);
  write_to := (\ v s .  (( s with<| GTEExtObsAccess := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_16_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_16_dec_bit v)(( 256 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsAddress_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTEExtObsAddress";
  read_from := (\ s .  s.GTEExtObsAddress);
  write_to := (\ v s .  (( s with<| GTEExtObsAddress := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 256 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsData_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTEExtObsData";
  read_from := (\ s .  s.GTEExtObsData);
  write_to := (\ v s .  (( s with<| GTEExtObsData := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 256 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsResult_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTEExtObsResult";
  read_from := (\ s .  s.GTEExtObsResult);
  write_to := (\ v s .  (( s with<| GTEExtObsResult := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 256 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsActive_ref:((regstate),(register_value),((bool)list))register_ref)=  (<|
  name := "_GTEExtObsActive";
  read_from := (\ s .  s.GTEExtObsActive);
  write_to := (\ v s .  (( s with<| GTEExtObsActive := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  bool_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_bool v)(( 4 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsCount_ref:((regstate),(register_value),((ii)list))register_ref)=  (<|
  name := "_GTEExtObsCount";
  read_from := (\ s .  s.GTEExtObsCount);
  write_to := (\ v s .  (( s with<| GTEExtObsCount := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  int_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_int v)(( 4 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsIndex_ref:((regstate),(register_value),((ii)list))register_ref)=  (<|
  name := "_GTEExtObsIndex";
  read_from := (\ s .  s.GTEExtObsIndex);
  write_to := (\ v s .  (( s with<| GTEExtObsIndex := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  int_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_int v)(( 4 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsResultIndex_ref:((regstate),(register_value),((ii)list))register_ref)=  (<|
  name := "_GTEExtObsResultIndex";
  read_from := (\ s .  s.GTEExtObsResultIndex);
  write_to := (\ v s .  (( s with<| GTEExtObsResultIndex := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  int_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_int v)(( 4 : int)) F v) |>))`;


val _ = Define `
 ((GTEExtObsResultIsAddress_ref:((regstate),(register_value),((bool)list))register_ref)=  (<|
  name := "_GTEExtObsResultIsAddress";
  read_from := (\ s .  s.GTEExtObsResultIsAddress);
  write_to := (\ v s .  (( s with<| GTEExtObsResultIsAddress := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  bool_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_bool v)(( 4 : int)) F v) |>))`;


val _ = Define `
 ((GTEListParam0_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTEListParam0";
  read_from := (\ s .  s.GTEListParam0);
  write_to := (\ v s .  (( s with<| GTEListParam0 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 64 : int)) F v) |>))`;


val _ = Define `
 ((GTEListParam1_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTEListParam1";
  read_from := (\ s .  s.GTEListParam1);
  write_to := (\ v s .  (( s with<| GTEListParam1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 64 : int)) F v) |>))`;


val _ = Define `
 ((GTEParam_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTEParam";
  read_from := (\ s .  s.GTEParam);
  write_to := (\ v s .  (( s with<| GTEParam := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 8 : int)) F v) |>))`;


val _ = Define `
 ((GTE_AS_RecordedAccess_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "_GTE_AS_RecordedAccess";
  read_from := (\ s .  s.GTE_AS_RecordedAccess);
  write_to := (\ v s .  (( s with<| GTE_AS_RecordedAccess := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 8 : int)) F v) |>))`;


val _ = Define `
 ((GTE_AS_RecordedAddress_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTE_AS_RecordedAddress";
  read_from := (\ s .  s.GTE_AS_RecordedAddress);
  write_to := (\ v s .  (( s with<| GTE_AS_RecordedAddress := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 8 : int)) F v) |>))`;


val _ = Define `
 ((GTE_AS_RecordedData_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTE_AS_RecordedData";
  read_from := (\ s .  s.GTE_AS_RecordedData);
  write_to := (\ v s .  (( s with<| GTE_AS_RecordedData := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 8 : int)) F v) |>))`;


val _ = Define `
 ((GTE_PPU_Access_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "_GTE_PPU_Access";
  read_from := (\ s .  s.GTE_PPU_Access);
  write_to := (\ v s .  (( s with<| GTE_PPU_Access := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 6 : int)) F v) |>))`;


val _ = Define `
 ((GTE_PPU_Address_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_GTE_PPU_Address";
  read_from := (\ s .  s.GTE_PPU_Address);
  write_to := (\ v s .  (( s with<| GTE_PPU_Address := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 6 : int)) F v) |>))`;


val _ = Define `
 ((GTE_PPU_SizeEn_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "_GTE_PPU_SizeEn";
  read_from := (\ s .  s.GTE_PPU_SizeEn);
  write_to := (\ v s .  (( s with<| GTE_PPU_SizeEn := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 6 : int)) F v) |>))`;


val _ = Define `
 ((AbortRgn64Hi1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Hi1";
  read_from := (\ s .  s.AbortRgn64Hi1);
  write_to := (\ v s .  (( s with<| AbortRgn64Hi1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Hi1_Hi_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Hi1_Hi";
  read_from := (\ s .  s.AbortRgn64Hi1_Hi);
  write_to := (\ v s .  (( s with<| AbortRgn64Hi1_Hi := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Hi2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Hi2";
  read_from := (\ s .  s.AbortRgn64Hi2);
  write_to := (\ v s .  (( s with<| AbortRgn64Hi2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Hi2_Hi_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Hi2_Hi";
  read_from := (\ s .  s.AbortRgn64Hi2_Hi);
  write_to := (\ v s .  (( s with<| AbortRgn64Hi2_Hi := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Lo1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Lo1";
  read_from := (\ s .  s.AbortRgn64Lo1);
  write_to := (\ v s .  (( s with<| AbortRgn64Lo1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Lo1_Hi_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Lo1_Hi";
  read_from := (\ s .  s.AbortRgn64Lo1_Hi);
  write_to := (\ v s .  (( s with<| AbortRgn64Lo1_Hi := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Lo2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Lo2";
  read_from := (\ s .  s.AbortRgn64Lo2);
  write_to := (\ v s .  (( s with<| AbortRgn64Lo2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((AbortRgn64Lo2_Hi_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "AbortRgn64Lo2_Hi";
  read_from := (\ s .  s.AbortRgn64Lo2_Hi);
  write_to := (\ v s .  (( s with<| AbortRgn64Lo2_Hi := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTCR";
  read_from := (\ s .  s.CNTCR);
  write_to := (\ v s .  (( s with<| CNTCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTCV_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "CNTCV";
  read_from := (\ s .  s.CNTCV);
  write_to := (\ v s .  (( s with<| CNTCV := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((CNTFID0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTFID0";
  read_from := (\ s .  s.CNTFID0);
  write_to := (\ v s .  (( s with<| CNTFID0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTSR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CNTSR";
  read_from := (\ s .  s.CNTSR);
  write_to := (\ v s .  (( s with<| CNTSR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CONTEXTIDR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CONTEXTIDR_EL1";
  read_from := (\ s .  s.CONTEXTIDR_EL1);
  write_to := (\ v s .  (( s with<| CONTEXTIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CONTEXTIDR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "CONTEXTIDR_EL2";
  read_from := (\ s .  s.CONTEXTIDR_EL2);
  write_to := (\ v s .  (( s with<| CONTEXTIDR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DACR32_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DACR32_EL2";
  read_from := (\ s .  s.DACR32_EL2);
  write_to := (\ v s .  (( s with<| DACR32_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DACR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DACR_S";
  read_from := (\ s .  s.DACR_S);
  write_to := (\ v s .  (( s with<| DACR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGBCR_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGBCR";
  read_from := (\ s .  s.DBGBCR);
  write_to := (\ v s .  (( s with<| DBGBCR := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGBCR_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGBCR_EL1";
  read_from := (\ s .  s.DBGBCR_EL1);
  write_to := (\ v s .  (( s with<| DBGBCR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGBVR_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGBVR";
  read_from := (\ s .  s.DBGBVR);
  write_to := (\ v s .  (( s with<| DBGBVR := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGBVR_EL1_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "DBGBVR_EL1";
  read_from := (\ s .  s.DBGBVR_EL1);
  write_to := (\ v s .  (( s with<| DBGBVR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGBXVR_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGBXVR";
  read_from := (\ s .  s.DBGBXVR);
  write_to := (\ v s .  (( s with<| DBGBXVR := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGDIDR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGDIDR";
  read_from := (\ s .  s.DBGDIDR);
  write_to := (\ v s .  (( s with<| DBGDIDR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGEN_ref:((regstate),(register_value),(signal))register_ref)=  (<|
  name := "DBGEN";
  read_from := (\ s .  s.DBGEN);
  write_to := (\ v s .  (( s with<| DBGEN := v |>)));
  of_regval := (\ v .  signal_of_regval v);
  regval_of := (\ v .  regval_of_signal v) |>))`;


val _ = Define `
 ((DBGPRCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGPRCR_EL1";
  read_from := (\ s .  s.DBGPRCR_EL1);
  write_to := (\ v s .  (( s with<| DBGPRCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGVCR32_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DBGVCR32_EL2";
  read_from := (\ s .  s.DBGVCR32_EL2);
  write_to := (\ v s .  (( s with<| DBGVCR32_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DBGWCR_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGWCR";
  read_from := (\ s .  s.DBGWCR);
  write_to := (\ v s .  (( s with<| DBGWCR := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGWCR_EL1_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGWCR_EL1";
  read_from := (\ s .  s.DBGWCR_EL1);
  write_to := (\ v s .  (( s with<| DBGWCR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGWVR_ref:((regstate),(register_value),(((32)words$word)list))register_ref)=  (<|
  name := "DBGWVR";
  read_from := (\ s .  s.DBGWVR);
  write_to := (\ v s .  (( s with<| DBGWVR := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_32_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_32_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DBGWVR_EL1_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "DBGWVR_EL1";
  read_from := (\ s .  s.DBGWVR_EL1);
  write_to := (\ v s .  (( s with<| DBGWVR_EL1 := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 17 : int)) F v) |>))`;


val _ = Define `
 ((DLR_EL0_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "DLR_EL0";
  read_from := (\ s .  s.DLR_EL0);
  write_to := (\ v s .  (( s with<| DLR_EL0 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((DSPSR_EL0_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DSPSR_EL0";
  read_from := (\ s .  s.DSPSR_EL0);
  write_to := (\ v s .  (( s with<| DSPSR_EL0 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((EDSCR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "EDSCR";
  read_from := (\ s .  s.EDSCR);
  write_to := (\ v s .  (( s with<| EDSCR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((DFSR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "DFSR_S";
  read_from := (\ s .  s.DFSR_S);
  write_to := (\ v s .  (( s with<| DFSR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL3";
  read_from := (\ s .  s.ELR_EL3);
  write_to := (\ v s .  (( s with<| ELR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL1";
  read_from := (\ s .  s.ELR_EL1);
  write_to := (\ v s .  (( s with<| ELR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL3";
  read_from := (\ s .  s.ESR_EL3);
  write_to := (\ v s .  (( s with<| ESR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL1";
  read_from := (\ s .  s.ESR_EL1);
  write_to := (\ v s .  (( s with<| ESR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ELR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ELR_EL2";
  read_from := (\ s .  s.ELR_EL2);
  write_to := (\ v s .  (( s with<| ELR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TCR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TCR_EL2";
  read_from := (\ s .  s.TCR_EL2);
  write_to := (\ v s .  (( s with<| TCR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ESR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "ESR_EL2";
  read_from := (\ s .  s.ESR_EL2);
  write_to := (\ v s .  (( s with<| ESR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL1";
  read_from := (\ s .  s.FAR_EL1);
  write_to := (\ v s .  (( s with<| FAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL2";
  read_from := (\ s .  s.FAR_EL2);
  write_to := (\ v s .  (( s with<| FAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((FAR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "FAR_EL3";
  read_from := (\ s .  s.FAR_EL3);
  write_to := (\ v s .  (( s with<| FAR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((HCR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "HCR_EL2";
  read_from := (\ s .  s.HCR_EL2);
  write_to := (\ v s .  (( s with<| HCR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((HPFAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "HPFAR_EL2";
  read_from := (\ s .  s.HPFAR_EL2);
  write_to := (\ v s .  (( s with<| HPFAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((ID_AA64DFR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "ID_AA64DFR0_EL1";
  read_from := (\ s .  s.ID_AA64DFR0_EL1);
  write_to := (\ v s .  (( s with<| ID_AA64DFR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((IFSR32_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "IFSR32_EL2";
  read_from := (\ s .  s.IFSR32_EL2);
  write_to := (\ v s .  (( s with<| IFSR32_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((IFSR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "IFSR_S";
  read_from := (\ s .  s.IFSR_S);
  write_to := (\ v s .  (( s with<| IFSR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((InGuardedPage_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "InGuardedPage";
  read_from := (\ s .  s.InGuardedPage);
  write_to := (\ v s .  (( s with<| InGuardedPage := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((LR_mon_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "LR_mon";
  read_from := (\ s .  s.LR_mon);
  write_to := (\ v s .  (( s with<| LR_mon := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MAIR0_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MAIR0_S";
  read_from := (\ s .  s.MAIR0_S);
  write_to := (\ v s .  (( s with<| MAIR0_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MAIR1_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MAIR1_S";
  read_from := (\ s .  s.MAIR1_S);
  write_to := (\ v s .  (( s with<| MAIR1_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MAIR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MAIR_EL1";
  read_from := (\ s .  s.MAIR_EL1);
  write_to := (\ v s .  (( s with<| MAIR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MAIR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MAIR_EL2";
  read_from := (\ s .  s.MAIR_EL2);
  write_to := (\ v s .  (( s with<| MAIR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MAIR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MAIR_EL3";
  read_from := (\ s .  s.MAIR_EL3);
  write_to := (\ v s .  (( s with<| MAIR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MDCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDCR_EL2";
  read_from := (\ s .  s.MDCR_EL2);
  write_to := (\ v s .  (( s with<| MDCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MDCR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDCR_EL3";
  read_from := (\ s .  s.MDCR_EL3);
  write_to := (\ v s .  (( s with<| MDCR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MDSCR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MDSCR_EL1";
  read_from := (\ s .  s.MDSCR_EL1);
  write_to := (\ v s .  (( s with<| MDSCR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MPAM0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAM0_EL1";
  read_from := (\ s .  s.MPAM0_EL1);
  write_to := (\ v s .  (( s with<| MPAM0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAM1_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAM1_EL1";
  read_from := (\ s .  s.MPAM1_EL1);
  write_to := (\ v s .  (( s with<| MPAM1_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAM2_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAM2_EL2";
  read_from := (\ s .  s.MPAM2_EL2);
  write_to := (\ v s .  (( s with<| MPAM2_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAM3_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAM3_EL3";
  read_from := (\ s .  s.MPAM3_EL3);
  write_to := (\ v s .  (( s with<| MPAM3_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMHCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MPAMHCR_EL2";
  read_from := (\ s .  s.MPAMHCR_EL2);
  write_to := (\ v s .  (( s with<| MPAMHCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MPAMIDR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMIDR_EL1";
  read_from := (\ s .  s.MPAMIDR_EL1);
  write_to := (\ v s .  (( s with<| MPAMIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM0_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM0_EL2";
  read_from := (\ s .  s.MPAMVPM0_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM0_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM1_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM1_EL2";
  read_from := (\ s .  s.MPAMVPM1_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM1_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM2_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM2_EL2";
  read_from := (\ s .  s.MPAMVPM2_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM2_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM3_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM3_EL2";
  read_from := (\ s .  s.MPAMVPM3_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM3_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM4_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM4_EL2";
  read_from := (\ s .  s.MPAMVPM4_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM4_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM5_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM5_EL2";
  read_from := (\ s .  s.MPAMVPM5_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM5_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM6_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM6_EL2";
  read_from := (\ s .  s.MPAMVPM6_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM6_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPM7_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPAMVPM7_EL2";
  read_from := (\ s .  s.MPAMVPM7_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPM7_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MPAMVPMV_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MPAMVPMV_EL2";
  read_from := (\ s .  s.MPAMVPMV_EL2);
  write_to := (\ v s .  (( s with<| MPAMVPMV_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((MPIDR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "MPIDR_EL1";
  read_from := (\ s .  s.MPIDR_EL1);
  write_to := (\ v s .  (( s with<| MPIDR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((MVBAR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "MVBAR";
  read_from := (\ s .  s.MVBAR);
  write_to := (\ v s .  (( s with<| MVBAR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((NMRR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "NMRR_S";
  read_from := (\ s .  s.NMRR_S);
  write_to := (\ v s .  (( s with<| NMRR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSDLR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSDLR_EL1";
  read_from := (\ s .  s.OSDLR_EL1);
  write_to := (\ v s .  (( s with<| OSDLR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((OSLSR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "OSLSR_EL1";
  read_from := (\ s .  s.OSLSR_EL1);
  write_to := (\ v s .  (( s with<| OSLSR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PRRR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "PRRR_S";
  read_from := (\ s .  s.PRRR_S);
  write_to := (\ v s .  (( s with<| PRRR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PSTATE_ref:((regstate),(register_value),(ProcState))register_ref)=  (<|
  name := "PSTATE";
  read_from := (\ s .  s.PSTATE);
  write_to := (\ v s .  (( s with<| PSTATE := v |>)));
  of_regval := (\ v .  ProcState_of_regval v);
  regval_of := (\ v .  regval_of_ProcState v) |>))`;


val _ = Define `
 ((SCR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCR_EL3";
  read_from := (\ s .  s.SCR_EL3);
  write_to := (\ v s .  (( s with<| SCR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCTLR_EL1";
  read_from := (\ s .  s.SCTLR_EL1);
  write_to := (\ v s .  (( s with<| SCTLR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCTLR_EL2";
  read_from := (\ s .  s.SCTLR_EL2);
  write_to := (\ v s .  (( s with<| SCTLR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "SCTLR_EL3";
  read_from := (\ s .  s.SCTLR_EL3);
  write_to := (\ v s .  (( s with<| SCTLR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((SCTLR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SCTLR_S";
  read_from := (\ s .  s.SCTLR_S);
  write_to := (\ v s .  (( s with<| SCTLR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SDER32_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SDER32_EL3";
  read_from := (\ s .  s.SDER32_EL3);
  write_to := (\ v s .  (( s with<| SDER32_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPIDEN_ref:((regstate),(register_value),(signal))register_ref)=  (<|
  name := "SPIDEN";
  read_from := (\ s .  s.SPIDEN);
  write_to := (\ v s .  (( s with<| SPIDEN := v |>)));
  of_regval := (\ v .  signal_of_regval v);
  regval_of := (\ v .  regval_of_signal v) |>))`;


val _ = Define `
 ((SPSR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL1";
  read_from := (\ s .  s.SPSR_EL1);
  write_to := (\ v s .  (( s with<| SPSR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL2";
  read_from := (\ s .  s.SPSR_EL2);
  write_to := (\ v s .  (( s with<| SPSR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_EL3";
  read_from := (\ s .  s.SPSR_EL3);
  write_to := (\ v s .  (( s with<| SPSR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_abt_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_abt";
  read_from := (\ s .  s.SPSR_abt);
  write_to := (\ v s .  (( s with<| SPSR_abt := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_fiq_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_fiq";
  read_from := (\ s .  s.SPSR_fiq);
  write_to := (\ v s .  (( s with<| SPSR_fiq := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_irq_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_irq";
  read_from := (\ s .  s.SPSR_irq);
  write_to := (\ v s .  (( s with<| SPSR_irq := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SPSR_und_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SPSR_und";
  read_from := (\ s .  s.SPSR_und);
  write_to := (\ v s .  (( s with<| SPSR_und := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((SP_mon_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "SP_mon";
  read_from := (\ s .  s.SP_mon);
  write_to := (\ v s .  (( s with<| SP_mon := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ScheduledFIQ_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "ScheduledFIQ";
  read_from := (\ s .  s.ScheduledFIQ);
  write_to := (\ v s .  (( s with<| ScheduledFIQ := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((ScheduledIRQ_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "ScheduledIRQ";
  read_from := (\ s .  s.ScheduledIRQ);
  write_to := (\ v s .  (( s with<| ScheduledIRQ := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((TCR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TCR_EL1";
  read_from := (\ s .  s.TCR_EL1);
  write_to := (\ v s .  (( s with<| TCR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TCR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TCR_EL3";
  read_from := (\ s .  s.TCR_EL3);
  write_to := (\ v s .  (( s with<| TCR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TFSRE0_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TFSRE0_EL1";
  read_from := (\ s .  s.TFSRE0_EL1);
  write_to := (\ v s .  (( s with<| TFSRE0_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TFSR_EL1_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TFSR_EL1";
  read_from := (\ s .  s.TFSR_EL1);
  write_to := (\ v s .  (( s with<| TFSR_EL1 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TFSR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TFSR_EL2";
  read_from := (\ s .  s.TFSR_EL2);
  write_to := (\ v s .  (( s with<| TFSR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TFSR_EL3_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TFSR_EL3";
  read_from := (\ s .  s.TFSR_EL3);
  write_to := (\ v s .  (( s with<| TFSR_EL3 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TLBHits_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "TLBHits";
  read_from := (\ s .  s.TLBHits);
  write_to := (\ v s .  (( s with<| TLBHits := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((TLBMisses_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "TLBMisses";
  read_from := (\ s .  s.TLBMisses);
  write_to := (\ v s .  (( s with<| TLBMisses := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((TTBCR2_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TTBCR2_S";
  read_from := (\ s .  s.TTBCR2_S);
  write_to := (\ v s .  (( s with<| TTBCR2_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TTBCR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "TTBCR_S";
  read_from := (\ s .  s.TTBCR_S);
  write_to := (\ v s .  (( s with<| TTBCR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_EL1";
  read_from := (\ s .  s.TTBR0_EL1);
  write_to := (\ v s .  (( s with<| TTBR0_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_EL2";
  read_from := (\ s .  s.TTBR0_EL2);
  write_to := (\ v s .  (( s with<| TTBR0_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_EL3";
  read_from := (\ s .  s.TTBR0_EL3);
  write_to := (\ v s .  (( s with<| TTBR0_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR0_S_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR0_S";
  read_from := (\ s .  s.TTBR0_S);
  write_to := (\ v s .  (( s with<| TTBR0_S := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR1_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR1_EL1";
  read_from := (\ s .  s.TTBR1_EL1);
  write_to := (\ v s .  (( s with<| TTBR1_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR1_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR1_EL2";
  read_from := (\ s .  s.TTBR1_EL2);
  write_to := (\ v s .  (( s with<| TTBR1_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((TTBR1_S_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "TTBR1_S";
  read_from := (\ s .  s.TTBR1_S);
  write_to := (\ v s .  (( s with<| TTBR1_S := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL1_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL1";
  read_from := (\ s .  s.VBAR_EL1);
  write_to := (\ v s .  (( s with<| VBAR_EL1 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL2";
  read_from := (\ s .  s.VBAR_EL2);
  write_to := (\ v s .  (( s with<| VBAR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_EL3_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VBAR_EL3";
  read_from := (\ s .  s.VBAR_EL3);
  write_to := (\ v s .  (( s with<| VBAR_EL3 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VBAR_S_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VBAR_S";
  read_from := (\ s .  s.VBAR_S);
  write_to := (\ v s .  (( s with<| VBAR_S := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VSESR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VSESR_EL2";
  read_from := (\ s .  s.VSESR_EL2);
  write_to := (\ v s .  (( s with<| VSESR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VSTCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VSTCR_EL2";
  read_from := (\ s .  s.VSTCR_EL2);
  write_to := (\ v s .  (( s with<| VSTCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VSTTBR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VSTTBR_EL2";
  read_from := (\ s .  s.VSTTBR_EL2);
  write_to := (\ v s .  (( s with<| VSTTBR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((VTCR_EL2_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "VTCR_EL2";
  read_from := (\ s .  s.VTCR_EL2);
  write_to := (\ v s .  (( s with<| VTCR_EL2 := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((VTTBR_EL2_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "VTTBR_EL2";
  read_from := (\ s .  s.VTTBR_EL2);
  write_to := (\ v s .  (( s with<| VTTBR_EL2 := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((AXIAbortCtl_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_AXIAbortCtl";
  read_from := (\ s .  s.AXIAbortCtl);
  write_to := (\ v s .  (( s with<| AXIAbortCtl := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ClearFIQ_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_ClearFIQ";
  read_from := (\ s .  s.ClearFIQ);
  write_to := (\ v s .  (( s with<| ClearFIQ := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ClearIRQ_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_ClearIRQ";
  read_from := (\ s .  s.ClearIRQ);
  write_to := (\ v s .  (( s with<| ClearIRQ := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((FIQPending_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "_FIQPending";
  read_from := (\ s .  s.FIQPending);
  write_to := (\ v s .  (( s with<| FIQPending := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((GTEActive_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "_GTEActive";
  read_from := (\ s .  s.GTEActive);
  write_to := (\ v s .  (( s with<| GTEActive := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((GTECurrentAPI_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_GTECurrentAPI";
  read_from := (\ s .  s.GTECurrentAPI);
  write_to := (\ v s .  (( s with<| GTECurrentAPI := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((GTEHaveParamLo_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "_GTEHaveParamLo";
  read_from := (\ s .  s.GTEHaveParamLo);
  write_to := (\ v s .  (( s with<| GTEHaveParamLo := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((GTEListParam_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "_GTEListParam";
  read_from := (\ s .  s.GTEListParam);
  write_to := (\ v s .  (( s with<| GTEListParam := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((GTEListParamIndex_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "_GTEListParamIndex";
  read_from := (\ s .  s.GTEListParamIndex);
  write_to := (\ v s .  (( s with<| GTEListParamIndex := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((GTEListParamTerminator_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_GTEListParamTerminator";
  read_from := (\ s .  s.GTEListParamTerminator);
  write_to := (\ v s .  (( s with<| GTEListParamTerminator := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((GTEListParamTerminatorCount_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "_GTEListParamTerminatorCount";
  read_from := (\ s .  s.GTEListParamTerminatorCount);
  write_to := (\ v s .  (( s with<| GTEListParamTerminatorCount := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((GTEListParamTerminators_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "_GTEListParamTerminators";
  read_from := (\ s .  s.GTEListParamTerminators);
  write_to := (\ v s .  (( s with<| GTEListParamTerminators := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((GTEParamCount_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "_GTEParamCount";
  read_from := (\ s .  s.GTEParamCount);
  write_to := (\ v s .  (( s with<| GTEParamCount := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((GTEParamLo_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_GTEParamLo";
  read_from := (\ s .  s.GTEParamLo);
  write_to := (\ v s .  (( s with<| GTEParamLo := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((GTEParamType_ref:((regstate),(register_value),(GTEParamType))register_ref)=  (<|
  name := "_GTEParamType";
  read_from := (\ s .  s.GTEParamType);
  write_to := (\ v s .  (( s with<| GTEParamType := v |>)));
  of_regval := (\ v .  GTEParamType_of_regval v);
  regval_of := (\ v .  regval_of_GTEParamType v) |>))`;


val _ = Define `
 ((GTEParamsComplete_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "_GTEParamsComplete";
  read_from := (\ s .  s.GTEParamsComplete);
  write_to := (\ v s .  (( s with<| GTEParamsComplete := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((GTEStatus_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_GTEStatus";
  read_from := (\ s .  s.GTEStatus);
  write_to := (\ v s .  (( s with<| GTEStatus := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((GTE_AS_Access_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_GTE_AS_Access";
  read_from := (\ s .  s.GTE_AS_Access);
  write_to := (\ v s .  (( s with<| GTE_AS_Access := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((GTE_AS_AccessCount_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "_GTE_AS_AccessCount";
  read_from := (\ s .  s.GTE_AS_AccessCount);
  write_to := (\ v s .  (( s with<| GTE_AS_AccessCount := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((GTE_AS_Address_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_GTE_AS_Address";
  read_from := (\ s .  s.GTE_AS_Address);
  write_to := (\ v s .  (( s with<| GTE_AS_Address := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((GTE_AS_Size_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_GTE_AS_Size";
  read_from := (\ s .  s.GTE_AS_Size);
  write_to := (\ v s .  (( s with<| GTE_AS_Size := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((IRQPending_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "_IRQPending";
  read_from := (\ s .  s.IRQPending);
  write_to := (\ v s .  (( s with<| IRQPending := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((PC_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_PC";
  read_from := (\ s .  s.PC);
  write_to := (\ v s .  (( s with<| PC := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PPURACR_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_PPURACR";
  read_from := (\ s .  s.PPURACR);
  write_to := (\ v s .  (( s with<| PPURACR := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PPURBAR_ref:((regstate),(register_value),((64)words$word))register_ref)=  (<|
  name := "_PPURBAR";
  read_from := (\ s .  s.PPURBAR);
  write_to := (\ v s .  (( s with<| PPURBAR := v |>)));
  of_regval := (\ v .  vector_64_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_64_dec_bit v) |>))`;


val _ = Define `
 ((PPURSER_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_PPURSER";
  read_from := (\ s .  s.PPURSER);
  write_to := (\ v s .  (( s with<| PPURSER := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((PendingPhysicalSE_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "_PendingPhysicalSE";
  read_from := (\ s .  s.PendingPhysicalSE);
  write_to := (\ v s .  (( s with<| PendingPhysicalSE := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((R_ref:((regstate),(register_value),(((64)words$word)list))register_ref)=  (<|
  name := "_R";
  read_from := (\ s .  s.R);
  write_to := (\ v s .  (( s with<| R := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  vector_64_dec_bit_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_vector_64_dec_bit v)(( 31 : int)) F v) |>))`;


val _ = Define `
 ((ScheduleFIQ_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_ScheduleFIQ";
  read_from := (\ s .  s.ScheduleFIQ);
  write_to := (\ v s .  (( s with<| ScheduleFIQ := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((ScheduleIRQ_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_ScheduleIRQ";
  read_from := (\ s .  s.ScheduleIRQ);
  write_to := (\ v s .  (( s with<| ScheduleIRQ := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((TLB_ref:((regstate),(register_value),((TLBLine)list))register_ref)=  (<|
  name := "_TLB";
  read_from := (\ s .  s.TLB);
  write_to := (\ v s .  (( s with<| TLB := v |>)));
  of_regval := (\ v .  vector_of_regval (\ v .  TLBLine_of_regval v) v);
  regval_of := (\ v .  regval_of_vector (\ v .  regval_of_TLBLine v)(( 1024 : int)) F v) |>))`;


val _ = Define `
 ((TargetCPU_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "_TargetCPU";
  read_from := (\ s .  s.TargetCPU);
  write_to := (\ v s .  (( s with<| TargetCPU := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((CNTControlBase_ref:((regstate),(register_value),((52)words$word))register_ref)=  (<|
  name := "__CNTControlBase";
  read_from := (\ s .  s.CNTControlBase);
  write_to := (\ v s .  (( s with<| CNTControlBase := v |>)));
  of_regval := (\ v .  vector_52_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_52_dec_bit v) |>))`;


val _ = Define `
 ((LSISyndrome_ref:((regstate),(register_value),((11)words$word))register_ref)=  (<|
  name := "__LSISyndrome";
  read_from := (\ s .  s.LSISyndrome);
  write_to := (\ v s .  (( s with<| LSISyndrome := v |>)));
  of_regval := (\ v .  vector_11_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_11_dec_bit v) |>))`;


val _ = Define `
 ((PC_changed_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__PC_changed";
  read_from := (\ s .  s.PC_changed);
  write_to := (\ v s .  (( s with<| PC_changed := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


val _ = Define `
 ((currentInstr_ref:((regstate),(register_value),((32)words$word))register_ref)=  (<|
  name := "__currentInstr";
  read_from := (\ s .  s.currentInstr);
  write_to := (\ v s .  (( s with<| currentInstr := v |>)));
  of_regval := (\ v .  vector_32_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_32_dec_bit v) |>))`;


val _ = Define `
 ((currentInstrLength_ref:((regstate),(register_value),(int))register_ref)=  (<|
  name := "__currentInstrLength";
  read_from := (\ s .  s.currentInstrLength);
  write_to := (\ v s .  (( s with<| currentInstrLength := v |>)));
  of_regval := (\ v .  int_of_regval v);
  regval_of := (\ v .  regval_of_int v) |>))`;


val _ = Define `
 ((defaultRAM_ref:((regstate),(register_value),((56)words$word))register_ref)=  (<|
  name := "__defaultRAM";
  read_from := (\ s .  s.defaultRAM);
  write_to := (\ v s .  (( s with<| defaultRAM := v |>)));
  of_regval := (\ v .  vector_56_dec_bit_of_regval v);
  regval_of := (\ v .  regval_of_vector_56_dec_bit v) |>))`;


val _ = Define `
 ((highest_el_aarch32_ref:((regstate),(register_value),(bool))register_ref)=  (<|
  name := "__highest_el_aarch32";
  read_from := (\ s .  s.highest_el_aarch32);
  write_to := (\ v s .  (( s with<| highest_el_aarch32 := v |>)));
  of_regval := (\ v .  bool_of_regval v);
  regval_of := (\ v .  regval_of_bool v) |>))`;


(*val get_regval : string -> regstate -> maybe register_value*)
val _ = Define `
 ((get_regval:string -> regstate ->(register_value)option) reg_name s=
   (if reg_name = "CNTHCTL_EL2" then SOME (CNTHCTL_EL2_ref.regval_of (CNTHCTL_EL2_ref.read_from s)) else
  if reg_name = "CPTR_EL2" then SOME (CPTR_EL2_ref.regval_of (CPTR_EL2_ref.read_from s)) else
  if reg_name = "CCSIDR_EL1" then SOME (CCSIDR_EL1_ref.regval_of (CCSIDR_EL1_ref.read_from s)) else
  if reg_name = "ACTLR_EL1" then SOME (ACTLR_EL1_ref.regval_of (ACTLR_EL1_ref.read_from s)) else
  if reg_name = "ACTLR_EL2" then SOME (ACTLR_EL2_ref.regval_of (ACTLR_EL2_ref.read_from s)) else
  if reg_name = "ACTLR_EL3" then SOME (ACTLR_EL3_ref.regval_of (ACTLR_EL3_ref.read_from s)) else
  if reg_name = "AFSR0_EL1" then SOME (AFSR0_EL1_ref.regval_of (AFSR0_EL1_ref.read_from s)) else
  if reg_name = "AFSR0_EL2" then SOME (AFSR0_EL2_ref.regval_of (AFSR0_EL2_ref.read_from s)) else
  if reg_name = "AFSR0_EL3" then SOME (AFSR0_EL3_ref.regval_of (AFSR0_EL3_ref.read_from s)) else
  if reg_name = "AFSR1_EL1" then SOME (AFSR1_EL1_ref.regval_of (AFSR1_EL1_ref.read_from s)) else
  if reg_name = "AFSR1_EL2" then SOME (AFSR1_EL2_ref.regval_of (AFSR1_EL2_ref.read_from s)) else
  if reg_name = "AFSR1_EL3" then SOME (AFSR1_EL3_ref.regval_of (AFSR1_EL3_ref.read_from s)) else
  if reg_name = "AIDR_EL1" then SOME (AIDR_EL1_ref.regval_of (AIDR_EL1_ref.read_from s)) else
  if reg_name = "AMAIR_EL1" then SOME (AMAIR_EL1_ref.regval_of (AMAIR_EL1_ref.read_from s)) else
  if reg_name = "AMAIR_EL2" then SOME (AMAIR_EL2_ref.regval_of (AMAIR_EL2_ref.read_from s)) else
  if reg_name = "AMAIR_EL3" then SOME (AMAIR_EL3_ref.regval_of (AMAIR_EL3_ref.read_from s)) else
  if reg_name = "APDAKeyHi_EL1" then SOME (APDAKeyHi_EL1_ref.regval_of (APDAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APDAKeyLo_EL1" then SOME (APDAKeyLo_EL1_ref.regval_of (APDAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APDBKeyHi_EL1" then SOME (APDBKeyHi_EL1_ref.regval_of (APDBKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APDBKeyLo_EL1" then SOME (APDBKeyLo_EL1_ref.regval_of (APDBKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APGAKeyHi_EL1" then SOME (APGAKeyHi_EL1_ref.regval_of (APGAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APGAKeyLo_EL1" then SOME (APGAKeyLo_EL1_ref.regval_of (APGAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APIAKeyHi_EL1" then SOME (APIAKeyHi_EL1_ref.regval_of (APIAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APIAKeyLo_EL1" then SOME (APIAKeyLo_EL1_ref.regval_of (APIAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APIBKeyHi_EL1" then SOME (APIBKeyHi_EL1_ref.regval_of (APIBKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APIBKeyLo_EL1" then SOME (APIBKeyLo_EL1_ref.regval_of (APIBKeyLo_EL1_ref.read_from s)) else
  if reg_name = "BTypeCompatible" then SOME (BTypeCompatible_ref.regval_of (BTypeCompatible_ref.read_from s)) else
  if reg_name = "BTypeNext" then SOME (BTypeNext_ref.regval_of (BTypeNext_ref.read_from s)) else
  if reg_name = "CCSIDR2_EL1" then SOME (CCSIDR2_EL1_ref.regval_of (CCSIDR2_EL1_ref.read_from s)) else
  if reg_name = "CLIDR_EL1" then SOME (CLIDR_EL1_ref.regval_of (CLIDR_EL1_ref.read_from s)) else
  if reg_name = "CNTFRQ_EL0" then SOME (CNTFRQ_EL0_ref.regval_of (CNTFRQ_EL0_ref.read_from s)) else
  if reg_name = "CNTHPS_CTL_EL2" then SOME (CNTHPS_CTL_EL2_ref.regval_of (CNTHPS_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHPS_CVAL_EL2" then SOME (CNTHPS_CVAL_EL2_ref.regval_of (CNTHPS_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHPS_TVAL_EL2" then SOME (CNTHPS_TVAL_EL2_ref.regval_of (CNTHPS_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHP_CTL_EL2" then SOME (CNTHP_CTL_EL2_ref.regval_of (CNTHP_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHP_CVAL_EL2" then SOME (CNTHP_CVAL_EL2_ref.regval_of (CNTHP_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHP_TVAL_EL2" then SOME (CNTHP_TVAL_EL2_ref.regval_of (CNTHP_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHVS_CTL_EL2" then SOME (CNTHVS_CTL_EL2_ref.regval_of (CNTHVS_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHVS_CVAL_EL2" then SOME (CNTHVS_CVAL_EL2_ref.regval_of (CNTHVS_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHVS_TVAL_EL2" then SOME (CNTHVS_TVAL_EL2_ref.regval_of (CNTHVS_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHV_CTL_EL2" then SOME (CNTHV_CTL_EL2_ref.regval_of (CNTHV_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHV_CVAL_EL2" then SOME (CNTHV_CVAL_EL2_ref.regval_of (CNTHV_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHV_TVAL_EL2" then SOME (CNTHV_TVAL_EL2_ref.regval_of (CNTHV_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTKCTL_EL1" then SOME (CNTKCTL_EL1_ref.regval_of (CNTKCTL_EL1_ref.read_from s)) else
  if reg_name = "CNTPCT_EL0" then SOME (CNTPCT_EL0_ref.regval_of (CNTPCT_EL0_ref.read_from s)) else
  if reg_name = "CNTPS_CTL_EL1" then SOME (CNTPS_CTL_EL1_ref.regval_of (CNTPS_CTL_EL1_ref.read_from s)) else
  if reg_name = "CNTPS_CVAL_EL1" then SOME (CNTPS_CVAL_EL1_ref.regval_of (CNTPS_CVAL_EL1_ref.read_from s)) else
  if reg_name = "CNTPS_TVAL_EL1" then SOME (CNTPS_TVAL_EL1_ref.regval_of (CNTPS_TVAL_EL1_ref.read_from s)) else
  if reg_name = "CNTP_CTL_EL0" then SOME (CNTP_CTL_EL0_ref.regval_of (CNTP_CTL_EL0_ref.read_from s)) else
  if reg_name = "CNTP_CTL_S" then SOME (CNTP_CTL_S_ref.regval_of (CNTP_CTL_S_ref.read_from s)) else
  if reg_name = "CNTP_CVAL_EL0" then SOME (CNTP_CVAL_EL0_ref.regval_of (CNTP_CVAL_EL0_ref.read_from s)) else
  if reg_name = "CNTP_TVAL_EL0" then SOME (CNTP_TVAL_EL0_ref.regval_of (CNTP_TVAL_EL0_ref.read_from s)) else
  if reg_name = "CNTVCT_EL0" then SOME (CNTVCT_EL0_ref.regval_of (CNTVCT_EL0_ref.read_from s)) else
  if reg_name = "CNTVOFF_EL2" then SOME (CNTVOFF_EL2_ref.regval_of (CNTVOFF_EL2_ref.read_from s)) else
  if reg_name = "CNTV_CTL_EL0" then SOME (CNTV_CTL_EL0_ref.regval_of (CNTV_CTL_EL0_ref.read_from s)) else
  if reg_name = "CNTV_CVAL_EL0" then SOME (CNTV_CVAL_EL0_ref.regval_of (CNTV_CVAL_EL0_ref.read_from s)) else
  if reg_name = "CNTV_TVAL_EL0" then SOME (CNTV_TVAL_EL0_ref.regval_of (CNTV_TVAL_EL0_ref.read_from s)) else
  if reg_name = "CPACR_EL1" then SOME (CPACR_EL1_ref.regval_of (CPACR_EL1_ref.read_from s)) else
  if reg_name = "CPTR_EL3" then SOME (CPTR_EL3_ref.regval_of (CPTR_EL3_ref.read_from s)) else
  if reg_name = "CSSELR_EL1" then SOME (CSSELR_EL1_ref.regval_of (CSSELR_EL1_ref.read_from s)) else
  if reg_name = "CSSELR_S" then SOME (CSSELR_S_ref.regval_of (CSSELR_S_ref.read_from s)) else
  if reg_name = "CTR_EL0" then SOME (CTR_EL0_ref.regval_of (CTR_EL0_ref.read_from s)) else
  if reg_name = "DBGAUTHSTATUS_EL1" then SOME (DBGAUTHSTATUS_EL1_ref.regval_of (DBGAUTHSTATUS_EL1_ref.read_from s)) else
  if reg_name = "DBGCLAIMCLR_EL1" then SOME (DBGCLAIMCLR_EL1_ref.regval_of (DBGCLAIMCLR_EL1_ref.read_from s)) else
  if reg_name = "DBGCLAIMSET_EL1" then SOME (DBGCLAIMSET_EL1_ref.regval_of (DBGCLAIMSET_EL1_ref.read_from s)) else
  if reg_name = "DBGDEVID1" then SOME (DBGDEVID1_ref.regval_of (DBGDEVID1_ref.read_from s)) else
  if reg_name = "DBGDEVID2" then SOME (DBGDEVID2_ref.regval_of (DBGDEVID2_ref.read_from s)) else
  if reg_name = "DBGDSCRint" then SOME (DBGDSCRint_ref.regval_of (DBGDSCRint_ref.read_from s)) else
  if reg_name = "DBGDTRRX_EL0" then SOME (DBGDTRRX_EL0_ref.regval_of (DBGDTRRX_EL0_ref.read_from s)) else
  if reg_name = "DBGDTRTX_EL0" then SOME (DBGDTRTX_EL0_ref.regval_of (DBGDTRTX_EL0_ref.read_from s)) else
  if reg_name = "DBGDTR_EL0" then SOME (DBGDTR_EL0_ref.regval_of (DBGDTR_EL0_ref.read_from s)) else
  if reg_name = "DBGWFAR" then SOME (DBGWFAR_ref.regval_of (DBGWFAR_ref.read_from s)) else
  if reg_name = "DCZID_EL0" then SOME (DCZID_EL0_ref.regval_of (DCZID_EL0_ref.read_from s)) else
  if reg_name = "DISR_EL1" then SOME (DISR_EL1_ref.regval_of (DISR_EL1_ref.read_from s)) else
  if reg_name = "EDECCR" then SOME (EDECCR_ref.regval_of (EDECCR_ref.read_from s)) else
  if reg_name = "EDECR" then SOME (EDECR_ref.regval_of (EDECR_ref.read_from s)) else
  if reg_name = "EDESR" then SOME (EDESR_ref.regval_of (EDESR_ref.read_from s)) else
  if reg_name = "EDLSR" then SOME (EDLSR_ref.regval_of (EDLSR_ref.read_from s)) else
  if reg_name = "EDPCSR" then SOME (EDPCSR_ref.regval_of (EDPCSR_ref.read_from s)) else
  if reg_name = "EDPFR" then SOME (EDPFR_ref.regval_of (EDPFR_ref.read_from s)) else
  if reg_name = "EDPRCR" then SOME (EDPRCR_ref.regval_of (EDPRCR_ref.read_from s)) else
  if reg_name = "EDPRSR" then SOME (EDPRSR_ref.regval_of (EDPRSR_ref.read_from s)) else
  if reg_name = "EDVIDSR" then SOME (EDVIDSR_ref.regval_of (EDVIDSR_ref.read_from s)) else
  if reg_name = "ELR_EL0" then SOME (ELR_EL0_ref.regval_of (ELR_EL0_ref.read_from s)) else
  if reg_name = "ESP_EL0" then SOME (ESP_EL0_ref.regval_of (ESP_EL0_ref.read_from s)) else
  if reg_name = "ESR_EL0" then SOME (ESR_EL0_ref.regval_of (ESR_EL0_ref.read_from s)) else
  if reg_name = "EventRegister" then SOME (EventRegister_ref.regval_of (EventRegister_ref.read_from s)) else
  if reg_name = "FAR_EL0" then SOME (FAR_EL0_ref.regval_of (FAR_EL0_ref.read_from s)) else
  if reg_name = "FCSEIDR" then SOME (FCSEIDR_ref.regval_of (FCSEIDR_ref.read_from s)) else
  if reg_name = "FPCR" then SOME (FPCR_ref.regval_of (FPCR_ref.read_from s)) else
  if reg_name = "FPEXC32_EL2" then SOME (FPEXC32_EL2_ref.regval_of (FPEXC32_EL2_ref.read_from s)) else
  if reg_name = "FPSCR" then SOME (FPSCR_ref.regval_of (FPSCR_ref.read_from s)) else
  if reg_name = "FPSID" then SOME (FPSID_ref.regval_of (FPSID_ref.read_from s)) else
  if reg_name = "FPSR" then SOME (FPSR_ref.regval_of (FPSR_ref.read_from s)) else
  if reg_name = "GCR_EL1" then SOME (GCR_EL1_ref.regval_of (GCR_EL1_ref.read_from s)) else
  if reg_name = "HACR_EL2" then SOME (HACR_EL2_ref.regval_of (HACR_EL2_ref.read_from s)) else
  if reg_name = "HSTR_EL2" then SOME (HSTR_EL2_ref.regval_of (HSTR_EL2_ref.read_from s)) else
  if reg_name = "ICC_AP0R_EL1" then SOME (ICC_AP0R_EL1_ref.regval_of (ICC_AP0R_EL1_ref.read_from s)) else
  if reg_name = "ICC_AP1R_EL1" then SOME (ICC_AP1R_EL1_ref.regval_of (ICC_AP1R_EL1_ref.read_from s)) else
  if reg_name = "ICC_ASGI1R_EL1" then SOME (ICC_ASGI1R_EL1_ref.regval_of (ICC_ASGI1R_EL1_ref.read_from s)) else
  if reg_name = "ICC_BPR0_EL1" then SOME (ICC_BPR0_EL1_ref.regval_of (ICC_BPR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_BPR1_EL1_NS" then SOME (ICC_BPR1_EL1_NS_ref.regval_of (ICC_BPR1_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_BPR1_EL1_S" then SOME (ICC_BPR1_EL1_S_ref.regval_of (ICC_BPR1_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_CTLR_EL1_NS" then SOME (ICC_CTLR_EL1_NS_ref.regval_of (ICC_CTLR_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_CTLR_EL1_S" then SOME (ICC_CTLR_EL1_S_ref.regval_of (ICC_CTLR_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_CTLR_EL3" then SOME (ICC_CTLR_EL3_ref.regval_of (ICC_CTLR_EL3_ref.read_from s)) else
  if reg_name = "ICC_DIR_EL1" then SOME (ICC_DIR_EL1_ref.regval_of (ICC_DIR_EL1_ref.read_from s)) else
  if reg_name = "ICC_EOIR0_EL1" then SOME (ICC_EOIR0_EL1_ref.regval_of (ICC_EOIR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_EOIR1_EL1" then SOME (ICC_EOIR1_EL1_ref.regval_of (ICC_EOIR1_EL1_ref.read_from s)) else
  if reg_name = "ICC_HPPIR0_EL1" then SOME (ICC_HPPIR0_EL1_ref.regval_of (ICC_HPPIR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_HPPIR1_EL1" then SOME (ICC_HPPIR1_EL1_ref.regval_of (ICC_HPPIR1_EL1_ref.read_from s)) else
  if reg_name = "ICC_IAR0_EL1" then SOME (ICC_IAR0_EL1_ref.regval_of (ICC_IAR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_IAR1_EL1" then SOME (ICC_IAR1_EL1_ref.regval_of (ICC_IAR1_EL1_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN0_EL1" then SOME (ICC_IGRPEN0_EL1_ref.regval_of (ICC_IGRPEN0_EL1_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN1_EL1_NS" then SOME (ICC_IGRPEN1_EL1_NS_ref.regval_of (ICC_IGRPEN1_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN1_EL1_S" then SOME (ICC_IGRPEN1_EL1_S_ref.regval_of (ICC_IGRPEN1_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN1_EL3" then SOME (ICC_IGRPEN1_EL3_ref.regval_of (ICC_IGRPEN1_EL3_ref.read_from s)) else
  if reg_name = "ICC_PMR_EL1" then SOME (ICC_PMR_EL1_ref.regval_of (ICC_PMR_EL1_ref.read_from s)) else
  if reg_name = "ICC_RPR_EL1" then SOME (ICC_RPR_EL1_ref.regval_of (ICC_RPR_EL1_ref.read_from s)) else
  if reg_name = "ICC_SGI0R_EL1" then SOME (ICC_SGI0R_EL1_ref.regval_of (ICC_SGI0R_EL1_ref.read_from s)) else
  if reg_name = "ICC_SGI1R_EL1" then SOME (ICC_SGI1R_EL1_ref.regval_of (ICC_SGI1R_EL1_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL1_NS" then SOME (ICC_SRE_EL1_NS_ref.regval_of (ICC_SRE_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL1_S" then SOME (ICC_SRE_EL1_S_ref.regval_of (ICC_SRE_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL2" then SOME (ICC_SRE_EL2_ref.regval_of (ICC_SRE_EL2_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL3" then SOME (ICC_SRE_EL3_ref.regval_of (ICC_SRE_EL3_ref.read_from s)) else
  if reg_name = "ICH_AP0R_EL2" then SOME (ICH_AP0R_EL2_ref.regval_of (ICH_AP0R_EL2_ref.read_from s)) else
  if reg_name = "ICH_AP1R_EL2" then SOME (ICH_AP1R_EL2_ref.regval_of (ICH_AP1R_EL2_ref.read_from s)) else
  if reg_name = "ICH_EISR_EL2" then SOME (ICH_EISR_EL2_ref.regval_of (ICH_EISR_EL2_ref.read_from s)) else
  if reg_name = "ICH_ELRSR_EL2" then SOME (ICH_ELRSR_EL2_ref.regval_of (ICH_ELRSR_EL2_ref.read_from s)) else
  if reg_name = "ICH_HCR_EL2" then SOME (ICH_HCR_EL2_ref.regval_of (ICH_HCR_EL2_ref.read_from s)) else
  if reg_name = "ICH_MISR_EL2" then SOME (ICH_MISR_EL2_ref.regval_of (ICH_MISR_EL2_ref.read_from s)) else
  if reg_name = "ICH_VMCR_EL2" then SOME (ICH_VMCR_EL2_ref.regval_of (ICH_VMCR_EL2_ref.read_from s)) else
  if reg_name = "ICH_VTR_EL2" then SOME (ICH_VTR_EL2_ref.regval_of (ICH_VTR_EL2_ref.read_from s)) else
  if reg_name = "ICV_AP0R_EL1" then SOME (ICV_AP0R_EL1_ref.regval_of (ICV_AP0R_EL1_ref.read_from s)) else
  if reg_name = "ICV_AP1R_EL1" then SOME (ICV_AP1R_EL1_ref.regval_of (ICV_AP1R_EL1_ref.read_from s)) else
  if reg_name = "ICV_BPR0_EL1" then SOME (ICV_BPR0_EL1_ref.regval_of (ICV_BPR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_BPR1_EL1" then SOME (ICV_BPR1_EL1_ref.regval_of (ICV_BPR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_CTLR_EL1" then SOME (ICV_CTLR_EL1_ref.regval_of (ICV_CTLR_EL1_ref.read_from s)) else
  if reg_name = "ICV_DIR_EL1" then SOME (ICV_DIR_EL1_ref.regval_of (ICV_DIR_EL1_ref.read_from s)) else
  if reg_name = "ICV_EOIR0_EL1" then SOME (ICV_EOIR0_EL1_ref.regval_of (ICV_EOIR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_EOIR1_EL1" then SOME (ICV_EOIR1_EL1_ref.regval_of (ICV_EOIR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_HPPIR0_EL1" then SOME (ICV_HPPIR0_EL1_ref.regval_of (ICV_HPPIR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_HPPIR1_EL1" then SOME (ICV_HPPIR1_EL1_ref.regval_of (ICV_HPPIR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_IAR0_EL1" then SOME (ICV_IAR0_EL1_ref.regval_of (ICV_IAR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_IAR1_EL1" then SOME (ICV_IAR1_EL1_ref.regval_of (ICV_IAR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_IGRPEN0_EL1" then SOME (ICV_IGRPEN0_EL1_ref.regval_of (ICV_IGRPEN0_EL1_ref.read_from s)) else
  if reg_name = "ICV_IGRPEN1_EL1" then SOME (ICV_IGRPEN1_EL1_ref.regval_of (ICV_IGRPEN1_EL1_ref.read_from s)) else
  if reg_name = "ICV_PMR_EL1" then SOME (ICV_PMR_EL1_ref.regval_of (ICV_PMR_EL1_ref.read_from s)) else
  if reg_name = "ICV_RPR_EL1" then SOME (ICV_RPR_EL1_ref.regval_of (ICV_RPR_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64AFR0_EL1" then SOME (ID_AA64AFR0_EL1_ref.regval_of (ID_AA64AFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64AFR1_EL1" then SOME (ID_AA64AFR1_EL1_ref.regval_of (ID_AA64AFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64DFR1_EL1" then SOME (ID_AA64DFR1_EL1_ref.regval_of (ID_AA64DFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64ISAR0_EL1" then SOME (ID_AA64ISAR0_EL1_ref.regval_of (ID_AA64ISAR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64ISAR1_EL1" then SOME (ID_AA64ISAR1_EL1_ref.regval_of (ID_AA64ISAR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64MMFR0_EL1" then SOME (ID_AA64MMFR0_EL1_ref.regval_of (ID_AA64MMFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64MMFR1_EL1" then SOME (ID_AA64MMFR1_EL1_ref.regval_of (ID_AA64MMFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64MMFR2_EL1" then SOME (ID_AA64MMFR2_EL1_ref.regval_of (ID_AA64MMFR2_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64PFR0_EL1" then SOME (ID_AA64PFR0_EL1_ref.regval_of (ID_AA64PFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64PFR1_EL1" then SOME (ID_AA64PFR1_EL1_ref.regval_of (ID_AA64PFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AFR0_EL1" then SOME (ID_AFR0_EL1_ref.regval_of (ID_AFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_DFR0_EL1" then SOME (ID_DFR0_EL1_ref.regval_of (ID_DFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR0_EL1" then SOME (ID_ISAR0_EL1_ref.regval_of (ID_ISAR0_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR1_EL1" then SOME (ID_ISAR1_EL1_ref.regval_of (ID_ISAR1_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR2_EL1" then SOME (ID_ISAR2_EL1_ref.regval_of (ID_ISAR2_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR3_EL1" then SOME (ID_ISAR3_EL1_ref.regval_of (ID_ISAR3_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR4_EL1" then SOME (ID_ISAR4_EL1_ref.regval_of (ID_ISAR4_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR5_EL1" then SOME (ID_ISAR5_EL1_ref.regval_of (ID_ISAR5_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR6_EL1" then SOME (ID_ISAR6_EL1_ref.regval_of (ID_ISAR6_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR0_EL1" then SOME (ID_MMFR0_EL1_ref.regval_of (ID_MMFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR1_EL1" then SOME (ID_MMFR1_EL1_ref.regval_of (ID_MMFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR2_EL1" then SOME (ID_MMFR2_EL1_ref.regval_of (ID_MMFR2_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR3_EL1" then SOME (ID_MMFR3_EL1_ref.regval_of (ID_MMFR3_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR4_EL1" then SOME (ID_MMFR4_EL1_ref.regval_of (ID_MMFR4_EL1_ref.read_from s)) else
  if reg_name = "ID_PFR0_EL1" then SOME (ID_PFR0_EL1_ref.regval_of (ID_PFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_PFR1_EL1" then SOME (ID_PFR1_EL1_ref.regval_of (ID_PFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_PFR2_EL1" then SOME (ID_PFR2_EL1_ref.regval_of (ID_PFR2_EL1_ref.read_from s)) else
  if reg_name = "ISR_EL1" then SOME (ISR_EL1_ref.regval_of (ISR_EL1_ref.read_from s)) else
  if reg_name = "LORC_EL1" then SOME (LORC_EL1_ref.regval_of (LORC_EL1_ref.read_from s)) else
  if reg_name = "LOREA_EL1" then SOME (LOREA_EL1_ref.regval_of (LOREA_EL1_ref.read_from s)) else
  if reg_name = "LORID_EL1" then SOME (LORID_EL1_ref.regval_of (LORID_EL1_ref.read_from s)) else
  if reg_name = "LORN_EL1" then SOME (LORN_EL1_ref.regval_of (LORN_EL1_ref.read_from s)) else
  if reg_name = "LORSA_EL1" then SOME (LORSA_EL1_ref.regval_of (LORSA_EL1_ref.read_from s)) else
  if reg_name = "MDCCINT_EL1" then SOME (MDCCINT_EL1_ref.regval_of (MDCCINT_EL1_ref.read_from s)) else
  if reg_name = "MDCCSR_EL0" then SOME (MDCCSR_EL0_ref.regval_of (MDCCSR_EL0_ref.read_from s)) else
  if reg_name = "MDRAR_EL1" then SOME (MDRAR_EL1_ref.regval_of (MDRAR_EL1_ref.read_from s)) else
  if reg_name = "MIDR_EL1" then SOME (MIDR_EL1_ref.regval_of (MIDR_EL1_ref.read_from s)) else
  if reg_name = "MVFR0_EL1" then SOME (MVFR0_EL1_ref.regval_of (MVFR0_EL1_ref.read_from s)) else
  if reg_name = "MVFR1_EL1" then SOME (MVFR1_EL1_ref.regval_of (MVFR1_EL1_ref.read_from s)) else
  if reg_name = "MVFR2_EL1" then SOME (MVFR2_EL1_ref.regval_of (MVFR2_EL1_ref.read_from s)) else
  if reg_name = "NSACR" then SOME (NSACR_ref.regval_of (NSACR_ref.read_from s)) else
  if reg_name = "OSDTRRX_EL1" then SOME (OSDTRRX_EL1_ref.regval_of (OSDTRRX_EL1_ref.read_from s)) else
  if reg_name = "OSDTRTX_EL1" then SOME (OSDTRTX_EL1_ref.regval_of (OSDTRTX_EL1_ref.read_from s)) else
  if reg_name = "OSECCR_EL1" then SOME (OSECCR_EL1_ref.regval_of (OSECCR_EL1_ref.read_from s)) else
  if reg_name = "OSLAR_EL1" then SOME (OSLAR_EL1_ref.regval_of (OSLAR_EL1_ref.read_from s)) else
  if reg_name = "PAR_EL1" then SOME (PAR_EL1_ref.regval_of (PAR_EL1_ref.read_from s)) else
  if reg_name = "PAR_S" then SOME (PAR_S_ref.regval_of (PAR_S_ref.read_from s)) else
  if reg_name = "PMCCFILTR_EL0" then SOME (PMCCFILTR_EL0_ref.regval_of (PMCCFILTR_EL0_ref.read_from s)) else
  if reg_name = "PMCCNTR_EL0" then SOME (PMCCNTR_EL0_ref.regval_of (PMCCNTR_EL0_ref.read_from s)) else
  if reg_name = "PMCEID0_EL0" then SOME (PMCEID0_EL0_ref.regval_of (PMCEID0_EL0_ref.read_from s)) else
  if reg_name = "PMCEID1_EL0" then SOME (PMCEID1_EL0_ref.regval_of (PMCEID1_EL0_ref.read_from s)) else
  if reg_name = "PMCNTENCLR_EL0" then SOME (PMCNTENCLR_EL0_ref.regval_of (PMCNTENCLR_EL0_ref.read_from s)) else
  if reg_name = "PMCNTENSET_EL0" then SOME (PMCNTENSET_EL0_ref.regval_of (PMCNTENSET_EL0_ref.read_from s)) else
  if reg_name = "PMCR_EL0" then SOME (PMCR_EL0_ref.regval_of (PMCR_EL0_ref.read_from s)) else
  if reg_name = "PMEVCNTR_EL0" then SOME (PMEVCNTR_EL0_ref.regval_of (PMEVCNTR_EL0_ref.read_from s)) else
  if reg_name = "PMEVTYPER_EL0" then SOME (PMEVTYPER_EL0_ref.regval_of (PMEVTYPER_EL0_ref.read_from s)) else
  if reg_name = "PMINTENCLR_EL1" then SOME (PMINTENCLR_EL1_ref.regval_of (PMINTENCLR_EL1_ref.read_from s)) else
  if reg_name = "PMINTENSET_EL1" then SOME (PMINTENSET_EL1_ref.regval_of (PMINTENSET_EL1_ref.read_from s)) else
  if reg_name = "PMLSR" then SOME (PMLSR_ref.regval_of (PMLSR_ref.read_from s)) else
  if reg_name = "PMMIR" then SOME (PMMIR_ref.regval_of (PMMIR_ref.read_from s)) else
  if reg_name = "PMMIR_EL1" then SOME (PMMIR_EL1_ref.regval_of (PMMIR_EL1_ref.read_from s)) else
  if reg_name = "PMOVSCLR_EL0" then SOME (PMOVSCLR_EL0_ref.regval_of (PMOVSCLR_EL0_ref.read_from s)) else
  if reg_name = "PMOVSSET_EL0" then SOME (PMOVSSET_EL0_ref.regval_of (PMOVSSET_EL0_ref.read_from s)) else
  if reg_name = "PMPCSR" then SOME (PMPCSR_ref.regval_of (PMPCSR_ref.read_from s)) else
  if reg_name = "PMSELR_EL0" then SOME (PMSELR_EL0_ref.regval_of (PMSELR_EL0_ref.read_from s)) else
  if reg_name = "PMSWINC_EL0" then SOME (PMSWINC_EL0_ref.regval_of (PMSWINC_EL0_ref.read_from s)) else
  if reg_name = "PMUSERENR_EL0" then SOME (PMUSERENR_EL0_ref.regval_of (PMUSERENR_EL0_ref.read_from s)) else
  if reg_name = "PMVIDSR" then SOME (PMVIDSR_ref.regval_of (PMVIDSR_ref.read_from s)) else
  if reg_name = "PMXEVCNTR_EL0" then SOME (PMXEVCNTR_EL0_ref.regval_of (PMXEVCNTR_EL0_ref.read_from s)) else
  if reg_name = "PMXEVTYPER_EL0" then SOME (PMXEVTYPER_EL0_ref.regval_of (PMXEVTYPER_EL0_ref.read_from s)) else
  if reg_name = "RC" then SOME (RC_ref.regval_of (RC_ref.read_from s)) else
  if reg_name = "RD_EL0" then SOME (RD_EL0_ref.regval_of (RD_EL0_ref.read_from s)) else
  if reg_name = "REVIDR_EL1" then SOME (REVIDR_EL1_ref.regval_of (REVIDR_EL1_ref.read_from s)) else
  if reg_name = "RGSR_EL1" then SOME (RGSR_EL1_ref.regval_of (RGSR_EL1_ref.read_from s)) else
  if reg_name = "RMR_EL1" then SOME (RMR_EL1_ref.regval_of (RMR_EL1_ref.read_from s)) else
  if reg_name = "RMR_EL2" then SOME (RMR_EL2_ref.regval_of (RMR_EL2_ref.read_from s)) else
  if reg_name = "RMR_EL3" then SOME (RMR_EL3_ref.regval_of (RMR_EL3_ref.read_from s)) else
  if reg_name = "RMUID_EL0" then SOME (RMUID_EL0_ref.regval_of (RMUID_EL0_ref.read_from s)) else
  if reg_name = "RNDR" then SOME (RNDR_ref.regval_of (RNDR_ref.read_from s)) else
  if reg_name = "RNDRRS" then SOME (RNDRRS_ref.regval_of (RNDRRS_ref.read_from s)) else
  if reg_name = "RVBAR" then SOME (RVBAR_ref.regval_of (RVBAR_ref.read_from s)) else
  if reg_name = "RVBAR_EL1" then SOME (RVBAR_EL1_ref.regval_of (RVBAR_EL1_ref.read_from s)) else
  if reg_name = "RVBAR_EL2" then SOME (RVBAR_EL2_ref.regval_of (RVBAR_EL2_ref.read_from s)) else
  if reg_name = "RVBAR_EL3" then SOME (RVBAR_EL3_ref.regval_of (RVBAR_EL3_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL0" then SOME (SCXTNUM_EL0_ref.regval_of (SCXTNUM_EL0_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL1" then SOME (SCXTNUM_EL1_ref.regval_of (SCXTNUM_EL1_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL2" then SOME (SCXTNUM_EL2_ref.regval_of (SCXTNUM_EL2_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL3" then SOME (SCXTNUM_EL3_ref.regval_of (SCXTNUM_EL3_ref.read_from s)) else
  if reg_name = "SDER32_EL2" then SOME (SDER32_EL2_ref.regval_of (SDER32_EL2_ref.read_from s)) else
  if reg_name = "SPSR_EL0" then SOME (SPSR_EL0_ref.regval_of (SPSR_EL0_ref.read_from s)) else
  if reg_name = "SP_EL0" then SOME (SP_EL0_ref.regval_of (SP_EL0_ref.read_from s)) else
  if reg_name = "SP_EL1" then SOME (SP_EL1_ref.regval_of (SP_EL1_ref.read_from s)) else
  if reg_name = "SP_EL2" then SOME (SP_EL2_ref.regval_of (SP_EL2_ref.read_from s)) else
  if reg_name = "SP_EL3" then SOME (SP_EL3_ref.regval_of (SP_EL3_ref.read_from s)) else
  if reg_name = "ShouldAdvanceIT" then SOME (ShouldAdvanceIT_ref.regval_of (ShouldAdvanceIT_ref.read_from s)) else
  if reg_name = "TLBTR" then SOME (TLBTR_ref.regval_of (TLBTR_ref.read_from s)) else
  if reg_name = "TPIDRRO_EL0" then SOME (TPIDRRO_EL0_ref.regval_of (TPIDRRO_EL0_ref.read_from s)) else
  if reg_name = "TPIDR_EL0" then SOME (TPIDR_EL0_ref.regval_of (TPIDR_EL0_ref.read_from s)) else
  if reg_name = "TPIDR_EL1" then SOME (TPIDR_EL1_ref.regval_of (TPIDR_EL1_ref.read_from s)) else
  if reg_name = "TPIDR_EL2" then SOME (TPIDR_EL2_ref.regval_of (TPIDR_EL2_ref.read_from s)) else
  if reg_name = "TPIDR_EL3" then SOME (TPIDR_EL3_ref.regval_of (TPIDR_EL3_ref.read_from s)) else
  if reg_name = "TRFCR_EL1" then SOME (TRFCR_EL1_ref.regval_of (TRFCR_EL1_ref.read_from s)) else
  if reg_name = "TRFCR_EL2" then SOME (TRFCR_EL2_ref.regval_of (TRFCR_EL2_ref.read_from s)) else
  if reg_name = "VBAR_EL0" then SOME (VBAR_EL0_ref.regval_of (VBAR_EL0_ref.read_from s)) else
  if reg_name = "VDISR_EL2" then SOME (VDISR_EL2_ref.regval_of (VDISR_EL2_ref.read_from s)) else
  if reg_name = "VMPIDR_EL2" then SOME (VMPIDR_EL2_ref.regval_of (VMPIDR_EL2_ref.read_from s)) else
  if reg_name = "VNCR_EL2" then SOME (VNCR_EL2_ref.regval_of (VNCR_EL2_ref.read_from s)) else
  if reg_name = "VPIDR_EL2" then SOME (VPIDR_EL2_ref.regval_of (VPIDR_EL2_ref.read_from s)) else
  if reg_name = "_V" then SOME (V_ref.regval_of (V_ref.read_from s)) else
  if reg_name = "__currentCond" then SOME (currentCond_ref.regval_of (currentCond_ref.read_from s)) else
  if reg_name = "__exclusive_block_address" then SOME (exclusive_block_address_ref.regval_of (exclusive_block_address_ref.read_from s)) else
  if reg_name = "__saved_exception_level" then SOME (saved_exception_level_ref.regval_of (saved_exception_level_ref.read_from s)) else
  if reg_name = "__unconditional" then SOME (unconditional_ref.regval_of (unconditional_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_S" then SOME (CONTEXTIDR_S_ref.regval_of (CONTEXTIDR_S_ref.read_from s)) else
  if reg_name = "_GTEExtObsAccess" then SOME (GTEExtObsAccess_ref.regval_of (GTEExtObsAccess_ref.read_from s)) else
  if reg_name = "_GTEExtObsAddress" then SOME (GTEExtObsAddress_ref.regval_of (GTEExtObsAddress_ref.read_from s)) else
  if reg_name = "_GTEExtObsData" then SOME (GTEExtObsData_ref.regval_of (GTEExtObsData_ref.read_from s)) else
  if reg_name = "_GTEExtObsResult" then SOME (GTEExtObsResult_ref.regval_of (GTEExtObsResult_ref.read_from s)) else
  if reg_name = "_GTEExtObsActive" then SOME (GTEExtObsActive_ref.regval_of (GTEExtObsActive_ref.read_from s)) else
  if reg_name = "_GTEExtObsCount" then SOME (GTEExtObsCount_ref.regval_of (GTEExtObsCount_ref.read_from s)) else
  if reg_name = "_GTEExtObsIndex" then SOME (GTEExtObsIndex_ref.regval_of (GTEExtObsIndex_ref.read_from s)) else
  if reg_name = "_GTEExtObsResultIndex" then SOME (GTEExtObsResultIndex_ref.regval_of (GTEExtObsResultIndex_ref.read_from s)) else
  if reg_name = "_GTEExtObsResultIsAddress" then SOME (GTEExtObsResultIsAddress_ref.regval_of (GTEExtObsResultIsAddress_ref.read_from s)) else
  if reg_name = "_GTEListParam0" then SOME (GTEListParam0_ref.regval_of (GTEListParam0_ref.read_from s)) else
  if reg_name = "_GTEListParam1" then SOME (GTEListParam1_ref.regval_of (GTEListParam1_ref.read_from s)) else
  if reg_name = "_GTEParam" then SOME (GTEParam_ref.regval_of (GTEParam_ref.read_from s)) else
  if reg_name = "_GTE_AS_RecordedAccess" then SOME (GTE_AS_RecordedAccess_ref.regval_of (GTE_AS_RecordedAccess_ref.read_from s)) else
  if reg_name = "_GTE_AS_RecordedAddress" then SOME (GTE_AS_RecordedAddress_ref.regval_of (GTE_AS_RecordedAddress_ref.read_from s)) else
  if reg_name = "_GTE_AS_RecordedData" then SOME (GTE_AS_RecordedData_ref.regval_of (GTE_AS_RecordedData_ref.read_from s)) else
  if reg_name = "_GTE_PPU_Access" then SOME (GTE_PPU_Access_ref.regval_of (GTE_PPU_Access_ref.read_from s)) else
  if reg_name = "_GTE_PPU_Address" then SOME (GTE_PPU_Address_ref.regval_of (GTE_PPU_Address_ref.read_from s)) else
  if reg_name = "_GTE_PPU_SizeEn" then SOME (GTE_PPU_SizeEn_ref.regval_of (GTE_PPU_SizeEn_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi1" then SOME (AbortRgn64Hi1_ref.regval_of (AbortRgn64Hi1_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi1_Hi" then SOME (AbortRgn64Hi1_Hi_ref.regval_of (AbortRgn64Hi1_Hi_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi2" then SOME (AbortRgn64Hi2_ref.regval_of (AbortRgn64Hi2_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi2_Hi" then SOME (AbortRgn64Hi2_Hi_ref.regval_of (AbortRgn64Hi2_Hi_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo1" then SOME (AbortRgn64Lo1_ref.regval_of (AbortRgn64Lo1_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo1_Hi" then SOME (AbortRgn64Lo1_Hi_ref.regval_of (AbortRgn64Lo1_Hi_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo2" then SOME (AbortRgn64Lo2_ref.regval_of (AbortRgn64Lo2_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo2_Hi" then SOME (AbortRgn64Lo2_Hi_ref.regval_of (AbortRgn64Lo2_Hi_ref.read_from s)) else
  if reg_name = "CNTCR" then SOME (CNTCR_ref.regval_of (CNTCR_ref.read_from s)) else
  if reg_name = "CNTCV" then SOME (CNTCV_ref.regval_of (CNTCV_ref.read_from s)) else
  if reg_name = "CNTFID0" then SOME (CNTFID0_ref.regval_of (CNTFID0_ref.read_from s)) else
  if reg_name = "CNTSR" then SOME (CNTSR_ref.regval_of (CNTSR_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_EL1" then SOME (CONTEXTIDR_EL1_ref.regval_of (CONTEXTIDR_EL1_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_EL2" then SOME (CONTEXTIDR_EL2_ref.regval_of (CONTEXTIDR_EL2_ref.read_from s)) else
  if reg_name = "DACR32_EL2" then SOME (DACR32_EL2_ref.regval_of (DACR32_EL2_ref.read_from s)) else
  if reg_name = "DACR_S" then SOME (DACR_S_ref.regval_of (DACR_S_ref.read_from s)) else
  if reg_name = "DBGBCR" then SOME (DBGBCR_ref.regval_of (DBGBCR_ref.read_from s)) else
  if reg_name = "DBGBCR_EL1" then SOME (DBGBCR_EL1_ref.regval_of (DBGBCR_EL1_ref.read_from s)) else
  if reg_name = "DBGBVR" then SOME (DBGBVR_ref.regval_of (DBGBVR_ref.read_from s)) else
  if reg_name = "DBGBVR_EL1" then SOME (DBGBVR_EL1_ref.regval_of (DBGBVR_EL1_ref.read_from s)) else
  if reg_name = "DBGBXVR" then SOME (DBGBXVR_ref.regval_of (DBGBXVR_ref.read_from s)) else
  if reg_name = "DBGDIDR" then SOME (DBGDIDR_ref.regval_of (DBGDIDR_ref.read_from s)) else
  if reg_name = "DBGEN" then SOME (DBGEN_ref.regval_of (DBGEN_ref.read_from s)) else
  if reg_name = "DBGPRCR_EL1" then SOME (DBGPRCR_EL1_ref.regval_of (DBGPRCR_EL1_ref.read_from s)) else
  if reg_name = "DBGVCR32_EL2" then SOME (DBGVCR32_EL2_ref.regval_of (DBGVCR32_EL2_ref.read_from s)) else
  if reg_name = "DBGWCR" then SOME (DBGWCR_ref.regval_of (DBGWCR_ref.read_from s)) else
  if reg_name = "DBGWCR_EL1" then SOME (DBGWCR_EL1_ref.regval_of (DBGWCR_EL1_ref.read_from s)) else
  if reg_name = "DBGWVR" then SOME (DBGWVR_ref.regval_of (DBGWVR_ref.read_from s)) else
  if reg_name = "DBGWVR_EL1" then SOME (DBGWVR_EL1_ref.regval_of (DBGWVR_EL1_ref.read_from s)) else
  if reg_name = "DLR_EL0" then SOME (DLR_EL0_ref.regval_of (DLR_EL0_ref.read_from s)) else
  if reg_name = "DSPSR_EL0" then SOME (DSPSR_EL0_ref.regval_of (DSPSR_EL0_ref.read_from s)) else
  if reg_name = "EDSCR" then SOME (EDSCR_ref.regval_of (EDSCR_ref.read_from s)) else
  if reg_name = "DFSR_S" then SOME (DFSR_S_ref.regval_of (DFSR_S_ref.read_from s)) else
  if reg_name = "ELR_EL3" then SOME (ELR_EL3_ref.regval_of (ELR_EL3_ref.read_from s)) else
  if reg_name = "ELR_EL1" then SOME (ELR_EL1_ref.regval_of (ELR_EL1_ref.read_from s)) else
  if reg_name = "ESR_EL3" then SOME (ESR_EL3_ref.regval_of (ESR_EL3_ref.read_from s)) else
  if reg_name = "ESR_EL1" then SOME (ESR_EL1_ref.regval_of (ESR_EL1_ref.read_from s)) else
  if reg_name = "ELR_EL2" then SOME (ELR_EL2_ref.regval_of (ELR_EL2_ref.read_from s)) else
  if reg_name = "TCR_EL2" then SOME (TCR_EL2_ref.regval_of (TCR_EL2_ref.read_from s)) else
  if reg_name = "ESR_EL2" then SOME (ESR_EL2_ref.regval_of (ESR_EL2_ref.read_from s)) else
  if reg_name = "FAR_EL1" then SOME (FAR_EL1_ref.regval_of (FAR_EL1_ref.read_from s)) else
  if reg_name = "FAR_EL2" then SOME (FAR_EL2_ref.regval_of (FAR_EL2_ref.read_from s)) else
  if reg_name = "FAR_EL3" then SOME (FAR_EL3_ref.regval_of (FAR_EL3_ref.read_from s)) else
  if reg_name = "HCR_EL2" then SOME (HCR_EL2_ref.regval_of (HCR_EL2_ref.read_from s)) else
  if reg_name = "HPFAR_EL2" then SOME (HPFAR_EL2_ref.regval_of (HPFAR_EL2_ref.read_from s)) else
  if reg_name = "ID_AA64DFR0_EL1" then SOME (ID_AA64DFR0_EL1_ref.regval_of (ID_AA64DFR0_EL1_ref.read_from s)) else
  if reg_name = "IFSR32_EL2" then SOME (IFSR32_EL2_ref.regval_of (IFSR32_EL2_ref.read_from s)) else
  if reg_name = "IFSR_S" then SOME (IFSR_S_ref.regval_of (IFSR_S_ref.read_from s)) else
  if reg_name = "InGuardedPage" then SOME (InGuardedPage_ref.regval_of (InGuardedPage_ref.read_from s)) else
  if reg_name = "LR_mon" then SOME (LR_mon_ref.regval_of (LR_mon_ref.read_from s)) else
  if reg_name = "MAIR0_S" then SOME (MAIR0_S_ref.regval_of (MAIR0_S_ref.read_from s)) else
  if reg_name = "MAIR1_S" then SOME (MAIR1_S_ref.regval_of (MAIR1_S_ref.read_from s)) else
  if reg_name = "MAIR_EL1" then SOME (MAIR_EL1_ref.regval_of (MAIR_EL1_ref.read_from s)) else
  if reg_name = "MAIR_EL2" then SOME (MAIR_EL2_ref.regval_of (MAIR_EL2_ref.read_from s)) else
  if reg_name = "MAIR_EL3" then SOME (MAIR_EL3_ref.regval_of (MAIR_EL3_ref.read_from s)) else
  if reg_name = "MDCR_EL2" then SOME (MDCR_EL2_ref.regval_of (MDCR_EL2_ref.read_from s)) else
  if reg_name = "MDCR_EL3" then SOME (MDCR_EL3_ref.regval_of (MDCR_EL3_ref.read_from s)) else
  if reg_name = "MDSCR_EL1" then SOME (MDSCR_EL1_ref.regval_of (MDSCR_EL1_ref.read_from s)) else
  if reg_name = "MPAM0_EL1" then SOME (MPAM0_EL1_ref.regval_of (MPAM0_EL1_ref.read_from s)) else
  if reg_name = "MPAM1_EL1" then SOME (MPAM1_EL1_ref.regval_of (MPAM1_EL1_ref.read_from s)) else
  if reg_name = "MPAM2_EL2" then SOME (MPAM2_EL2_ref.regval_of (MPAM2_EL2_ref.read_from s)) else
  if reg_name = "MPAM3_EL3" then SOME (MPAM3_EL3_ref.regval_of (MPAM3_EL3_ref.read_from s)) else
  if reg_name = "MPAMHCR_EL2" then SOME (MPAMHCR_EL2_ref.regval_of (MPAMHCR_EL2_ref.read_from s)) else
  if reg_name = "MPAMIDR_EL1" then SOME (MPAMIDR_EL1_ref.regval_of (MPAMIDR_EL1_ref.read_from s)) else
  if reg_name = "MPAMVPM0_EL2" then SOME (MPAMVPM0_EL2_ref.regval_of (MPAMVPM0_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM1_EL2" then SOME (MPAMVPM1_EL2_ref.regval_of (MPAMVPM1_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM2_EL2" then SOME (MPAMVPM2_EL2_ref.regval_of (MPAMVPM2_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM3_EL2" then SOME (MPAMVPM3_EL2_ref.regval_of (MPAMVPM3_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM4_EL2" then SOME (MPAMVPM4_EL2_ref.regval_of (MPAMVPM4_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM5_EL2" then SOME (MPAMVPM5_EL2_ref.regval_of (MPAMVPM5_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM6_EL2" then SOME (MPAMVPM6_EL2_ref.regval_of (MPAMVPM6_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM7_EL2" then SOME (MPAMVPM7_EL2_ref.regval_of (MPAMVPM7_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPMV_EL2" then SOME (MPAMVPMV_EL2_ref.regval_of (MPAMVPMV_EL2_ref.read_from s)) else
  if reg_name = "MPIDR_EL1" then SOME (MPIDR_EL1_ref.regval_of (MPIDR_EL1_ref.read_from s)) else
  if reg_name = "MVBAR" then SOME (MVBAR_ref.regval_of (MVBAR_ref.read_from s)) else
  if reg_name = "NMRR_S" then SOME (NMRR_S_ref.regval_of (NMRR_S_ref.read_from s)) else
  if reg_name = "OSDLR_EL1" then SOME (OSDLR_EL1_ref.regval_of (OSDLR_EL1_ref.read_from s)) else
  if reg_name = "OSLSR_EL1" then SOME (OSLSR_EL1_ref.regval_of (OSLSR_EL1_ref.read_from s)) else
  if reg_name = "PRRR_S" then SOME (PRRR_S_ref.regval_of (PRRR_S_ref.read_from s)) else
  if reg_name = "PSTATE" then SOME (PSTATE_ref.regval_of (PSTATE_ref.read_from s)) else
  if reg_name = "SCR_EL3" then SOME (SCR_EL3_ref.regval_of (SCR_EL3_ref.read_from s)) else
  if reg_name = "SCTLR_EL1" then SOME (SCTLR_EL1_ref.regval_of (SCTLR_EL1_ref.read_from s)) else
  if reg_name = "SCTLR_EL2" then SOME (SCTLR_EL2_ref.regval_of (SCTLR_EL2_ref.read_from s)) else
  if reg_name = "SCTLR_EL3" then SOME (SCTLR_EL3_ref.regval_of (SCTLR_EL3_ref.read_from s)) else
  if reg_name = "SCTLR_S" then SOME (SCTLR_S_ref.regval_of (SCTLR_S_ref.read_from s)) else
  if reg_name = "SDER32_EL3" then SOME (SDER32_EL3_ref.regval_of (SDER32_EL3_ref.read_from s)) else
  if reg_name = "SPIDEN" then SOME (SPIDEN_ref.regval_of (SPIDEN_ref.read_from s)) else
  if reg_name = "SPSR_EL1" then SOME (SPSR_EL1_ref.regval_of (SPSR_EL1_ref.read_from s)) else
  if reg_name = "SPSR_EL2" then SOME (SPSR_EL2_ref.regval_of (SPSR_EL2_ref.read_from s)) else
  if reg_name = "SPSR_EL3" then SOME (SPSR_EL3_ref.regval_of (SPSR_EL3_ref.read_from s)) else
  if reg_name = "SPSR_abt" then SOME (SPSR_abt_ref.regval_of (SPSR_abt_ref.read_from s)) else
  if reg_name = "SPSR_fiq" then SOME (SPSR_fiq_ref.regval_of (SPSR_fiq_ref.read_from s)) else
  if reg_name = "SPSR_irq" then SOME (SPSR_irq_ref.regval_of (SPSR_irq_ref.read_from s)) else
  if reg_name = "SPSR_und" then SOME (SPSR_und_ref.regval_of (SPSR_und_ref.read_from s)) else
  if reg_name = "SP_mon" then SOME (SP_mon_ref.regval_of (SP_mon_ref.read_from s)) else
  if reg_name = "ScheduledFIQ" then SOME (ScheduledFIQ_ref.regval_of (ScheduledFIQ_ref.read_from s)) else
  if reg_name = "ScheduledIRQ" then SOME (ScheduledIRQ_ref.regval_of (ScheduledIRQ_ref.read_from s)) else
  if reg_name = "TCR_EL1" then SOME (TCR_EL1_ref.regval_of (TCR_EL1_ref.read_from s)) else
  if reg_name = "TCR_EL3" then SOME (TCR_EL3_ref.regval_of (TCR_EL3_ref.read_from s)) else
  if reg_name = "TFSRE0_EL1" then SOME (TFSRE0_EL1_ref.regval_of (TFSRE0_EL1_ref.read_from s)) else
  if reg_name = "TFSR_EL1" then SOME (TFSR_EL1_ref.regval_of (TFSR_EL1_ref.read_from s)) else
  if reg_name = "TFSR_EL2" then SOME (TFSR_EL2_ref.regval_of (TFSR_EL2_ref.read_from s)) else
  if reg_name = "TFSR_EL3" then SOME (TFSR_EL3_ref.regval_of (TFSR_EL3_ref.read_from s)) else
  if reg_name = "TLBHits" then SOME (TLBHits_ref.regval_of (TLBHits_ref.read_from s)) else
  if reg_name = "TLBMisses" then SOME (TLBMisses_ref.regval_of (TLBMisses_ref.read_from s)) else
  if reg_name = "TTBCR2_S" then SOME (TTBCR2_S_ref.regval_of (TTBCR2_S_ref.read_from s)) else
  if reg_name = "TTBCR_S" then SOME (TTBCR_S_ref.regval_of (TTBCR_S_ref.read_from s)) else
  if reg_name = "TTBR0_EL1" then SOME (TTBR0_EL1_ref.regval_of (TTBR0_EL1_ref.read_from s)) else
  if reg_name = "TTBR0_EL2" then SOME (TTBR0_EL2_ref.regval_of (TTBR0_EL2_ref.read_from s)) else
  if reg_name = "TTBR0_EL3" then SOME (TTBR0_EL3_ref.regval_of (TTBR0_EL3_ref.read_from s)) else
  if reg_name = "TTBR0_S" then SOME (TTBR0_S_ref.regval_of (TTBR0_S_ref.read_from s)) else
  if reg_name = "TTBR1_EL1" then SOME (TTBR1_EL1_ref.regval_of (TTBR1_EL1_ref.read_from s)) else
  if reg_name = "TTBR1_EL2" then SOME (TTBR1_EL2_ref.regval_of (TTBR1_EL2_ref.read_from s)) else
  if reg_name = "TTBR1_S" then SOME (TTBR1_S_ref.regval_of (TTBR1_S_ref.read_from s)) else
  if reg_name = "VBAR_EL1" then SOME (VBAR_EL1_ref.regval_of (VBAR_EL1_ref.read_from s)) else
  if reg_name = "VBAR_EL2" then SOME (VBAR_EL2_ref.regval_of (VBAR_EL2_ref.read_from s)) else
  if reg_name = "VBAR_EL3" then SOME (VBAR_EL3_ref.regval_of (VBAR_EL3_ref.read_from s)) else
  if reg_name = "VBAR_S" then SOME (VBAR_S_ref.regval_of (VBAR_S_ref.read_from s)) else
  if reg_name = "VSESR_EL2" then SOME (VSESR_EL2_ref.regval_of (VSESR_EL2_ref.read_from s)) else
  if reg_name = "VSTCR_EL2" then SOME (VSTCR_EL2_ref.regval_of (VSTCR_EL2_ref.read_from s)) else
  if reg_name = "VSTTBR_EL2" then SOME (VSTTBR_EL2_ref.regval_of (VSTTBR_EL2_ref.read_from s)) else
  if reg_name = "VTCR_EL2" then SOME (VTCR_EL2_ref.regval_of (VTCR_EL2_ref.read_from s)) else
  if reg_name = "VTTBR_EL2" then SOME (VTTBR_EL2_ref.regval_of (VTTBR_EL2_ref.read_from s)) else
  if reg_name = "_AXIAbortCtl" then SOME (AXIAbortCtl_ref.regval_of (AXIAbortCtl_ref.read_from s)) else
  if reg_name = "_ClearFIQ" then SOME (ClearFIQ_ref.regval_of (ClearFIQ_ref.read_from s)) else
  if reg_name = "_ClearIRQ" then SOME (ClearIRQ_ref.regval_of (ClearIRQ_ref.read_from s)) else
  if reg_name = "_FIQPending" then SOME (FIQPending_ref.regval_of (FIQPending_ref.read_from s)) else
  if reg_name = "_GTEActive" then SOME (GTEActive_ref.regval_of (GTEActive_ref.read_from s)) else
  if reg_name = "_GTECurrentAPI" then SOME (GTECurrentAPI_ref.regval_of (GTECurrentAPI_ref.read_from s)) else
  if reg_name = "_GTEHaveParamLo" then SOME (GTEHaveParamLo_ref.regval_of (GTEHaveParamLo_ref.read_from s)) else
  if reg_name = "_GTEListParam" then SOME (GTEListParam_ref.regval_of (GTEListParam_ref.read_from s)) else
  if reg_name = "_GTEListParamIndex" then SOME (GTEListParamIndex_ref.regval_of (GTEListParamIndex_ref.read_from s)) else
  if reg_name = "_GTEListParamTerminator" then SOME (GTEListParamTerminator_ref.regval_of (GTEListParamTerminator_ref.read_from s)) else
  if reg_name = "_GTEListParamTerminatorCount" then SOME (GTEListParamTerminatorCount_ref.regval_of (GTEListParamTerminatorCount_ref.read_from s)) else
  if reg_name = "_GTEListParamTerminators" then SOME (GTEListParamTerminators_ref.regval_of (GTEListParamTerminators_ref.read_from s)) else
  if reg_name = "_GTEParamCount" then SOME (GTEParamCount_ref.regval_of (GTEParamCount_ref.read_from s)) else
  if reg_name = "_GTEParamLo" then SOME (GTEParamLo_ref.regval_of (GTEParamLo_ref.read_from s)) else
  if reg_name = "_GTEParamType" then SOME (GTEParamType_ref.regval_of (GTEParamType_ref.read_from s)) else
  if reg_name = "_GTEParamsComplete" then SOME (GTEParamsComplete_ref.regval_of (GTEParamsComplete_ref.read_from s)) else
  if reg_name = "_GTEStatus" then SOME (GTEStatus_ref.regval_of (GTEStatus_ref.read_from s)) else
  if reg_name = "_GTE_AS_Access" then SOME (GTE_AS_Access_ref.regval_of (GTE_AS_Access_ref.read_from s)) else
  if reg_name = "_GTE_AS_AccessCount" then SOME (GTE_AS_AccessCount_ref.regval_of (GTE_AS_AccessCount_ref.read_from s)) else
  if reg_name = "_GTE_AS_Address" then SOME (GTE_AS_Address_ref.regval_of (GTE_AS_Address_ref.read_from s)) else
  if reg_name = "_GTE_AS_Size" then SOME (GTE_AS_Size_ref.regval_of (GTE_AS_Size_ref.read_from s)) else
  if reg_name = "_IRQPending" then SOME (IRQPending_ref.regval_of (IRQPending_ref.read_from s)) else
  if reg_name = "_PC" then SOME (PC_ref.regval_of (PC_ref.read_from s)) else
  if reg_name = "_PPURACR" then SOME (PPURACR_ref.regval_of (PPURACR_ref.read_from s)) else
  if reg_name = "_PPURBAR" then SOME (PPURBAR_ref.regval_of (PPURBAR_ref.read_from s)) else
  if reg_name = "_PPURSER" then SOME (PPURSER_ref.regval_of (PPURSER_ref.read_from s)) else
  if reg_name = "_PendingPhysicalSE" then SOME (PendingPhysicalSE_ref.regval_of (PendingPhysicalSE_ref.read_from s)) else
  if reg_name = "_R" then SOME (R_ref.regval_of (R_ref.read_from s)) else
  if reg_name = "_ScheduleFIQ" then SOME (ScheduleFIQ_ref.regval_of (ScheduleFIQ_ref.read_from s)) else
  if reg_name = "_ScheduleIRQ" then SOME (ScheduleIRQ_ref.regval_of (ScheduleIRQ_ref.read_from s)) else
  if reg_name = "_TLB" then SOME (TLB_ref.regval_of (TLB_ref.read_from s)) else
  if reg_name = "_TargetCPU" then SOME (TargetCPU_ref.regval_of (TargetCPU_ref.read_from s)) else
  if reg_name = "__CNTControlBase" then SOME (CNTControlBase_ref.regval_of (CNTControlBase_ref.read_from s)) else
  if reg_name = "__LSISyndrome" then SOME (LSISyndrome_ref.regval_of (LSISyndrome_ref.read_from s)) else
  if reg_name = "__PC_changed" then SOME (PC_changed_ref.regval_of (PC_changed_ref.read_from s)) else
  if reg_name = "__currentInstr" then SOME (currentInstr_ref.regval_of (currentInstr_ref.read_from s)) else
  if reg_name = "__currentInstrLength" then SOME (currentInstrLength_ref.regval_of (currentInstrLength_ref.read_from s)) else
  if reg_name = "__defaultRAM" then SOME (defaultRAM_ref.regval_of (defaultRAM_ref.read_from s)) else
  if reg_name = "__highest_el_aarch32" then SOME (highest_el_aarch32_ref.regval_of (highest_el_aarch32_ref.read_from s)) else
  NONE))`;


(*val set_regval : string -> register_value -> regstate -> maybe regstate*)
val _ = Define `
 ((set_regval:string -> register_value -> regstate ->(regstate)option) reg_name v s=
   (if reg_name = "CNTHCTL_EL2" then OPTION_MAP (\ v .  CNTHCTL_EL2_ref.write_to v s) (CNTHCTL_EL2_ref.of_regval v) else
  if reg_name = "CPTR_EL2" then OPTION_MAP (\ v .  CPTR_EL2_ref.write_to v s) (CPTR_EL2_ref.of_regval v) else
  if reg_name = "CCSIDR_EL1" then OPTION_MAP (\ v .  CCSIDR_EL1_ref.write_to v s) (CCSIDR_EL1_ref.of_regval v) else
  if reg_name = "ACTLR_EL1" then OPTION_MAP (\ v .  ACTLR_EL1_ref.write_to v s) (ACTLR_EL1_ref.of_regval v) else
  if reg_name = "ACTLR_EL2" then OPTION_MAP (\ v .  ACTLR_EL2_ref.write_to v s) (ACTLR_EL2_ref.of_regval v) else
  if reg_name = "ACTLR_EL3" then OPTION_MAP (\ v .  ACTLR_EL3_ref.write_to v s) (ACTLR_EL3_ref.of_regval v) else
  if reg_name = "AFSR0_EL1" then OPTION_MAP (\ v .  AFSR0_EL1_ref.write_to v s) (AFSR0_EL1_ref.of_regval v) else
  if reg_name = "AFSR0_EL2" then OPTION_MAP (\ v .  AFSR0_EL2_ref.write_to v s) (AFSR0_EL2_ref.of_regval v) else
  if reg_name = "AFSR0_EL3" then OPTION_MAP (\ v .  AFSR0_EL3_ref.write_to v s) (AFSR0_EL3_ref.of_regval v) else
  if reg_name = "AFSR1_EL1" then OPTION_MAP (\ v .  AFSR1_EL1_ref.write_to v s) (AFSR1_EL1_ref.of_regval v) else
  if reg_name = "AFSR1_EL2" then OPTION_MAP (\ v .  AFSR1_EL2_ref.write_to v s) (AFSR1_EL2_ref.of_regval v) else
  if reg_name = "AFSR1_EL3" then OPTION_MAP (\ v .  AFSR1_EL3_ref.write_to v s) (AFSR1_EL3_ref.of_regval v) else
  if reg_name = "AIDR_EL1" then OPTION_MAP (\ v .  AIDR_EL1_ref.write_to v s) (AIDR_EL1_ref.of_regval v) else
  if reg_name = "AMAIR_EL1" then OPTION_MAP (\ v .  AMAIR_EL1_ref.write_to v s) (AMAIR_EL1_ref.of_regval v) else
  if reg_name = "AMAIR_EL2" then OPTION_MAP (\ v .  AMAIR_EL2_ref.write_to v s) (AMAIR_EL2_ref.of_regval v) else
  if reg_name = "AMAIR_EL3" then OPTION_MAP (\ v .  AMAIR_EL3_ref.write_to v s) (AMAIR_EL3_ref.of_regval v) else
  if reg_name = "APDAKeyHi_EL1" then OPTION_MAP (\ v .  APDAKeyHi_EL1_ref.write_to v s) (APDAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APDAKeyLo_EL1" then OPTION_MAP (\ v .  APDAKeyLo_EL1_ref.write_to v s) (APDAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APDBKeyHi_EL1" then OPTION_MAP (\ v .  APDBKeyHi_EL1_ref.write_to v s) (APDBKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APDBKeyLo_EL1" then OPTION_MAP (\ v .  APDBKeyLo_EL1_ref.write_to v s) (APDBKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APGAKeyHi_EL1" then OPTION_MAP (\ v .  APGAKeyHi_EL1_ref.write_to v s) (APGAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APGAKeyLo_EL1" then OPTION_MAP (\ v .  APGAKeyLo_EL1_ref.write_to v s) (APGAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APIAKeyHi_EL1" then OPTION_MAP (\ v .  APIAKeyHi_EL1_ref.write_to v s) (APIAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APIAKeyLo_EL1" then OPTION_MAP (\ v .  APIAKeyLo_EL1_ref.write_to v s) (APIAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APIBKeyHi_EL1" then OPTION_MAP (\ v .  APIBKeyHi_EL1_ref.write_to v s) (APIBKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APIBKeyLo_EL1" then OPTION_MAP (\ v .  APIBKeyLo_EL1_ref.write_to v s) (APIBKeyLo_EL1_ref.of_regval v) else
  if reg_name = "BTypeCompatible" then OPTION_MAP (\ v .  BTypeCompatible_ref.write_to v s) (BTypeCompatible_ref.of_regval v) else
  if reg_name = "BTypeNext" then OPTION_MAP (\ v .  BTypeNext_ref.write_to v s) (BTypeNext_ref.of_regval v) else
  if reg_name = "CCSIDR2_EL1" then OPTION_MAP (\ v .  CCSIDR2_EL1_ref.write_to v s) (CCSIDR2_EL1_ref.of_regval v) else
  if reg_name = "CLIDR_EL1" then OPTION_MAP (\ v .  CLIDR_EL1_ref.write_to v s) (CLIDR_EL1_ref.of_regval v) else
  if reg_name = "CNTFRQ_EL0" then OPTION_MAP (\ v .  CNTFRQ_EL0_ref.write_to v s) (CNTFRQ_EL0_ref.of_regval v) else
  if reg_name = "CNTHPS_CTL_EL2" then OPTION_MAP (\ v .  CNTHPS_CTL_EL2_ref.write_to v s) (CNTHPS_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHPS_CVAL_EL2" then OPTION_MAP (\ v .  CNTHPS_CVAL_EL2_ref.write_to v s) (CNTHPS_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHPS_TVAL_EL2" then OPTION_MAP (\ v .  CNTHPS_TVAL_EL2_ref.write_to v s) (CNTHPS_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHP_CTL_EL2" then OPTION_MAP (\ v .  CNTHP_CTL_EL2_ref.write_to v s) (CNTHP_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHP_CVAL_EL2" then OPTION_MAP (\ v .  CNTHP_CVAL_EL2_ref.write_to v s) (CNTHP_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHP_TVAL_EL2" then OPTION_MAP (\ v .  CNTHP_TVAL_EL2_ref.write_to v s) (CNTHP_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHVS_CTL_EL2" then OPTION_MAP (\ v .  CNTHVS_CTL_EL2_ref.write_to v s) (CNTHVS_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHVS_CVAL_EL2" then OPTION_MAP (\ v .  CNTHVS_CVAL_EL2_ref.write_to v s) (CNTHVS_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHVS_TVAL_EL2" then OPTION_MAP (\ v .  CNTHVS_TVAL_EL2_ref.write_to v s) (CNTHVS_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHV_CTL_EL2" then OPTION_MAP (\ v .  CNTHV_CTL_EL2_ref.write_to v s) (CNTHV_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHV_CVAL_EL2" then OPTION_MAP (\ v .  CNTHV_CVAL_EL2_ref.write_to v s) (CNTHV_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHV_TVAL_EL2" then OPTION_MAP (\ v .  CNTHV_TVAL_EL2_ref.write_to v s) (CNTHV_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTKCTL_EL1" then OPTION_MAP (\ v .  CNTKCTL_EL1_ref.write_to v s) (CNTKCTL_EL1_ref.of_regval v) else
  if reg_name = "CNTPCT_EL0" then OPTION_MAP (\ v .  CNTPCT_EL0_ref.write_to v s) (CNTPCT_EL0_ref.of_regval v) else
  if reg_name = "CNTPS_CTL_EL1" then OPTION_MAP (\ v .  CNTPS_CTL_EL1_ref.write_to v s) (CNTPS_CTL_EL1_ref.of_regval v) else
  if reg_name = "CNTPS_CVAL_EL1" then OPTION_MAP (\ v .  CNTPS_CVAL_EL1_ref.write_to v s) (CNTPS_CVAL_EL1_ref.of_regval v) else
  if reg_name = "CNTPS_TVAL_EL1" then OPTION_MAP (\ v .  CNTPS_TVAL_EL1_ref.write_to v s) (CNTPS_TVAL_EL1_ref.of_regval v) else
  if reg_name = "CNTP_CTL_EL0" then OPTION_MAP (\ v .  CNTP_CTL_EL0_ref.write_to v s) (CNTP_CTL_EL0_ref.of_regval v) else
  if reg_name = "CNTP_CTL_S" then OPTION_MAP (\ v .  CNTP_CTL_S_ref.write_to v s) (CNTP_CTL_S_ref.of_regval v) else
  if reg_name = "CNTP_CVAL_EL0" then OPTION_MAP (\ v .  CNTP_CVAL_EL0_ref.write_to v s) (CNTP_CVAL_EL0_ref.of_regval v) else
  if reg_name = "CNTP_TVAL_EL0" then OPTION_MAP (\ v .  CNTP_TVAL_EL0_ref.write_to v s) (CNTP_TVAL_EL0_ref.of_regval v) else
  if reg_name = "CNTVCT_EL0" then OPTION_MAP (\ v .  CNTVCT_EL0_ref.write_to v s) (CNTVCT_EL0_ref.of_regval v) else
  if reg_name = "CNTVOFF_EL2" then OPTION_MAP (\ v .  CNTVOFF_EL2_ref.write_to v s) (CNTVOFF_EL2_ref.of_regval v) else
  if reg_name = "CNTV_CTL_EL0" then OPTION_MAP (\ v .  CNTV_CTL_EL0_ref.write_to v s) (CNTV_CTL_EL0_ref.of_regval v) else
  if reg_name = "CNTV_CVAL_EL0" then OPTION_MAP (\ v .  CNTV_CVAL_EL0_ref.write_to v s) (CNTV_CVAL_EL0_ref.of_regval v) else
  if reg_name = "CNTV_TVAL_EL0" then OPTION_MAP (\ v .  CNTV_TVAL_EL0_ref.write_to v s) (CNTV_TVAL_EL0_ref.of_regval v) else
  if reg_name = "CPACR_EL1" then OPTION_MAP (\ v .  CPACR_EL1_ref.write_to v s) (CPACR_EL1_ref.of_regval v) else
  if reg_name = "CPTR_EL3" then OPTION_MAP (\ v .  CPTR_EL3_ref.write_to v s) (CPTR_EL3_ref.of_regval v) else
  if reg_name = "CSSELR_EL1" then OPTION_MAP (\ v .  CSSELR_EL1_ref.write_to v s) (CSSELR_EL1_ref.of_regval v) else
  if reg_name = "CSSELR_S" then OPTION_MAP (\ v .  CSSELR_S_ref.write_to v s) (CSSELR_S_ref.of_regval v) else
  if reg_name = "CTR_EL0" then OPTION_MAP (\ v .  CTR_EL0_ref.write_to v s) (CTR_EL0_ref.of_regval v) else
  if reg_name = "DBGAUTHSTATUS_EL1" then OPTION_MAP (\ v .  DBGAUTHSTATUS_EL1_ref.write_to v s) (DBGAUTHSTATUS_EL1_ref.of_regval v) else
  if reg_name = "DBGCLAIMCLR_EL1" then OPTION_MAP (\ v .  DBGCLAIMCLR_EL1_ref.write_to v s) (DBGCLAIMCLR_EL1_ref.of_regval v) else
  if reg_name = "DBGCLAIMSET_EL1" then OPTION_MAP (\ v .  DBGCLAIMSET_EL1_ref.write_to v s) (DBGCLAIMSET_EL1_ref.of_regval v) else
  if reg_name = "DBGDEVID1" then OPTION_MAP (\ v .  DBGDEVID1_ref.write_to v s) (DBGDEVID1_ref.of_regval v) else
  if reg_name = "DBGDEVID2" then OPTION_MAP (\ v .  DBGDEVID2_ref.write_to v s) (DBGDEVID2_ref.of_regval v) else
  if reg_name = "DBGDSCRint" then OPTION_MAP (\ v .  DBGDSCRint_ref.write_to v s) (DBGDSCRint_ref.of_regval v) else
  if reg_name = "DBGDTRRX_EL0" then OPTION_MAP (\ v .  DBGDTRRX_EL0_ref.write_to v s) (DBGDTRRX_EL0_ref.of_regval v) else
  if reg_name = "DBGDTRTX_EL0" then OPTION_MAP (\ v .  DBGDTRTX_EL0_ref.write_to v s) (DBGDTRTX_EL0_ref.of_regval v) else
  if reg_name = "DBGDTR_EL0" then OPTION_MAP (\ v .  DBGDTR_EL0_ref.write_to v s) (DBGDTR_EL0_ref.of_regval v) else
  if reg_name = "DBGWFAR" then OPTION_MAP (\ v .  DBGWFAR_ref.write_to v s) (DBGWFAR_ref.of_regval v) else
  if reg_name = "DCZID_EL0" then OPTION_MAP (\ v .  DCZID_EL0_ref.write_to v s) (DCZID_EL0_ref.of_regval v) else
  if reg_name = "DISR_EL1" then OPTION_MAP (\ v .  DISR_EL1_ref.write_to v s) (DISR_EL1_ref.of_regval v) else
  if reg_name = "EDECCR" then OPTION_MAP (\ v .  EDECCR_ref.write_to v s) (EDECCR_ref.of_regval v) else
  if reg_name = "EDECR" then OPTION_MAP (\ v .  EDECR_ref.write_to v s) (EDECR_ref.of_regval v) else
  if reg_name = "EDESR" then OPTION_MAP (\ v .  EDESR_ref.write_to v s) (EDESR_ref.of_regval v) else
  if reg_name = "EDLSR" then OPTION_MAP (\ v .  EDLSR_ref.write_to v s) (EDLSR_ref.of_regval v) else
  if reg_name = "EDPCSR" then OPTION_MAP (\ v .  EDPCSR_ref.write_to v s) (EDPCSR_ref.of_regval v) else
  if reg_name = "EDPFR" then OPTION_MAP (\ v .  EDPFR_ref.write_to v s) (EDPFR_ref.of_regval v) else
  if reg_name = "EDPRCR" then OPTION_MAP (\ v .  EDPRCR_ref.write_to v s) (EDPRCR_ref.of_regval v) else
  if reg_name = "EDPRSR" then OPTION_MAP (\ v .  EDPRSR_ref.write_to v s) (EDPRSR_ref.of_regval v) else
  if reg_name = "EDVIDSR" then OPTION_MAP (\ v .  EDVIDSR_ref.write_to v s) (EDVIDSR_ref.of_regval v) else
  if reg_name = "ELR_EL0" then OPTION_MAP (\ v .  ELR_EL0_ref.write_to v s) (ELR_EL0_ref.of_regval v) else
  if reg_name = "ESP_EL0" then OPTION_MAP (\ v .  ESP_EL0_ref.write_to v s) (ESP_EL0_ref.of_regval v) else
  if reg_name = "ESR_EL0" then OPTION_MAP (\ v .  ESR_EL0_ref.write_to v s) (ESR_EL0_ref.of_regval v) else
  if reg_name = "EventRegister" then OPTION_MAP (\ v .  EventRegister_ref.write_to v s) (EventRegister_ref.of_regval v) else
  if reg_name = "FAR_EL0" then OPTION_MAP (\ v .  FAR_EL0_ref.write_to v s) (FAR_EL0_ref.of_regval v) else
  if reg_name = "FCSEIDR" then OPTION_MAP (\ v .  FCSEIDR_ref.write_to v s) (FCSEIDR_ref.of_regval v) else
  if reg_name = "FPCR" then OPTION_MAP (\ v .  FPCR_ref.write_to v s) (FPCR_ref.of_regval v) else
  if reg_name = "FPEXC32_EL2" then OPTION_MAP (\ v .  FPEXC32_EL2_ref.write_to v s) (FPEXC32_EL2_ref.of_regval v) else
  if reg_name = "FPSCR" then OPTION_MAP (\ v .  FPSCR_ref.write_to v s) (FPSCR_ref.of_regval v) else
  if reg_name = "FPSID" then OPTION_MAP (\ v .  FPSID_ref.write_to v s) (FPSID_ref.of_regval v) else
  if reg_name = "FPSR" then OPTION_MAP (\ v .  FPSR_ref.write_to v s) (FPSR_ref.of_regval v) else
  if reg_name = "GCR_EL1" then OPTION_MAP (\ v .  GCR_EL1_ref.write_to v s) (GCR_EL1_ref.of_regval v) else
  if reg_name = "HACR_EL2" then OPTION_MAP (\ v .  HACR_EL2_ref.write_to v s) (HACR_EL2_ref.of_regval v) else
  if reg_name = "HSTR_EL2" then OPTION_MAP (\ v .  HSTR_EL2_ref.write_to v s) (HSTR_EL2_ref.of_regval v) else
  if reg_name = "ICC_AP0R_EL1" then OPTION_MAP (\ v .  ICC_AP0R_EL1_ref.write_to v s) (ICC_AP0R_EL1_ref.of_regval v) else
  if reg_name = "ICC_AP1R_EL1" then OPTION_MAP (\ v .  ICC_AP1R_EL1_ref.write_to v s) (ICC_AP1R_EL1_ref.of_regval v) else
  if reg_name = "ICC_ASGI1R_EL1" then OPTION_MAP (\ v .  ICC_ASGI1R_EL1_ref.write_to v s) (ICC_ASGI1R_EL1_ref.of_regval v) else
  if reg_name = "ICC_BPR0_EL1" then OPTION_MAP (\ v .  ICC_BPR0_EL1_ref.write_to v s) (ICC_BPR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_BPR1_EL1_NS" then OPTION_MAP (\ v .  ICC_BPR1_EL1_NS_ref.write_to v s) (ICC_BPR1_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_BPR1_EL1_S" then OPTION_MAP (\ v .  ICC_BPR1_EL1_S_ref.write_to v s) (ICC_BPR1_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_CTLR_EL1_NS" then OPTION_MAP (\ v .  ICC_CTLR_EL1_NS_ref.write_to v s) (ICC_CTLR_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_CTLR_EL1_S" then OPTION_MAP (\ v .  ICC_CTLR_EL1_S_ref.write_to v s) (ICC_CTLR_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_CTLR_EL3" then OPTION_MAP (\ v .  ICC_CTLR_EL3_ref.write_to v s) (ICC_CTLR_EL3_ref.of_regval v) else
  if reg_name = "ICC_DIR_EL1" then OPTION_MAP (\ v .  ICC_DIR_EL1_ref.write_to v s) (ICC_DIR_EL1_ref.of_regval v) else
  if reg_name = "ICC_EOIR0_EL1" then OPTION_MAP (\ v .  ICC_EOIR0_EL1_ref.write_to v s) (ICC_EOIR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_EOIR1_EL1" then OPTION_MAP (\ v .  ICC_EOIR1_EL1_ref.write_to v s) (ICC_EOIR1_EL1_ref.of_regval v) else
  if reg_name = "ICC_HPPIR0_EL1" then OPTION_MAP (\ v .  ICC_HPPIR0_EL1_ref.write_to v s) (ICC_HPPIR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_HPPIR1_EL1" then OPTION_MAP (\ v .  ICC_HPPIR1_EL1_ref.write_to v s) (ICC_HPPIR1_EL1_ref.of_regval v) else
  if reg_name = "ICC_IAR0_EL1" then OPTION_MAP (\ v .  ICC_IAR0_EL1_ref.write_to v s) (ICC_IAR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_IAR1_EL1" then OPTION_MAP (\ v .  ICC_IAR1_EL1_ref.write_to v s) (ICC_IAR1_EL1_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN0_EL1" then OPTION_MAP (\ v .  ICC_IGRPEN0_EL1_ref.write_to v s) (ICC_IGRPEN0_EL1_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN1_EL1_NS" then OPTION_MAP (\ v .  ICC_IGRPEN1_EL1_NS_ref.write_to v s) (ICC_IGRPEN1_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN1_EL1_S" then OPTION_MAP (\ v .  ICC_IGRPEN1_EL1_S_ref.write_to v s) (ICC_IGRPEN1_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN1_EL3" then OPTION_MAP (\ v .  ICC_IGRPEN1_EL3_ref.write_to v s) (ICC_IGRPEN1_EL3_ref.of_regval v) else
  if reg_name = "ICC_PMR_EL1" then OPTION_MAP (\ v .  ICC_PMR_EL1_ref.write_to v s) (ICC_PMR_EL1_ref.of_regval v) else
  if reg_name = "ICC_RPR_EL1" then OPTION_MAP (\ v .  ICC_RPR_EL1_ref.write_to v s) (ICC_RPR_EL1_ref.of_regval v) else
  if reg_name = "ICC_SGI0R_EL1" then OPTION_MAP (\ v .  ICC_SGI0R_EL1_ref.write_to v s) (ICC_SGI0R_EL1_ref.of_regval v) else
  if reg_name = "ICC_SGI1R_EL1" then OPTION_MAP (\ v .  ICC_SGI1R_EL1_ref.write_to v s) (ICC_SGI1R_EL1_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL1_NS" then OPTION_MAP (\ v .  ICC_SRE_EL1_NS_ref.write_to v s) (ICC_SRE_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL1_S" then OPTION_MAP (\ v .  ICC_SRE_EL1_S_ref.write_to v s) (ICC_SRE_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL2" then OPTION_MAP (\ v .  ICC_SRE_EL2_ref.write_to v s) (ICC_SRE_EL2_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL3" then OPTION_MAP (\ v .  ICC_SRE_EL3_ref.write_to v s) (ICC_SRE_EL3_ref.of_regval v) else
  if reg_name = "ICH_AP0R_EL2" then OPTION_MAP (\ v .  ICH_AP0R_EL2_ref.write_to v s) (ICH_AP0R_EL2_ref.of_regval v) else
  if reg_name = "ICH_AP1R_EL2" then OPTION_MAP (\ v .  ICH_AP1R_EL2_ref.write_to v s) (ICH_AP1R_EL2_ref.of_regval v) else
  if reg_name = "ICH_EISR_EL2" then OPTION_MAP (\ v .  ICH_EISR_EL2_ref.write_to v s) (ICH_EISR_EL2_ref.of_regval v) else
  if reg_name = "ICH_ELRSR_EL2" then OPTION_MAP (\ v .  ICH_ELRSR_EL2_ref.write_to v s) (ICH_ELRSR_EL2_ref.of_regval v) else
  if reg_name = "ICH_HCR_EL2" then OPTION_MAP (\ v .  ICH_HCR_EL2_ref.write_to v s) (ICH_HCR_EL2_ref.of_regval v) else
  if reg_name = "ICH_MISR_EL2" then OPTION_MAP (\ v .  ICH_MISR_EL2_ref.write_to v s) (ICH_MISR_EL2_ref.of_regval v) else
  if reg_name = "ICH_VMCR_EL2" then OPTION_MAP (\ v .  ICH_VMCR_EL2_ref.write_to v s) (ICH_VMCR_EL2_ref.of_regval v) else
  if reg_name = "ICH_VTR_EL2" then OPTION_MAP (\ v .  ICH_VTR_EL2_ref.write_to v s) (ICH_VTR_EL2_ref.of_regval v) else
  if reg_name = "ICV_AP0R_EL1" then OPTION_MAP (\ v .  ICV_AP0R_EL1_ref.write_to v s) (ICV_AP0R_EL1_ref.of_regval v) else
  if reg_name = "ICV_AP1R_EL1" then OPTION_MAP (\ v .  ICV_AP1R_EL1_ref.write_to v s) (ICV_AP1R_EL1_ref.of_regval v) else
  if reg_name = "ICV_BPR0_EL1" then OPTION_MAP (\ v .  ICV_BPR0_EL1_ref.write_to v s) (ICV_BPR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_BPR1_EL1" then OPTION_MAP (\ v .  ICV_BPR1_EL1_ref.write_to v s) (ICV_BPR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_CTLR_EL1" then OPTION_MAP (\ v .  ICV_CTLR_EL1_ref.write_to v s) (ICV_CTLR_EL1_ref.of_regval v) else
  if reg_name = "ICV_DIR_EL1" then OPTION_MAP (\ v .  ICV_DIR_EL1_ref.write_to v s) (ICV_DIR_EL1_ref.of_regval v) else
  if reg_name = "ICV_EOIR0_EL1" then OPTION_MAP (\ v .  ICV_EOIR0_EL1_ref.write_to v s) (ICV_EOIR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_EOIR1_EL1" then OPTION_MAP (\ v .  ICV_EOIR1_EL1_ref.write_to v s) (ICV_EOIR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_HPPIR0_EL1" then OPTION_MAP (\ v .  ICV_HPPIR0_EL1_ref.write_to v s) (ICV_HPPIR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_HPPIR1_EL1" then OPTION_MAP (\ v .  ICV_HPPIR1_EL1_ref.write_to v s) (ICV_HPPIR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_IAR0_EL1" then OPTION_MAP (\ v .  ICV_IAR0_EL1_ref.write_to v s) (ICV_IAR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_IAR1_EL1" then OPTION_MAP (\ v .  ICV_IAR1_EL1_ref.write_to v s) (ICV_IAR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_IGRPEN0_EL1" then OPTION_MAP (\ v .  ICV_IGRPEN0_EL1_ref.write_to v s) (ICV_IGRPEN0_EL1_ref.of_regval v) else
  if reg_name = "ICV_IGRPEN1_EL1" then OPTION_MAP (\ v .  ICV_IGRPEN1_EL1_ref.write_to v s) (ICV_IGRPEN1_EL1_ref.of_regval v) else
  if reg_name = "ICV_PMR_EL1" then OPTION_MAP (\ v .  ICV_PMR_EL1_ref.write_to v s) (ICV_PMR_EL1_ref.of_regval v) else
  if reg_name = "ICV_RPR_EL1" then OPTION_MAP (\ v .  ICV_RPR_EL1_ref.write_to v s) (ICV_RPR_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64AFR0_EL1" then OPTION_MAP (\ v .  ID_AA64AFR0_EL1_ref.write_to v s) (ID_AA64AFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64AFR1_EL1" then OPTION_MAP (\ v .  ID_AA64AFR1_EL1_ref.write_to v s) (ID_AA64AFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64DFR1_EL1" then OPTION_MAP (\ v .  ID_AA64DFR1_EL1_ref.write_to v s) (ID_AA64DFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64ISAR0_EL1" then OPTION_MAP (\ v .  ID_AA64ISAR0_EL1_ref.write_to v s) (ID_AA64ISAR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64ISAR1_EL1" then OPTION_MAP (\ v .  ID_AA64ISAR1_EL1_ref.write_to v s) (ID_AA64ISAR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64MMFR0_EL1" then OPTION_MAP (\ v .  ID_AA64MMFR0_EL1_ref.write_to v s) (ID_AA64MMFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64MMFR1_EL1" then OPTION_MAP (\ v .  ID_AA64MMFR1_EL1_ref.write_to v s) (ID_AA64MMFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64MMFR2_EL1" then OPTION_MAP (\ v .  ID_AA64MMFR2_EL1_ref.write_to v s) (ID_AA64MMFR2_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64PFR0_EL1" then OPTION_MAP (\ v .  ID_AA64PFR0_EL1_ref.write_to v s) (ID_AA64PFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64PFR1_EL1" then OPTION_MAP (\ v .  ID_AA64PFR1_EL1_ref.write_to v s) (ID_AA64PFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AFR0_EL1" then OPTION_MAP (\ v .  ID_AFR0_EL1_ref.write_to v s) (ID_AFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_DFR0_EL1" then OPTION_MAP (\ v .  ID_DFR0_EL1_ref.write_to v s) (ID_DFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR0_EL1" then OPTION_MAP (\ v .  ID_ISAR0_EL1_ref.write_to v s) (ID_ISAR0_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR1_EL1" then OPTION_MAP (\ v .  ID_ISAR1_EL1_ref.write_to v s) (ID_ISAR1_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR2_EL1" then OPTION_MAP (\ v .  ID_ISAR2_EL1_ref.write_to v s) (ID_ISAR2_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR3_EL1" then OPTION_MAP (\ v .  ID_ISAR3_EL1_ref.write_to v s) (ID_ISAR3_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR4_EL1" then OPTION_MAP (\ v .  ID_ISAR4_EL1_ref.write_to v s) (ID_ISAR4_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR5_EL1" then OPTION_MAP (\ v .  ID_ISAR5_EL1_ref.write_to v s) (ID_ISAR5_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR6_EL1" then OPTION_MAP (\ v .  ID_ISAR6_EL1_ref.write_to v s) (ID_ISAR6_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR0_EL1" then OPTION_MAP (\ v .  ID_MMFR0_EL1_ref.write_to v s) (ID_MMFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR1_EL1" then OPTION_MAP (\ v .  ID_MMFR1_EL1_ref.write_to v s) (ID_MMFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR2_EL1" then OPTION_MAP (\ v .  ID_MMFR2_EL1_ref.write_to v s) (ID_MMFR2_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR3_EL1" then OPTION_MAP (\ v .  ID_MMFR3_EL1_ref.write_to v s) (ID_MMFR3_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR4_EL1" then OPTION_MAP (\ v .  ID_MMFR4_EL1_ref.write_to v s) (ID_MMFR4_EL1_ref.of_regval v) else
  if reg_name = "ID_PFR0_EL1" then OPTION_MAP (\ v .  ID_PFR0_EL1_ref.write_to v s) (ID_PFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_PFR1_EL1" then OPTION_MAP (\ v .  ID_PFR1_EL1_ref.write_to v s) (ID_PFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_PFR2_EL1" then OPTION_MAP (\ v .  ID_PFR2_EL1_ref.write_to v s) (ID_PFR2_EL1_ref.of_regval v) else
  if reg_name = "ISR_EL1" then OPTION_MAP (\ v .  ISR_EL1_ref.write_to v s) (ISR_EL1_ref.of_regval v) else
  if reg_name = "LORC_EL1" then OPTION_MAP (\ v .  LORC_EL1_ref.write_to v s) (LORC_EL1_ref.of_regval v) else
  if reg_name = "LOREA_EL1" then OPTION_MAP (\ v .  LOREA_EL1_ref.write_to v s) (LOREA_EL1_ref.of_regval v) else
  if reg_name = "LORID_EL1" then OPTION_MAP (\ v .  LORID_EL1_ref.write_to v s) (LORID_EL1_ref.of_regval v) else
  if reg_name = "LORN_EL1" then OPTION_MAP (\ v .  LORN_EL1_ref.write_to v s) (LORN_EL1_ref.of_regval v) else
  if reg_name = "LORSA_EL1" then OPTION_MAP (\ v .  LORSA_EL1_ref.write_to v s) (LORSA_EL1_ref.of_regval v) else
  if reg_name = "MDCCINT_EL1" then OPTION_MAP (\ v .  MDCCINT_EL1_ref.write_to v s) (MDCCINT_EL1_ref.of_regval v) else
  if reg_name = "MDCCSR_EL0" then OPTION_MAP (\ v .  MDCCSR_EL0_ref.write_to v s) (MDCCSR_EL0_ref.of_regval v) else
  if reg_name = "MDRAR_EL1" then OPTION_MAP (\ v .  MDRAR_EL1_ref.write_to v s) (MDRAR_EL1_ref.of_regval v) else
  if reg_name = "MIDR_EL1" then OPTION_MAP (\ v .  MIDR_EL1_ref.write_to v s) (MIDR_EL1_ref.of_regval v) else
  if reg_name = "MVFR0_EL1" then OPTION_MAP (\ v .  MVFR0_EL1_ref.write_to v s) (MVFR0_EL1_ref.of_regval v) else
  if reg_name = "MVFR1_EL1" then OPTION_MAP (\ v .  MVFR1_EL1_ref.write_to v s) (MVFR1_EL1_ref.of_regval v) else
  if reg_name = "MVFR2_EL1" then OPTION_MAP (\ v .  MVFR2_EL1_ref.write_to v s) (MVFR2_EL1_ref.of_regval v) else
  if reg_name = "NSACR" then OPTION_MAP (\ v .  NSACR_ref.write_to v s) (NSACR_ref.of_regval v) else
  if reg_name = "OSDTRRX_EL1" then OPTION_MAP (\ v .  OSDTRRX_EL1_ref.write_to v s) (OSDTRRX_EL1_ref.of_regval v) else
  if reg_name = "OSDTRTX_EL1" then OPTION_MAP (\ v .  OSDTRTX_EL1_ref.write_to v s) (OSDTRTX_EL1_ref.of_regval v) else
  if reg_name = "OSECCR_EL1" then OPTION_MAP (\ v .  OSECCR_EL1_ref.write_to v s) (OSECCR_EL1_ref.of_regval v) else
  if reg_name = "OSLAR_EL1" then OPTION_MAP (\ v .  OSLAR_EL1_ref.write_to v s) (OSLAR_EL1_ref.of_regval v) else
  if reg_name = "PAR_EL1" then OPTION_MAP (\ v .  PAR_EL1_ref.write_to v s) (PAR_EL1_ref.of_regval v) else
  if reg_name = "PAR_S" then OPTION_MAP (\ v .  PAR_S_ref.write_to v s) (PAR_S_ref.of_regval v) else
  if reg_name = "PMCCFILTR_EL0" then OPTION_MAP (\ v .  PMCCFILTR_EL0_ref.write_to v s) (PMCCFILTR_EL0_ref.of_regval v) else
  if reg_name = "PMCCNTR_EL0" then OPTION_MAP (\ v .  PMCCNTR_EL0_ref.write_to v s) (PMCCNTR_EL0_ref.of_regval v) else
  if reg_name = "PMCEID0_EL0" then OPTION_MAP (\ v .  PMCEID0_EL0_ref.write_to v s) (PMCEID0_EL0_ref.of_regval v) else
  if reg_name = "PMCEID1_EL0" then OPTION_MAP (\ v .  PMCEID1_EL0_ref.write_to v s) (PMCEID1_EL0_ref.of_regval v) else
  if reg_name = "PMCNTENCLR_EL0" then OPTION_MAP (\ v .  PMCNTENCLR_EL0_ref.write_to v s) (PMCNTENCLR_EL0_ref.of_regval v) else
  if reg_name = "PMCNTENSET_EL0" then OPTION_MAP (\ v .  PMCNTENSET_EL0_ref.write_to v s) (PMCNTENSET_EL0_ref.of_regval v) else
  if reg_name = "PMCR_EL0" then OPTION_MAP (\ v .  PMCR_EL0_ref.write_to v s) (PMCR_EL0_ref.of_regval v) else
  if reg_name = "PMEVCNTR_EL0" then OPTION_MAP (\ v .  PMEVCNTR_EL0_ref.write_to v s) (PMEVCNTR_EL0_ref.of_regval v) else
  if reg_name = "PMEVTYPER_EL0" then OPTION_MAP (\ v .  PMEVTYPER_EL0_ref.write_to v s) (PMEVTYPER_EL0_ref.of_regval v) else
  if reg_name = "PMINTENCLR_EL1" then OPTION_MAP (\ v .  PMINTENCLR_EL1_ref.write_to v s) (PMINTENCLR_EL1_ref.of_regval v) else
  if reg_name = "PMINTENSET_EL1" then OPTION_MAP (\ v .  PMINTENSET_EL1_ref.write_to v s) (PMINTENSET_EL1_ref.of_regval v) else
  if reg_name = "PMLSR" then OPTION_MAP (\ v .  PMLSR_ref.write_to v s) (PMLSR_ref.of_regval v) else
  if reg_name = "PMMIR" then OPTION_MAP (\ v .  PMMIR_ref.write_to v s) (PMMIR_ref.of_regval v) else
  if reg_name = "PMMIR_EL1" then OPTION_MAP (\ v .  PMMIR_EL1_ref.write_to v s) (PMMIR_EL1_ref.of_regval v) else
  if reg_name = "PMOVSCLR_EL0" then OPTION_MAP (\ v .  PMOVSCLR_EL0_ref.write_to v s) (PMOVSCLR_EL0_ref.of_regval v) else
  if reg_name = "PMOVSSET_EL0" then OPTION_MAP (\ v .  PMOVSSET_EL0_ref.write_to v s) (PMOVSSET_EL0_ref.of_regval v) else
  if reg_name = "PMPCSR" then OPTION_MAP (\ v .  PMPCSR_ref.write_to v s) (PMPCSR_ref.of_regval v) else
  if reg_name = "PMSELR_EL0" then OPTION_MAP (\ v .  PMSELR_EL0_ref.write_to v s) (PMSELR_EL0_ref.of_regval v) else
  if reg_name = "PMSWINC_EL0" then OPTION_MAP (\ v .  PMSWINC_EL0_ref.write_to v s) (PMSWINC_EL0_ref.of_regval v) else
  if reg_name = "PMUSERENR_EL0" then OPTION_MAP (\ v .  PMUSERENR_EL0_ref.write_to v s) (PMUSERENR_EL0_ref.of_regval v) else
  if reg_name = "PMVIDSR" then OPTION_MAP (\ v .  PMVIDSR_ref.write_to v s) (PMVIDSR_ref.of_regval v) else
  if reg_name = "PMXEVCNTR_EL0" then OPTION_MAP (\ v .  PMXEVCNTR_EL0_ref.write_to v s) (PMXEVCNTR_EL0_ref.of_regval v) else
  if reg_name = "PMXEVTYPER_EL0" then OPTION_MAP (\ v .  PMXEVTYPER_EL0_ref.write_to v s) (PMXEVTYPER_EL0_ref.of_regval v) else
  if reg_name = "RC" then OPTION_MAP (\ v .  RC_ref.write_to v s) (RC_ref.of_regval v) else
  if reg_name = "RD_EL0" then OPTION_MAP (\ v .  RD_EL0_ref.write_to v s) (RD_EL0_ref.of_regval v) else
  if reg_name = "REVIDR_EL1" then OPTION_MAP (\ v .  REVIDR_EL1_ref.write_to v s) (REVIDR_EL1_ref.of_regval v) else
  if reg_name = "RGSR_EL1" then OPTION_MAP (\ v .  RGSR_EL1_ref.write_to v s) (RGSR_EL1_ref.of_regval v) else
  if reg_name = "RMR_EL1" then OPTION_MAP (\ v .  RMR_EL1_ref.write_to v s) (RMR_EL1_ref.of_regval v) else
  if reg_name = "RMR_EL2" then OPTION_MAP (\ v .  RMR_EL2_ref.write_to v s) (RMR_EL2_ref.of_regval v) else
  if reg_name = "RMR_EL3" then OPTION_MAP (\ v .  RMR_EL3_ref.write_to v s) (RMR_EL3_ref.of_regval v) else
  if reg_name = "RMUID_EL0" then OPTION_MAP (\ v .  RMUID_EL0_ref.write_to v s) (RMUID_EL0_ref.of_regval v) else
  if reg_name = "RNDR" then OPTION_MAP (\ v .  RNDR_ref.write_to v s) (RNDR_ref.of_regval v) else
  if reg_name = "RNDRRS" then OPTION_MAP (\ v .  RNDRRS_ref.write_to v s) (RNDRRS_ref.of_regval v) else
  if reg_name = "RVBAR" then OPTION_MAP (\ v .  RVBAR_ref.write_to v s) (RVBAR_ref.of_regval v) else
  if reg_name = "RVBAR_EL1" then OPTION_MAP (\ v .  RVBAR_EL1_ref.write_to v s) (RVBAR_EL1_ref.of_regval v) else
  if reg_name = "RVBAR_EL2" then OPTION_MAP (\ v .  RVBAR_EL2_ref.write_to v s) (RVBAR_EL2_ref.of_regval v) else
  if reg_name = "RVBAR_EL3" then OPTION_MAP (\ v .  RVBAR_EL3_ref.write_to v s) (RVBAR_EL3_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL0" then OPTION_MAP (\ v .  SCXTNUM_EL0_ref.write_to v s) (SCXTNUM_EL0_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL1" then OPTION_MAP (\ v .  SCXTNUM_EL1_ref.write_to v s) (SCXTNUM_EL1_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL2" then OPTION_MAP (\ v .  SCXTNUM_EL2_ref.write_to v s) (SCXTNUM_EL2_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL3" then OPTION_MAP (\ v .  SCXTNUM_EL3_ref.write_to v s) (SCXTNUM_EL3_ref.of_regval v) else
  if reg_name = "SDER32_EL2" then OPTION_MAP (\ v .  SDER32_EL2_ref.write_to v s) (SDER32_EL2_ref.of_regval v) else
  if reg_name = "SPSR_EL0" then OPTION_MAP (\ v .  SPSR_EL0_ref.write_to v s) (SPSR_EL0_ref.of_regval v) else
  if reg_name = "SP_EL0" then OPTION_MAP (\ v .  SP_EL0_ref.write_to v s) (SP_EL0_ref.of_regval v) else
  if reg_name = "SP_EL1" then OPTION_MAP (\ v .  SP_EL1_ref.write_to v s) (SP_EL1_ref.of_regval v) else
  if reg_name = "SP_EL2" then OPTION_MAP (\ v .  SP_EL2_ref.write_to v s) (SP_EL2_ref.of_regval v) else
  if reg_name = "SP_EL3" then OPTION_MAP (\ v .  SP_EL3_ref.write_to v s) (SP_EL3_ref.of_regval v) else
  if reg_name = "ShouldAdvanceIT" then OPTION_MAP (\ v .  ShouldAdvanceIT_ref.write_to v s) (ShouldAdvanceIT_ref.of_regval v) else
  if reg_name = "TLBTR" then OPTION_MAP (\ v .  TLBTR_ref.write_to v s) (TLBTR_ref.of_regval v) else
  if reg_name = "TPIDRRO_EL0" then OPTION_MAP (\ v .  TPIDRRO_EL0_ref.write_to v s) (TPIDRRO_EL0_ref.of_regval v) else
  if reg_name = "TPIDR_EL0" then OPTION_MAP (\ v .  TPIDR_EL0_ref.write_to v s) (TPIDR_EL0_ref.of_regval v) else
  if reg_name = "TPIDR_EL1" then OPTION_MAP (\ v .  TPIDR_EL1_ref.write_to v s) (TPIDR_EL1_ref.of_regval v) else
  if reg_name = "TPIDR_EL2" then OPTION_MAP (\ v .  TPIDR_EL2_ref.write_to v s) (TPIDR_EL2_ref.of_regval v) else
  if reg_name = "TPIDR_EL3" then OPTION_MAP (\ v .  TPIDR_EL3_ref.write_to v s) (TPIDR_EL3_ref.of_regval v) else
  if reg_name = "TRFCR_EL1" then OPTION_MAP (\ v .  TRFCR_EL1_ref.write_to v s) (TRFCR_EL1_ref.of_regval v) else
  if reg_name = "TRFCR_EL2" then OPTION_MAP (\ v .  TRFCR_EL2_ref.write_to v s) (TRFCR_EL2_ref.of_regval v) else
  if reg_name = "VBAR_EL0" then OPTION_MAP (\ v .  VBAR_EL0_ref.write_to v s) (VBAR_EL0_ref.of_regval v) else
  if reg_name = "VDISR_EL2" then OPTION_MAP (\ v .  VDISR_EL2_ref.write_to v s) (VDISR_EL2_ref.of_regval v) else
  if reg_name = "VMPIDR_EL2" then OPTION_MAP (\ v .  VMPIDR_EL2_ref.write_to v s) (VMPIDR_EL2_ref.of_regval v) else
  if reg_name = "VNCR_EL2" then OPTION_MAP (\ v .  VNCR_EL2_ref.write_to v s) (VNCR_EL2_ref.of_regval v) else
  if reg_name = "VPIDR_EL2" then OPTION_MAP (\ v .  VPIDR_EL2_ref.write_to v s) (VPIDR_EL2_ref.of_regval v) else
  if reg_name = "_V" then OPTION_MAP (\ v .  V_ref.write_to v s) (V_ref.of_regval v) else
  if reg_name = "__currentCond" then OPTION_MAP (\ v .  currentCond_ref.write_to v s) (currentCond_ref.of_regval v) else
  if reg_name = "__exclusive_block_address" then OPTION_MAP (\ v .  exclusive_block_address_ref.write_to v s) (exclusive_block_address_ref.of_regval v) else
  if reg_name = "__saved_exception_level" then OPTION_MAP (\ v .  saved_exception_level_ref.write_to v s) (saved_exception_level_ref.of_regval v) else
  if reg_name = "__unconditional" then OPTION_MAP (\ v .  unconditional_ref.write_to v s) (unconditional_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_S" then OPTION_MAP (\ v .  CONTEXTIDR_S_ref.write_to v s) (CONTEXTIDR_S_ref.of_regval v) else
  if reg_name = "_GTEExtObsAccess" then OPTION_MAP (\ v .  GTEExtObsAccess_ref.write_to v s) (GTEExtObsAccess_ref.of_regval v) else
  if reg_name = "_GTEExtObsAddress" then OPTION_MAP (\ v .  GTEExtObsAddress_ref.write_to v s) (GTEExtObsAddress_ref.of_regval v) else
  if reg_name = "_GTEExtObsData" then OPTION_MAP (\ v .  GTEExtObsData_ref.write_to v s) (GTEExtObsData_ref.of_regval v) else
  if reg_name = "_GTEExtObsResult" then OPTION_MAP (\ v .  GTEExtObsResult_ref.write_to v s) (GTEExtObsResult_ref.of_regval v) else
  if reg_name = "_GTEExtObsActive" then OPTION_MAP (\ v .  GTEExtObsActive_ref.write_to v s) (GTEExtObsActive_ref.of_regval v) else
  if reg_name = "_GTEExtObsCount" then OPTION_MAP (\ v .  GTEExtObsCount_ref.write_to v s) (GTEExtObsCount_ref.of_regval v) else
  if reg_name = "_GTEExtObsIndex" then OPTION_MAP (\ v .  GTEExtObsIndex_ref.write_to v s) (GTEExtObsIndex_ref.of_regval v) else
  if reg_name = "_GTEExtObsResultIndex" then OPTION_MAP (\ v .  GTEExtObsResultIndex_ref.write_to v s) (GTEExtObsResultIndex_ref.of_regval v) else
  if reg_name = "_GTEExtObsResultIsAddress" then OPTION_MAP (\ v .  GTEExtObsResultIsAddress_ref.write_to v s) (GTEExtObsResultIsAddress_ref.of_regval v) else
  if reg_name = "_GTEListParam0" then OPTION_MAP (\ v .  GTEListParam0_ref.write_to v s) (GTEListParam0_ref.of_regval v) else
  if reg_name = "_GTEListParam1" then OPTION_MAP (\ v .  GTEListParam1_ref.write_to v s) (GTEListParam1_ref.of_regval v) else
  if reg_name = "_GTEParam" then OPTION_MAP (\ v .  GTEParam_ref.write_to v s) (GTEParam_ref.of_regval v) else
  if reg_name = "_GTE_AS_RecordedAccess" then OPTION_MAP (\ v .  GTE_AS_RecordedAccess_ref.write_to v s) (GTE_AS_RecordedAccess_ref.of_regval v) else
  if reg_name = "_GTE_AS_RecordedAddress" then OPTION_MAP (\ v .  GTE_AS_RecordedAddress_ref.write_to v s) (GTE_AS_RecordedAddress_ref.of_regval v) else
  if reg_name = "_GTE_AS_RecordedData" then OPTION_MAP (\ v .  GTE_AS_RecordedData_ref.write_to v s) (GTE_AS_RecordedData_ref.of_regval v) else
  if reg_name = "_GTE_PPU_Access" then OPTION_MAP (\ v .  GTE_PPU_Access_ref.write_to v s) (GTE_PPU_Access_ref.of_regval v) else
  if reg_name = "_GTE_PPU_Address" then OPTION_MAP (\ v .  GTE_PPU_Address_ref.write_to v s) (GTE_PPU_Address_ref.of_regval v) else
  if reg_name = "_GTE_PPU_SizeEn" then OPTION_MAP (\ v .  GTE_PPU_SizeEn_ref.write_to v s) (GTE_PPU_SizeEn_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi1" then OPTION_MAP (\ v .  AbortRgn64Hi1_ref.write_to v s) (AbortRgn64Hi1_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi1_Hi" then OPTION_MAP (\ v .  AbortRgn64Hi1_Hi_ref.write_to v s) (AbortRgn64Hi1_Hi_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi2" then OPTION_MAP (\ v .  AbortRgn64Hi2_ref.write_to v s) (AbortRgn64Hi2_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi2_Hi" then OPTION_MAP (\ v .  AbortRgn64Hi2_Hi_ref.write_to v s) (AbortRgn64Hi2_Hi_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo1" then OPTION_MAP (\ v .  AbortRgn64Lo1_ref.write_to v s) (AbortRgn64Lo1_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo1_Hi" then OPTION_MAP (\ v .  AbortRgn64Lo1_Hi_ref.write_to v s) (AbortRgn64Lo1_Hi_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo2" then OPTION_MAP (\ v .  AbortRgn64Lo2_ref.write_to v s) (AbortRgn64Lo2_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo2_Hi" then OPTION_MAP (\ v .  AbortRgn64Lo2_Hi_ref.write_to v s) (AbortRgn64Lo2_Hi_ref.of_regval v) else
  if reg_name = "CNTCR" then OPTION_MAP (\ v .  CNTCR_ref.write_to v s) (CNTCR_ref.of_regval v) else
  if reg_name = "CNTCV" then OPTION_MAP (\ v .  CNTCV_ref.write_to v s) (CNTCV_ref.of_regval v) else
  if reg_name = "CNTFID0" then OPTION_MAP (\ v .  CNTFID0_ref.write_to v s) (CNTFID0_ref.of_regval v) else
  if reg_name = "CNTSR" then OPTION_MAP (\ v .  CNTSR_ref.write_to v s) (CNTSR_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_EL1" then OPTION_MAP (\ v .  CONTEXTIDR_EL1_ref.write_to v s) (CONTEXTIDR_EL1_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_EL2" then OPTION_MAP (\ v .  CONTEXTIDR_EL2_ref.write_to v s) (CONTEXTIDR_EL2_ref.of_regval v) else
  if reg_name = "DACR32_EL2" then OPTION_MAP (\ v .  DACR32_EL2_ref.write_to v s) (DACR32_EL2_ref.of_regval v) else
  if reg_name = "DACR_S" then OPTION_MAP (\ v .  DACR_S_ref.write_to v s) (DACR_S_ref.of_regval v) else
  if reg_name = "DBGBCR" then OPTION_MAP (\ v .  DBGBCR_ref.write_to v s) (DBGBCR_ref.of_regval v) else
  if reg_name = "DBGBCR_EL1" then OPTION_MAP (\ v .  DBGBCR_EL1_ref.write_to v s) (DBGBCR_EL1_ref.of_regval v) else
  if reg_name = "DBGBVR" then OPTION_MAP (\ v .  DBGBVR_ref.write_to v s) (DBGBVR_ref.of_regval v) else
  if reg_name = "DBGBVR_EL1" then OPTION_MAP (\ v .  DBGBVR_EL1_ref.write_to v s) (DBGBVR_EL1_ref.of_regval v) else
  if reg_name = "DBGBXVR" then OPTION_MAP (\ v .  DBGBXVR_ref.write_to v s) (DBGBXVR_ref.of_regval v) else
  if reg_name = "DBGDIDR" then OPTION_MAP (\ v .  DBGDIDR_ref.write_to v s) (DBGDIDR_ref.of_regval v) else
  if reg_name = "DBGEN" then OPTION_MAP (\ v .  DBGEN_ref.write_to v s) (DBGEN_ref.of_regval v) else
  if reg_name = "DBGPRCR_EL1" then OPTION_MAP (\ v .  DBGPRCR_EL1_ref.write_to v s) (DBGPRCR_EL1_ref.of_regval v) else
  if reg_name = "DBGVCR32_EL2" then OPTION_MAP (\ v .  DBGVCR32_EL2_ref.write_to v s) (DBGVCR32_EL2_ref.of_regval v) else
  if reg_name = "DBGWCR" then OPTION_MAP (\ v .  DBGWCR_ref.write_to v s) (DBGWCR_ref.of_regval v) else
  if reg_name = "DBGWCR_EL1" then OPTION_MAP (\ v .  DBGWCR_EL1_ref.write_to v s) (DBGWCR_EL1_ref.of_regval v) else
  if reg_name = "DBGWVR" then OPTION_MAP (\ v .  DBGWVR_ref.write_to v s) (DBGWVR_ref.of_regval v) else
  if reg_name = "DBGWVR_EL1" then OPTION_MAP (\ v .  DBGWVR_EL1_ref.write_to v s) (DBGWVR_EL1_ref.of_regval v) else
  if reg_name = "DLR_EL0" then OPTION_MAP (\ v .  DLR_EL0_ref.write_to v s) (DLR_EL0_ref.of_regval v) else
  if reg_name = "DSPSR_EL0" then OPTION_MAP (\ v .  DSPSR_EL0_ref.write_to v s) (DSPSR_EL0_ref.of_regval v) else
  if reg_name = "EDSCR" then OPTION_MAP (\ v .  EDSCR_ref.write_to v s) (EDSCR_ref.of_regval v) else
  if reg_name = "DFSR_S" then OPTION_MAP (\ v .  DFSR_S_ref.write_to v s) (DFSR_S_ref.of_regval v) else
  if reg_name = "ELR_EL3" then OPTION_MAP (\ v .  ELR_EL3_ref.write_to v s) (ELR_EL3_ref.of_regval v) else
  if reg_name = "ELR_EL1" then OPTION_MAP (\ v .  ELR_EL1_ref.write_to v s) (ELR_EL1_ref.of_regval v) else
  if reg_name = "ESR_EL3" then OPTION_MAP (\ v .  ESR_EL3_ref.write_to v s) (ESR_EL3_ref.of_regval v) else
  if reg_name = "ESR_EL1" then OPTION_MAP (\ v .  ESR_EL1_ref.write_to v s) (ESR_EL1_ref.of_regval v) else
  if reg_name = "ELR_EL2" then OPTION_MAP (\ v .  ELR_EL2_ref.write_to v s) (ELR_EL2_ref.of_regval v) else
  if reg_name = "TCR_EL2" then OPTION_MAP (\ v .  TCR_EL2_ref.write_to v s) (TCR_EL2_ref.of_regval v) else
  if reg_name = "ESR_EL2" then OPTION_MAP (\ v .  ESR_EL2_ref.write_to v s) (ESR_EL2_ref.of_regval v) else
  if reg_name = "FAR_EL1" then OPTION_MAP (\ v .  FAR_EL1_ref.write_to v s) (FAR_EL1_ref.of_regval v) else
  if reg_name = "FAR_EL2" then OPTION_MAP (\ v .  FAR_EL2_ref.write_to v s) (FAR_EL2_ref.of_regval v) else
  if reg_name = "FAR_EL3" then OPTION_MAP (\ v .  FAR_EL3_ref.write_to v s) (FAR_EL3_ref.of_regval v) else
  if reg_name = "HCR_EL2" then OPTION_MAP (\ v .  HCR_EL2_ref.write_to v s) (HCR_EL2_ref.of_regval v) else
  if reg_name = "HPFAR_EL2" then OPTION_MAP (\ v .  HPFAR_EL2_ref.write_to v s) (HPFAR_EL2_ref.of_regval v) else
  if reg_name = "ID_AA64DFR0_EL1" then OPTION_MAP (\ v .  ID_AA64DFR0_EL1_ref.write_to v s) (ID_AA64DFR0_EL1_ref.of_regval v) else
  if reg_name = "IFSR32_EL2" then OPTION_MAP (\ v .  IFSR32_EL2_ref.write_to v s) (IFSR32_EL2_ref.of_regval v) else
  if reg_name = "IFSR_S" then OPTION_MAP (\ v .  IFSR_S_ref.write_to v s) (IFSR_S_ref.of_regval v) else
  if reg_name = "InGuardedPage" then OPTION_MAP (\ v .  InGuardedPage_ref.write_to v s) (InGuardedPage_ref.of_regval v) else
  if reg_name = "LR_mon" then OPTION_MAP (\ v .  LR_mon_ref.write_to v s) (LR_mon_ref.of_regval v) else
  if reg_name = "MAIR0_S" then OPTION_MAP (\ v .  MAIR0_S_ref.write_to v s) (MAIR0_S_ref.of_regval v) else
  if reg_name = "MAIR1_S" then OPTION_MAP (\ v .  MAIR1_S_ref.write_to v s) (MAIR1_S_ref.of_regval v) else
  if reg_name = "MAIR_EL1" then OPTION_MAP (\ v .  MAIR_EL1_ref.write_to v s) (MAIR_EL1_ref.of_regval v) else
  if reg_name = "MAIR_EL2" then OPTION_MAP (\ v .  MAIR_EL2_ref.write_to v s) (MAIR_EL2_ref.of_regval v) else
  if reg_name = "MAIR_EL3" then OPTION_MAP (\ v .  MAIR_EL3_ref.write_to v s) (MAIR_EL3_ref.of_regval v) else
  if reg_name = "MDCR_EL2" then OPTION_MAP (\ v .  MDCR_EL2_ref.write_to v s) (MDCR_EL2_ref.of_regval v) else
  if reg_name = "MDCR_EL3" then OPTION_MAP (\ v .  MDCR_EL3_ref.write_to v s) (MDCR_EL3_ref.of_regval v) else
  if reg_name = "MDSCR_EL1" then OPTION_MAP (\ v .  MDSCR_EL1_ref.write_to v s) (MDSCR_EL1_ref.of_regval v) else
  if reg_name = "MPAM0_EL1" then OPTION_MAP (\ v .  MPAM0_EL1_ref.write_to v s) (MPAM0_EL1_ref.of_regval v) else
  if reg_name = "MPAM1_EL1" then OPTION_MAP (\ v .  MPAM1_EL1_ref.write_to v s) (MPAM1_EL1_ref.of_regval v) else
  if reg_name = "MPAM2_EL2" then OPTION_MAP (\ v .  MPAM2_EL2_ref.write_to v s) (MPAM2_EL2_ref.of_regval v) else
  if reg_name = "MPAM3_EL3" then OPTION_MAP (\ v .  MPAM3_EL3_ref.write_to v s) (MPAM3_EL3_ref.of_regval v) else
  if reg_name = "MPAMHCR_EL2" then OPTION_MAP (\ v .  MPAMHCR_EL2_ref.write_to v s) (MPAMHCR_EL2_ref.of_regval v) else
  if reg_name = "MPAMIDR_EL1" then OPTION_MAP (\ v .  MPAMIDR_EL1_ref.write_to v s) (MPAMIDR_EL1_ref.of_regval v) else
  if reg_name = "MPAMVPM0_EL2" then OPTION_MAP (\ v .  MPAMVPM0_EL2_ref.write_to v s) (MPAMVPM0_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM1_EL2" then OPTION_MAP (\ v .  MPAMVPM1_EL2_ref.write_to v s) (MPAMVPM1_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM2_EL2" then OPTION_MAP (\ v .  MPAMVPM2_EL2_ref.write_to v s) (MPAMVPM2_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM3_EL2" then OPTION_MAP (\ v .  MPAMVPM3_EL2_ref.write_to v s) (MPAMVPM3_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM4_EL2" then OPTION_MAP (\ v .  MPAMVPM4_EL2_ref.write_to v s) (MPAMVPM4_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM5_EL2" then OPTION_MAP (\ v .  MPAMVPM5_EL2_ref.write_to v s) (MPAMVPM5_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM6_EL2" then OPTION_MAP (\ v .  MPAMVPM6_EL2_ref.write_to v s) (MPAMVPM6_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM7_EL2" then OPTION_MAP (\ v .  MPAMVPM7_EL2_ref.write_to v s) (MPAMVPM7_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPMV_EL2" then OPTION_MAP (\ v .  MPAMVPMV_EL2_ref.write_to v s) (MPAMVPMV_EL2_ref.of_regval v) else
  if reg_name = "MPIDR_EL1" then OPTION_MAP (\ v .  MPIDR_EL1_ref.write_to v s) (MPIDR_EL1_ref.of_regval v) else
  if reg_name = "MVBAR" then OPTION_MAP (\ v .  MVBAR_ref.write_to v s) (MVBAR_ref.of_regval v) else
  if reg_name = "NMRR_S" then OPTION_MAP (\ v .  NMRR_S_ref.write_to v s) (NMRR_S_ref.of_regval v) else
  if reg_name = "OSDLR_EL1" then OPTION_MAP (\ v .  OSDLR_EL1_ref.write_to v s) (OSDLR_EL1_ref.of_regval v) else
  if reg_name = "OSLSR_EL1" then OPTION_MAP (\ v .  OSLSR_EL1_ref.write_to v s) (OSLSR_EL1_ref.of_regval v) else
  if reg_name = "PRRR_S" then OPTION_MAP (\ v .  PRRR_S_ref.write_to v s) (PRRR_S_ref.of_regval v) else
  if reg_name = "PSTATE" then OPTION_MAP (\ v .  PSTATE_ref.write_to v s) (PSTATE_ref.of_regval v) else
  if reg_name = "SCR_EL3" then OPTION_MAP (\ v .  SCR_EL3_ref.write_to v s) (SCR_EL3_ref.of_regval v) else
  if reg_name = "SCTLR_EL1" then OPTION_MAP (\ v .  SCTLR_EL1_ref.write_to v s) (SCTLR_EL1_ref.of_regval v) else
  if reg_name = "SCTLR_EL2" then OPTION_MAP (\ v .  SCTLR_EL2_ref.write_to v s) (SCTLR_EL2_ref.of_regval v) else
  if reg_name = "SCTLR_EL3" then OPTION_MAP (\ v .  SCTLR_EL3_ref.write_to v s) (SCTLR_EL3_ref.of_regval v) else
  if reg_name = "SCTLR_S" then OPTION_MAP (\ v .  SCTLR_S_ref.write_to v s) (SCTLR_S_ref.of_regval v) else
  if reg_name = "SDER32_EL3" then OPTION_MAP (\ v .  SDER32_EL3_ref.write_to v s) (SDER32_EL3_ref.of_regval v) else
  if reg_name = "SPIDEN" then OPTION_MAP (\ v .  SPIDEN_ref.write_to v s) (SPIDEN_ref.of_regval v) else
  if reg_name = "SPSR_EL1" then OPTION_MAP (\ v .  SPSR_EL1_ref.write_to v s) (SPSR_EL1_ref.of_regval v) else
  if reg_name = "SPSR_EL2" then OPTION_MAP (\ v .  SPSR_EL2_ref.write_to v s) (SPSR_EL2_ref.of_regval v) else
  if reg_name = "SPSR_EL3" then OPTION_MAP (\ v .  SPSR_EL3_ref.write_to v s) (SPSR_EL3_ref.of_regval v) else
  if reg_name = "SPSR_abt" then OPTION_MAP (\ v .  SPSR_abt_ref.write_to v s) (SPSR_abt_ref.of_regval v) else
  if reg_name = "SPSR_fiq" then OPTION_MAP (\ v .  SPSR_fiq_ref.write_to v s) (SPSR_fiq_ref.of_regval v) else
  if reg_name = "SPSR_irq" then OPTION_MAP (\ v .  SPSR_irq_ref.write_to v s) (SPSR_irq_ref.of_regval v) else
  if reg_name = "SPSR_und" then OPTION_MAP (\ v .  SPSR_und_ref.write_to v s) (SPSR_und_ref.of_regval v) else
  if reg_name = "SP_mon" then OPTION_MAP (\ v .  SP_mon_ref.write_to v s) (SP_mon_ref.of_regval v) else
  if reg_name = "ScheduledFIQ" then OPTION_MAP (\ v .  ScheduledFIQ_ref.write_to v s) (ScheduledFIQ_ref.of_regval v) else
  if reg_name = "ScheduledIRQ" then OPTION_MAP (\ v .  ScheduledIRQ_ref.write_to v s) (ScheduledIRQ_ref.of_regval v) else
  if reg_name = "TCR_EL1" then OPTION_MAP (\ v .  TCR_EL1_ref.write_to v s) (TCR_EL1_ref.of_regval v) else
  if reg_name = "TCR_EL3" then OPTION_MAP (\ v .  TCR_EL3_ref.write_to v s) (TCR_EL3_ref.of_regval v) else
  if reg_name = "TFSRE0_EL1" then OPTION_MAP (\ v .  TFSRE0_EL1_ref.write_to v s) (TFSRE0_EL1_ref.of_regval v) else
  if reg_name = "TFSR_EL1" then OPTION_MAP (\ v .  TFSR_EL1_ref.write_to v s) (TFSR_EL1_ref.of_regval v) else
  if reg_name = "TFSR_EL2" then OPTION_MAP (\ v .  TFSR_EL2_ref.write_to v s) (TFSR_EL2_ref.of_regval v) else
  if reg_name = "TFSR_EL3" then OPTION_MAP (\ v .  TFSR_EL3_ref.write_to v s) (TFSR_EL3_ref.of_regval v) else
  if reg_name = "TLBHits" then OPTION_MAP (\ v .  TLBHits_ref.write_to v s) (TLBHits_ref.of_regval v) else
  if reg_name = "TLBMisses" then OPTION_MAP (\ v .  TLBMisses_ref.write_to v s) (TLBMisses_ref.of_regval v) else
  if reg_name = "TTBCR2_S" then OPTION_MAP (\ v .  TTBCR2_S_ref.write_to v s) (TTBCR2_S_ref.of_regval v) else
  if reg_name = "TTBCR_S" then OPTION_MAP (\ v .  TTBCR_S_ref.write_to v s) (TTBCR_S_ref.of_regval v) else
  if reg_name = "TTBR0_EL1" then OPTION_MAP (\ v .  TTBR0_EL1_ref.write_to v s) (TTBR0_EL1_ref.of_regval v) else
  if reg_name = "TTBR0_EL2" then OPTION_MAP (\ v .  TTBR0_EL2_ref.write_to v s) (TTBR0_EL2_ref.of_regval v) else
  if reg_name = "TTBR0_EL3" then OPTION_MAP (\ v .  TTBR0_EL3_ref.write_to v s) (TTBR0_EL3_ref.of_regval v) else
  if reg_name = "TTBR0_S" then OPTION_MAP (\ v .  TTBR0_S_ref.write_to v s) (TTBR0_S_ref.of_regval v) else
  if reg_name = "TTBR1_EL1" then OPTION_MAP (\ v .  TTBR1_EL1_ref.write_to v s) (TTBR1_EL1_ref.of_regval v) else
  if reg_name = "TTBR1_EL2" then OPTION_MAP (\ v .  TTBR1_EL2_ref.write_to v s) (TTBR1_EL2_ref.of_regval v) else
  if reg_name = "TTBR1_S" then OPTION_MAP (\ v .  TTBR1_S_ref.write_to v s) (TTBR1_S_ref.of_regval v) else
  if reg_name = "VBAR_EL1" then OPTION_MAP (\ v .  VBAR_EL1_ref.write_to v s) (VBAR_EL1_ref.of_regval v) else
  if reg_name = "VBAR_EL2" then OPTION_MAP (\ v .  VBAR_EL2_ref.write_to v s) (VBAR_EL2_ref.of_regval v) else
  if reg_name = "VBAR_EL3" then OPTION_MAP (\ v .  VBAR_EL3_ref.write_to v s) (VBAR_EL3_ref.of_regval v) else
  if reg_name = "VBAR_S" then OPTION_MAP (\ v .  VBAR_S_ref.write_to v s) (VBAR_S_ref.of_regval v) else
  if reg_name = "VSESR_EL2" then OPTION_MAP (\ v .  VSESR_EL2_ref.write_to v s) (VSESR_EL2_ref.of_regval v) else
  if reg_name = "VSTCR_EL2" then OPTION_MAP (\ v .  VSTCR_EL2_ref.write_to v s) (VSTCR_EL2_ref.of_regval v) else
  if reg_name = "VSTTBR_EL2" then OPTION_MAP (\ v .  VSTTBR_EL2_ref.write_to v s) (VSTTBR_EL2_ref.of_regval v) else
  if reg_name = "VTCR_EL2" then OPTION_MAP (\ v .  VTCR_EL2_ref.write_to v s) (VTCR_EL2_ref.of_regval v) else
  if reg_name = "VTTBR_EL2" then OPTION_MAP (\ v .  VTTBR_EL2_ref.write_to v s) (VTTBR_EL2_ref.of_regval v) else
  if reg_name = "_AXIAbortCtl" then OPTION_MAP (\ v .  AXIAbortCtl_ref.write_to v s) (AXIAbortCtl_ref.of_regval v) else
  if reg_name = "_ClearFIQ" then OPTION_MAP (\ v .  ClearFIQ_ref.write_to v s) (ClearFIQ_ref.of_regval v) else
  if reg_name = "_ClearIRQ" then OPTION_MAP (\ v .  ClearIRQ_ref.write_to v s) (ClearIRQ_ref.of_regval v) else
  if reg_name = "_FIQPending" then OPTION_MAP (\ v .  FIQPending_ref.write_to v s) (FIQPending_ref.of_regval v) else
  if reg_name = "_GTEActive" then OPTION_MAP (\ v .  GTEActive_ref.write_to v s) (GTEActive_ref.of_regval v) else
  if reg_name = "_GTECurrentAPI" then OPTION_MAP (\ v .  GTECurrentAPI_ref.write_to v s) (GTECurrentAPI_ref.of_regval v) else
  if reg_name = "_GTEHaveParamLo" then OPTION_MAP (\ v .  GTEHaveParamLo_ref.write_to v s) (GTEHaveParamLo_ref.of_regval v) else
  if reg_name = "_GTEListParam" then OPTION_MAP (\ v .  GTEListParam_ref.write_to v s) (GTEListParam_ref.of_regval v) else
  if reg_name = "_GTEListParamIndex" then OPTION_MAP (\ v .  GTEListParamIndex_ref.write_to v s) (GTEListParamIndex_ref.of_regval v) else
  if reg_name = "_GTEListParamTerminator" then OPTION_MAP (\ v .  GTEListParamTerminator_ref.write_to v s) (GTEListParamTerminator_ref.of_regval v) else
  if reg_name = "_GTEListParamTerminatorCount" then OPTION_MAP (\ v .  GTEListParamTerminatorCount_ref.write_to v s) (GTEListParamTerminatorCount_ref.of_regval v) else
  if reg_name = "_GTEListParamTerminators" then OPTION_MAP (\ v .  GTEListParamTerminators_ref.write_to v s) (GTEListParamTerminators_ref.of_regval v) else
  if reg_name = "_GTEParamCount" then OPTION_MAP (\ v .  GTEParamCount_ref.write_to v s) (GTEParamCount_ref.of_regval v) else
  if reg_name = "_GTEParamLo" then OPTION_MAP (\ v .  GTEParamLo_ref.write_to v s) (GTEParamLo_ref.of_regval v) else
  if reg_name = "_GTEParamType" then OPTION_MAP (\ v .  GTEParamType_ref.write_to v s) (GTEParamType_ref.of_regval v) else
  if reg_name = "_GTEParamsComplete" then OPTION_MAP (\ v .  GTEParamsComplete_ref.write_to v s) (GTEParamsComplete_ref.of_regval v) else
  if reg_name = "_GTEStatus" then OPTION_MAP (\ v .  GTEStatus_ref.write_to v s) (GTEStatus_ref.of_regval v) else
  if reg_name = "_GTE_AS_Access" then OPTION_MAP (\ v .  GTE_AS_Access_ref.write_to v s) (GTE_AS_Access_ref.of_regval v) else
  if reg_name = "_GTE_AS_AccessCount" then OPTION_MAP (\ v .  GTE_AS_AccessCount_ref.write_to v s) (GTE_AS_AccessCount_ref.of_regval v) else
  if reg_name = "_GTE_AS_Address" then OPTION_MAP (\ v .  GTE_AS_Address_ref.write_to v s) (GTE_AS_Address_ref.of_regval v) else
  if reg_name = "_GTE_AS_Size" then OPTION_MAP (\ v .  GTE_AS_Size_ref.write_to v s) (GTE_AS_Size_ref.of_regval v) else
  if reg_name = "_IRQPending" then OPTION_MAP (\ v .  IRQPending_ref.write_to v s) (IRQPending_ref.of_regval v) else
  if reg_name = "_PC" then OPTION_MAP (\ v .  PC_ref.write_to v s) (PC_ref.of_regval v) else
  if reg_name = "_PPURACR" then OPTION_MAP (\ v .  PPURACR_ref.write_to v s) (PPURACR_ref.of_regval v) else
  if reg_name = "_PPURBAR" then OPTION_MAP (\ v .  PPURBAR_ref.write_to v s) (PPURBAR_ref.of_regval v) else
  if reg_name = "_PPURSER" then OPTION_MAP (\ v .  PPURSER_ref.write_to v s) (PPURSER_ref.of_regval v) else
  if reg_name = "_PendingPhysicalSE" then OPTION_MAP (\ v .  PendingPhysicalSE_ref.write_to v s) (PendingPhysicalSE_ref.of_regval v) else
  if reg_name = "_R" then OPTION_MAP (\ v .  R_ref.write_to v s) (R_ref.of_regval v) else
  if reg_name = "_ScheduleFIQ" then OPTION_MAP (\ v .  ScheduleFIQ_ref.write_to v s) (ScheduleFIQ_ref.of_regval v) else
  if reg_name = "_ScheduleIRQ" then OPTION_MAP (\ v .  ScheduleIRQ_ref.write_to v s) (ScheduleIRQ_ref.of_regval v) else
  if reg_name = "_TLB" then OPTION_MAP (\ v .  TLB_ref.write_to v s) (TLB_ref.of_regval v) else
  if reg_name = "_TargetCPU" then OPTION_MAP (\ v .  TargetCPU_ref.write_to v s) (TargetCPU_ref.of_regval v) else
  if reg_name = "__CNTControlBase" then OPTION_MAP (\ v .  CNTControlBase_ref.write_to v s) (CNTControlBase_ref.of_regval v) else
  if reg_name = "__LSISyndrome" then OPTION_MAP (\ v .  LSISyndrome_ref.write_to v s) (LSISyndrome_ref.of_regval v) else
  if reg_name = "__PC_changed" then OPTION_MAP (\ v .  PC_changed_ref.write_to v s) (PC_changed_ref.of_regval v) else
  if reg_name = "__currentInstr" then OPTION_MAP (\ v .  currentInstr_ref.write_to v s) (currentInstr_ref.of_regval v) else
  if reg_name = "__currentInstrLength" then OPTION_MAP (\ v .  currentInstrLength_ref.write_to v s) (currentInstrLength_ref.of_regval v) else
  if reg_name = "__defaultRAM" then OPTION_MAP (\ v .  defaultRAM_ref.write_to v s) (defaultRAM_ref.of_regval v) else
  if reg_name = "__highest_el_aarch32" then OPTION_MAP (\ v .  highest_el_aarch32_ref.write_to v s) (highest_el_aarch32_ref.of_regval v) else
  NONE))`;


val _ = Define `
 ((register_accessors:(string -> regstate ->(register_value)option)#(string -> register_value -> regstate ->(regstate)option))=  (get_regval, set_regval))`;



val _ = type_abbrev((* ( 'a, 'r) *) "MR" , ``:  (regstate, 'a, 'r, exception)monadR``);
val _ = type_abbrev((*  'a *) "M" , ``:  (regstate, 'a, exception)monad``);
val _ = export_theory()

