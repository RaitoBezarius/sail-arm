chapter \<open>Generated by Lem from \<open>aarch64_types.lem\<close>.\<close>

theory "Aarch64_types" 

imports
  Main
  "LEM.Lem_pervasives_extra"
  "Sail.Sail2_instr_kinds"
  "Sail.Sail2_values"
  "Sail.Sail2_operators_mwords"
  "Sail.Sail2_prompt_monad"
  "Sail.Sail2_prompt"
  "Sail.Sail2_string"

begin 

\<comment> \<open>\<open>Generated by Sail from aarch64.\<close>\<close>
\<comment> \<open>\<open>open import Pervasives_extra\<close>\<close>
\<comment> \<open>\<open>open import Sail2_instr_kinds\<close>\<close>
\<comment> \<open>\<open>open import Sail2_values\<close>\<close>
\<comment> \<open>\<open>open import Sail2_string\<close>\<close>
\<comment> \<open>\<open>open import Sail2_operators_mwords\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt_monad\<close>\<close>
\<comment> \<open>\<open>open import Sail2_prompt\<close>\<close>
type_synonym 'n bits =" ( 'n::len)Word.word "





datatype exception  =
    Error_Undefined " (unit)"
  | Error_See " (string)"
  | Error_Implementation_Defined " (string)"
  | Error_ReservedEncoding " (unit)"
  | Error_ExceptionTaken " (unit)"
  | Error_Unpredictable " (unit)"
  | Error_SError " (bool)"



datatype boolean = FALSE | TRUE



datatype signal = LOW | HIGH



datatype RetCode =
  RC_OK
  | RC_UNDEFINED
  | RC_UNPREDICTABLE
  | RC_SEE
  | RC_IMPLEMENTATION_DEFINED
  | RC_EXCEPTION_TAKEN
  | RC_ASSERT_FAILED
  | RC_UNMATCHED_CASE



type_synonym TUBE_Type  =" 32 bits "

type_synonym ScheduleIRQ_Type  =" 32 bits "

type_synonym ClearIRQ_Type  =" 32 bits "

type_synonym ScheduleFIQ_Type  =" 32 bits "

type_synonym ClearFIQ_Type  =" 32 bits "

type_synonym TargetCPU_Type  =" 32 bits "

type_synonym AbortRgn64Lo1_Type  =" 32 bits "

type_synonym AbortRgn64Lo1_Hi_Type  =" 32 bits "

type_synonym AbortRgn64Hi1_Type  =" 32 bits "

type_synonym AbortRgn64Hi1_Hi_Type  =" 32 bits "

type_synonym AbortRgn64Lo2_Type  =" 32 bits "

type_synonym AbortRgn64Lo2_Hi_Type  =" 32 bits "

type_synonym AbortRgn64Hi2_Type  =" 32 bits "

type_synonym AbortRgn64Hi2_Hi_Type  =" 32 bits "

type_synonym AXIAbortCtl_Type  =" 32 bits "

type_synonym GTE_API_Type  =" 32 bits "

type_synonym GTE_API_PARAM_Type  =" 32 bits "

type_synonym GTE_API_STATUS_Type  =" 32 bits "

type_synonym PPURBAR_Type  =" 32 bits "

type_synonym PPURSER_Type  =" 32 bits "

type_synonym PPURACR_Type  =" 32 bits "

type_synonym GTE_API_STATUS_64_Type  =" 32 bits "

type_synonym GTE_API_STATUS_64_HI_Type  =" 32 bits "

type_synonym GTE_API_PARAM_64_Type  =" 32 bits "

type_synonym GTE_API_PARAM_64_HI_Type  =" 32 bits "

type_synonym SCRType  =" 32 bits "

type_synonym SCTLRType  =" 64 bits "

type_synonym MAIRType  =" 64 bits "

type_synonym ESRType  =" 32 bits "

type_synonym FPCRType  =" 32 bits "

type_synonym FPSRType  =" 32 bits "

type_synonym FPSCRType  =" 32 bits "

type_synonym CPSRType  =" 32 bits "

type_synonym APSRType  =" 32 bits "

type_synonym ITSTATEType  =" 8 bits "

type_synonym CPACRType  =" 32 bits "

type_synonym CNTKCTLType  =" 32 bits "

datatype GTEParamType = GTEParam_WORD | GTEParam_LIST | GTEParam_EOACCESS



type_synonym GTE_PPU_SizeEn_Type  =" 32 bits "

type_synonym GTEExtObsAccess_Type  =" 16 bits "

type_synonym GTEASAccess_Type  =" 32 bits "

type_synonym GTEASRecordedAccess_Type  =" 32 bits "

datatype AccType =
  AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_ORDEREDATOMIC
  | AccType_ORDEREDATOMICRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_NV2REGISTER
  | AccType_DC
  | AccType_DC_UNPRIV
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT



datatype MemType = MemType_Normal | MemType_Device



datatype DeviceType = DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE



record MemAttrHints  =
  
 MemAttrHints_attrs ::" 2 bits " 
 MemAttrHints_hints ::" 2 bits " 
 MemAttrHints_transient ::" bool "  



record MemoryAttributes  =
  
 MemoryAttributes_typ ::" MemType " 

     MemoryAttributes_device ::" DeviceType " 

     MemoryAttributes_inner ::" MemAttrHints " 

     MemoryAttributes_outer ::" MemAttrHints " 

     MemoryAttributes_tagged ::" bool " 

     MemoryAttributes_shareable ::" bool " 

     MemoryAttributes_outershareable ::" bool "  



record FullAddress  = 
 FullAddress_address ::" 52 bits " 
 FullAddress_NS ::" 1 bits "  



datatype Fault =
  Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_BranchTarget
  | Fault_HWUpdateAccessFlag
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint



record FaultRecord  =
  
 FaultRecord_typ ::" Fault " 

     FaultRecord_acctype ::" AccType " 

     FaultRecord_ipaddress ::" FullAddress " 

     FaultRecord_s2fs1walk ::" bool " 

     FaultRecord_write ::" bool " 

     FaultRecord_level ::" ii " 

     FaultRecord_extflag ::" 1 bits " 

     FaultRecord_secondstage ::" bool " 

     FaultRecord_domain ::" 4 bits " 

     FaultRecord_errortype ::" 2 bits " 

     FaultRecord_debugmoe ::" 4 bits "  



type_synonym PARTIDtype  =" 16 bits "

type_synonym PMGtype  =" 8 bits "

record MPAMinfo  =
  
 MPAMinfo_mpam_ns ::" 1 bits " 
 MPAMinfo_partid ::" 16 bits " 
 MPAMinfo_pmg ::" 8 bits "  



record AddressDescriptor  =
  
 AddressDescriptor_fault ::" FaultRecord " 

     AddressDescriptor_memattrs ::" MemoryAttributes " 

     AddressDescriptor_paddress ::" FullAddress " 

     AddressDescriptor_vaddress ::" 64 bits "  



record AccessDescriptor  =
  
 AccessDescriptor_acctype ::" AccType " 

     AccessDescriptor_mpam ::" MPAMinfo " 

     AccessDescriptor_page_table_walk ::" bool " 

     AccessDescriptor_secondstage ::" bool " 

     AccessDescriptor_s2fs1walk ::" bool " 

     AccessDescriptor_level ::" ii "  



record Permissions  =
  
 Permissions_ap ::" 3 bits " 

     Permissions_xn ::" 1 bits " 

     Permissions_xxn ::" 1 bits " 

     Permissions_pxn ::" 1 bits "  



record DescriptorUpdate  =
  
 DescriptorUpdate_AF ::" bool " 

     DescriptorUpdate_AP ::" bool " 

     DescriptorUpdate_descaddr ::" AddressDescriptor "  



record TLBRecord  =
  
 TLBRecord_perms ::" Permissions " 

     TLBRecord_nG ::" 1 bits " 

     TLBRecord_domain ::" 4 bits " 

     TLBRecord_GP ::" 1 bits " 

     TLBRecord_contiguous ::" bool " 

     TLBRecord_level ::" ii " 

     TLBRecord_blocksize ::" ii " 

     TLBRecord_descupdate ::" DescriptorUpdate " 

     TLBRecord_CnP ::" 1 bits " 

     TLBRecord_addrdesc ::" AddressDescriptor "  



datatype MBReqDomain =
  MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem



datatype MBReqTypes = MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All



datatype PrefetchHint = Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC



record ProcState  =
  
 ProcState_N ::" 1 bits " 

     ProcState_Z ::" 1 bits " 

     ProcState_C ::" 1 bits " 

     ProcState_V ::" 1 bits " 

     ProcState_D ::" 1 bits " 

     ProcState_A ::" 1 bits " 

     ProcState_I ::" 1 bits " 

     ProcState_F ::" 1 bits " 

     ProcState_PAN ::" 1 bits " 

     ProcState_UAO ::" 1 bits " 

     ProcState_DIT ::" 1 bits " 

     ProcState_TCO ::" 1 bits " 

     ProcState_BTYPE ::" 2 bits " 

     ProcState_SS ::" 1 bits " 

     ProcState_IL ::" 1 bits " 

     ProcState_EL ::" 2 bits " 

     ProcState_nRW ::" 1 bits " 

     ProcState_SP ::" 1 bits " 

     ProcState_Q ::" 1 bits " 

     ProcState_GE ::" 4 bits " 

     ProcState_SSBS ::" 1 bits " 

     ProcState_IT ::" 8 bits " 

     ProcState_J ::" 1 bits " 

     ProcState_T ::" 1 bits " 

     ProcState_E ::" 1 bits " 

     ProcState_M ::" 5 bits "  



datatype PrivilegeLevel = PL3 | PL2 | PL1 | PL0



datatype InstrSet = InstrSet_A64 | InstrSet_A32 | InstrSet_T32



datatype ArchVersion = ARMv8p0 | ARMv8p1 | ARMv8p2 | ARMv8p3 | ARMv8p4 | ARMv8p5



datatype Unpredictable =
  Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_OORTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_ZEROPMSEVFR
  | Unpredictable_NOOPTYPES
  | Unpredictable_ZEROMINLATENCY
  | Unpredictable_ZEROBTYPE
  | Unpredictable_CLEARERRITEZERO



datatype Constraint =
  Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK



datatype FPExc =
  FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm



datatype FPRounding =
  FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD



datatype FPType = FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN



datatype BranchType =
  BranchType_DIRCALL
  | BranchType_INDCALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_DIR
  | BranchType_INDIR
  | BranchType_EXCEPTION
  | BranchType_RESET
  | BranchType_UNKNOWN



record TLBContext  =
  
 TLBContext_twostage ::" bool " 

     TLBContext_secondstage ::" bool " 

     TLBContext_asid ::" 16 bits " 

     TLBContext_vmid ::" 16 bits " 

     TLBContext_el ::" 2 bits " 

     TLBContext_secure ::" bool " 

     TLBContext_t_sz ::" 6 bits " 

     TLBContext_granule_size ::" ii "  



record TLBLine  =
  
 TLBLine_address ::" 64 bits " 

     TLBLine_context ::" TLBContext " 

     TLBLine_data ::" TLBRecord " 

     TLBLine_valid_name ::" bool "  



datatype Exception =
  Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_PACTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_ERetTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_NV2DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_BranchTarget
  | Exception_FIQ



record ExceptionRecord  =
  
 ExceptionRecord_typ ::" Exception " 

     ExceptionRecord_syndrome ::" 25 bits " 

     ExceptionRecord_vaddress ::" 64 bits " 

     ExceptionRecord_ipavalid ::" bool " 

     ExceptionRecord_NS ::" 1 bits " 

     ExceptionRecord_ipaddress ::" 52 bits "  



datatype SystemAccessType = SystemAccessType_RT | SystemAccessType_RRT | SystemAccessType_DT



datatype SysRegAccess =
  SysRegAccess_OK
  | SysRegAccess_UNDEFINED
  | SysRegAccess_TrapToEL1
  | SysRegAccess_TrapToEL2
  | SysRegAccess_TrapToEL3



datatype OpType = OpType_Load | OpType_Store | OpType_LoadAtomic | OpType_Branch | OpType_Other



datatype TimeStamp = TimeStamp_None | TimeStamp_Virtual | TimeStamp_Physical



datatype CountOp = CountOp_CLZ | CountOp_CLS | CountOp_CNT



datatype ExtendType =
  ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX



datatype FPMaxMinOp = FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM



datatype FPUnaryOp = FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT



datatype FPConvOp =
  FPConvOp_CVT_FtoI
  | FPConvOp_CVT_ItoF
  | FPConvOp_MOV_FtoI
  | FPConvOp_MOV_ItoF
  | FPConvOp_CVT_FtoI_JS



datatype MoveWideOp = MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K



datatype ShiftType = ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR



datatype LogicalOp = LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR



datatype MemOp = MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH



datatype MemAtomicOp =
  MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP



datatype MemBarrierOp =
  MemBarrierOp_DSB
  | MemBarrierOp_DMB
  | MemBarrierOp_ISB
  | MemBarrierOp_SSBB
  | MemBarrierOp_PSSBB
  | MemBarrierOp_SB



datatype SystemHintOp =
  SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB
  | SystemHintOp_TSB
  | SystemHintOp_BTI
  | SystemHintOp_CSDB



datatype PSTATEField =
  PSTATEField_DAIFSet
  | PSTATEField_DAIFClr
  | PSTATEField_PAN
  | PSTATEField_UAO
  | PSTATEField_DIT
  | PSTATEField_SP



datatype SystemOp = Sys_AT | Sys_DC | Sys_IC | Sys_TLBI | Sys_SYS



datatype VBitOp = VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR



datatype CompareOp = CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT



datatype ImmediateOp = ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC



datatype ReduceOp =
  ReduceOp_FMINNUM | ReduceOp_FMAXNUM | ReduceOp_FMIN | ReduceOp_FMAX | ReduceOp_FADD | ReduceOp_ADD



datatype SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX



record AArch32_SErrorSyndrome  =
  
 AArch32_SErrorSyndrome_AET ::" 2 bits " 
 AArch32_SErrorSyndrome_ExT ::" 1 bits "  



datatype CrossTriggerOut =
  CrossTriggerOut_DebugRequest
  | CrossTriggerOut_RestartRequest
  | CrossTriggerOut_IRQ
  | CrossTriggerOut_RSVD3
  | CrossTriggerOut_TraceExtIn0
  | CrossTriggerOut_TraceExtIn1
  | CrossTriggerOut_TraceExtIn2
  | CrossTriggerOut_TraceExtIn3



datatype CrossTriggerIn =
  CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3



datatype InterruptID =
  InterruptID_PMUIRQ
  | InterruptID_COMMIRQ
  | InterruptID_CTIIRQ
  | InterruptID_COMMRX
  | InterruptID_COMMTX



record PCSample  =
  
 PCSample_valid_name ::" bool " 

     PCSample_pc ::" 64 bits " 

     PCSample_el ::" 2 bits " 

     PCSample_rw ::" 1 bits " 

     PCSample_ns ::" 1 bits " 

     PCSample_has_el2 ::" bool " 

     PCSample_contextidr ::" 32 bits " 

     PCSample_contextidr_el2 ::" 32 bits " 

     PCSample_el0h ::" bool " 

     PCSample_vmid ::" 16 bits "  



datatype VCGEtype = VCGEtype_signed | VCGEtype_unsigned | VCGEtype_fp



datatype VCGTtype = VCGTtype_signed | VCGTtype_unsigned | VCGTtype_fp



datatype VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL



record InterruptReq  =
  
 InterruptReq_take_SE ::" bool " 

     InterruptReq_take_vSE ::" bool " 

     InterruptReq_take_IRQ ::" bool " 

     InterruptReq_take_vIRQ ::" bool " 

     InterruptReq_take_FIQ ::" bool " 

     InterruptReq_take_vFIQ ::" bool " 

     InterruptReq_iesb_req ::" bool "  



datatype AsyncErrorType =
  AsyncErrorType_UC
  | AsyncErrorType_UEU
  | AsyncErrorType_UEO
  | AsyncErrorType_UER
  | AsyncErrorType_CE





datatype register_value  =
    Regval_vector " ((ii * bool * register_value list))"
  | Regval_list " ( register_value list)"
  | Regval_option " ( register_value option)"
  | Regval_GTEParamType " (GTEParamType)"
  | Regval_ProcState " (ProcState)"
  | Regval_TLBLine " (TLBLine)"
  | Regval_bool " (bool)"
  | Regval_int " (ii)"
  | Regval_signal " (signal)"
  | Regval_vector_11_dec_bit " ( 11 Word.word)"
  | Regval_vector_128_dec_bit " ( 128 Word.word)"
  | Regval_vector_16_dec_bit " ( 16 Word.word)"
  | Regval_vector_1_dec_bit " ( 1 Word.word)"
  | Regval_vector_2_dec_bit " ( 2 Word.word)"
  | Regval_vector_32_dec_bit " ( 32 Word.word)"
  | Regval_vector_4_dec_bit " ( 4 Word.word)"
  | Regval_vector_52_dec_bit " ( 52 Word.word)"
  | Regval_vector_56_dec_bit " ( 56 Word.word)"
  | Regval_vector_64_dec_bit " ( 64 Word.word)"



record regstate  =
  
 CNTHCTL_EL2 ::"  32 Word.word " 

     CPTR_EL2 ::"  32 Word.word " 

     CCSIDR_EL1 ::"  64 Word.word " 

     ACTLR_EL1 ::"  64 Word.word " 

     ACTLR_EL2 ::"  64 Word.word " 

     ACTLR_EL3 ::"  64 Word.word " 

     AFSR0_EL1 ::"  32 Word.word " 

     AFSR0_EL2 ::"  32 Word.word " 

     AFSR0_EL3 ::"  32 Word.word " 

     AFSR1_EL1 ::"  32 Word.word " 

     AFSR1_EL2 ::"  32 Word.word " 

     AFSR1_EL3 ::"  32 Word.word " 

     AIDR_EL1 ::"  32 Word.word " 

     AMAIR_EL1 ::"  64 Word.word " 

     AMAIR_EL2 ::"  64 Word.word " 

     AMAIR_EL3 ::"  64 Word.word " 

     APDAKeyHi_EL1 ::"  64 Word.word " 

     APDAKeyLo_EL1 ::"  64 Word.word " 

     APDBKeyHi_EL1 ::"  64 Word.word " 

     APDBKeyLo_EL1 ::"  64 Word.word " 

     APGAKeyHi_EL1 ::"  64 Word.word " 

     APGAKeyLo_EL1 ::"  64 Word.word " 

     APIAKeyHi_EL1 ::"  64 Word.word " 

     APIAKeyLo_EL1 ::"  64 Word.word " 

     APIBKeyHi_EL1 ::"  64 Word.word " 

     APIBKeyLo_EL1 ::"  64 Word.word " 

     BTypeCompatible ::" bool " 

     BTypeNext ::"  2 Word.word " 

     CCSIDR2_EL1 ::"  32 Word.word " 

     CLIDR_EL1 ::"  64 Word.word " 

     CNTFRQ_EL0 ::"  32 Word.word " 

     CNTHPS_CTL_EL2 ::"  32 Word.word " 

     CNTHPS_CVAL_EL2 ::"  64 Word.word " 

     CNTHPS_TVAL_EL2 ::"  32 Word.word " 

     CNTHP_CTL_EL2 ::"  32 Word.word " 

     CNTHP_CVAL_EL2 ::"  64 Word.word " 

     CNTHP_TVAL_EL2 ::"  32 Word.word " 

     CNTHVS_CTL_EL2 ::"  32 Word.word " 

     CNTHVS_CVAL_EL2 ::"  64 Word.word " 

     CNTHVS_TVAL_EL2 ::"  32 Word.word " 

     CNTHV_CTL_EL2 ::"  32 Word.word " 

     CNTHV_CVAL_EL2 ::"  64 Word.word " 

     CNTHV_TVAL_EL2 ::"  32 Word.word " 

     CNTKCTL_EL1 ::"  32 Word.word " 

     CNTPCT_EL0 ::"  64 Word.word " 

     CNTPS_CTL_EL1 ::"  32 Word.word " 

     CNTPS_CVAL_EL1 ::"  64 Word.word " 

     CNTPS_TVAL_EL1 ::"  32 Word.word " 

     CNTP_CTL_EL0 ::"  32 Word.word " 

     CNTP_CTL_S ::"  32 Word.word " 

     CNTP_CVAL_EL0 ::"  64 Word.word " 

     CNTP_TVAL_EL0 ::"  32 Word.word " 

     CNTVCT_EL0 ::"  64 Word.word " 

     CNTVOFF_EL2 ::"  64 Word.word " 

     CNTV_CTL_EL0 ::"  32 Word.word " 

     CNTV_CVAL_EL0 ::"  64 Word.word " 

     CNTV_TVAL_EL0 ::"  32 Word.word " 

     CPACR_EL1 ::"  32 Word.word " 

     CPTR_EL3 ::"  32 Word.word " 

     CSSELR_EL1 ::"  32 Word.word " 

     CSSELR_S ::"  32 Word.word " 

     CTR_EL0 ::"  64 Word.word " 

     DBGAUTHSTATUS_EL1 ::"  32 Word.word " 

     DBGCLAIMCLR_EL1 ::"  32 Word.word " 

     DBGCLAIMSET_EL1 ::"  32 Word.word " 

     DBGDEVID1 ::"  32 Word.word " 

     DBGDEVID2 ::"  32 Word.word " 

     DBGDSCRint ::"  32 Word.word " 

     DBGDTRRX_EL0 ::"  32 Word.word " 

     DBGDTRTX_EL0 ::"  32 Word.word " 

     DBGDTR_EL0 ::"  64 Word.word " 

     DBGWFAR ::"  32 Word.word " 

     DCZID_EL0 ::"  32 Word.word " 

     DISR_EL1 ::"  64 Word.word " 

     EDECCR ::"  32 Word.word " 

     EDECR ::"  32 Word.word " 

     EDESR ::"  32 Word.word " 

     EDLSR ::"  32 Word.word " 

     EDPCSR ::"  64 Word.word " 

     EDPFR ::"  64 Word.word " 

     EDPRCR ::"  32 Word.word " 

     EDPRSR ::"  32 Word.word " 

     EDVIDSR ::"  32 Word.word " 

     ELR_EL0 ::"  64 Word.word " 

     ESP_EL0 ::"  64 Word.word " 

     ESR_EL0 ::"  32 Word.word " 

     EventRegister ::"  1 Word.word " 

     FAR_EL0 ::"  64 Word.word " 

     FCSEIDR ::"  32 Word.word " 

     FPCR ::"  32 Word.word " 

     FPEXC32_EL2 ::"  32 Word.word " 

     FPSCR ::"  32 Word.word " 

     FPSID ::"  32 Word.word " 

     FPSR ::"  32 Word.word " 

     GCR_EL1 ::"  32 Word.word " 

     HACR_EL2 ::"  32 Word.word " 

     HSTR_EL2 ::"  32 Word.word " 

     ICC_AP0R_EL1 ::" ( 32 Word.word) list " 

     ICC_AP1R_EL1 ::" ( 32 Word.word) list " 

     ICC_ASGI1R_EL1 ::"  64 Word.word " 

     ICC_BPR0_EL1 ::"  32 Word.word " 

     ICC_BPR1_EL1_NS ::"  32 Word.word " 

     ICC_BPR1_EL1_S ::"  32 Word.word " 

     ICC_CTLR_EL1_NS ::"  32 Word.word " 

     ICC_CTLR_EL1_S ::"  32 Word.word " 

     ICC_CTLR_EL3 ::"  32 Word.word " 

     ICC_DIR_EL1 ::"  32 Word.word " 

     ICC_EOIR0_EL1 ::"  32 Word.word " 

     ICC_EOIR1_EL1 ::"  32 Word.word " 

     ICC_HPPIR0_EL1 ::"  32 Word.word " 

     ICC_HPPIR1_EL1 ::"  32 Word.word " 

     ICC_IAR0_EL1 ::"  32 Word.word " 

     ICC_IAR1_EL1 ::"  32 Word.word " 

     ICC_IGRPEN0_EL1 ::"  32 Word.word " 

     ICC_IGRPEN1_EL1_NS ::"  32 Word.word " 

     ICC_IGRPEN1_EL1_S ::"  32 Word.word " 

     ICC_IGRPEN1_EL3 ::"  32 Word.word " 

     ICC_PMR_EL1 ::"  32 Word.word " 

     ICC_RPR_EL1 ::"  32 Word.word " 

     ICC_SGI0R_EL1 ::"  64 Word.word " 

     ICC_SGI1R_EL1 ::"  64 Word.word " 

     ICC_SRE_EL1_NS ::"  32 Word.word " 

     ICC_SRE_EL1_S ::"  32 Word.word " 

     ICC_SRE_EL2 ::"  32 Word.word " 

     ICC_SRE_EL3 ::"  32 Word.word " 

     ICH_AP0R_EL2 ::" ( 32 Word.word) list " 

     ICH_AP1R_EL2 ::" ( 32 Word.word) list " 

     ICH_EISR_EL2 ::"  32 Word.word " 

     ICH_ELRSR_EL2 ::"  32 Word.word " 

     ICH_HCR_EL2 ::"  32 Word.word " 

     ICH_MISR_EL2 ::"  32 Word.word " 

     ICH_VMCR_EL2 ::"  32 Word.word " 

     ICH_VTR_EL2 ::"  32 Word.word " 

     ICV_AP0R_EL1 ::" ( 32 Word.word) list " 

     ICV_AP1R_EL1 ::" ( 32 Word.word) list " 

     ICV_BPR0_EL1 ::"  32 Word.word " 

     ICV_BPR1_EL1 ::"  32 Word.word " 

     ICV_CTLR_EL1 ::"  32 Word.word " 

     ICV_DIR_EL1 ::"  32 Word.word " 

     ICV_EOIR0_EL1 ::"  32 Word.word " 

     ICV_EOIR1_EL1 ::"  32 Word.word " 

     ICV_HPPIR0_EL1 ::"  32 Word.word " 

     ICV_HPPIR1_EL1 ::"  32 Word.word " 

     ICV_IAR0_EL1 ::"  32 Word.word " 

     ICV_IAR1_EL1 ::"  32 Word.word " 

     ICV_IGRPEN0_EL1 ::"  32 Word.word " 

     ICV_IGRPEN1_EL1 ::"  32 Word.word " 

     ICV_PMR_EL1 ::"  32 Word.word " 

     ICV_RPR_EL1 ::"  32 Word.word " 

     ID_AA64AFR0_EL1 ::"  32 Word.word " 

     ID_AA64AFR1_EL1 ::"  32 Word.word " 

     ID_AA64DFR1_EL1 ::"  32 Word.word " 

     ID_AA64ISAR0_EL1 ::"  64 Word.word " 

     ID_AA64ISAR1_EL1 ::"  64 Word.word " 

     ID_AA64MMFR0_EL1 ::"  64 Word.word " 

     ID_AA64MMFR1_EL1 ::"  32 Word.word " 

     ID_AA64MMFR2_EL1 ::"  64 Word.word " 

     ID_AA64PFR0_EL1 ::"  64 Word.word " 

     ID_AA64PFR1_EL1 ::"  32 Word.word " 

     ID_AFR0_EL1 ::"  32 Word.word " 

     ID_DFR0_EL1 ::"  32 Word.word " 

     ID_ISAR0_EL1 ::"  32 Word.word " 

     ID_ISAR1_EL1 ::"  32 Word.word " 

     ID_ISAR2_EL1 ::"  32 Word.word " 

     ID_ISAR3_EL1 ::"  32 Word.word " 

     ID_ISAR4_EL1 ::"  32 Word.word " 

     ID_ISAR5_EL1 ::"  32 Word.word " 

     ID_ISAR6_EL1 ::"  32 Word.word " 

     ID_MMFR0_EL1 ::"  32 Word.word " 

     ID_MMFR1_EL1 ::"  32 Word.word " 

     ID_MMFR2_EL1 ::"  32 Word.word " 

     ID_MMFR3_EL1 ::"  32 Word.word " 

     ID_MMFR4_EL1 ::"  32 Word.word " 

     ID_PFR0_EL1 ::"  32 Word.word " 

     ID_PFR1_EL1 ::"  32 Word.word " 

     ID_PFR2_EL1 ::"  32 Word.word " 

     ISR_EL1 ::"  32 Word.word " 

     LORC_EL1 ::"  32 Word.word " 

     LOREA_EL1 ::"  64 Word.word " 

     LORID_EL1 ::"  32 Word.word " 

     LORN_EL1 ::"  32 Word.word " 

     LORSA_EL1 ::"  64 Word.word " 

     MDCCINT_EL1 ::"  32 Word.word " 

     MDCCSR_EL0 ::"  32 Word.word " 

     MDRAR_EL1 ::"  64 Word.word " 

     MIDR_EL1 ::"  32 Word.word " 

     MVFR0_EL1 ::"  32 Word.word " 

     MVFR1_EL1 ::"  32 Word.word " 

     MVFR2_EL1 ::"  32 Word.word " 

     NSACR ::"  32 Word.word " 

     OSDTRRX_EL1 ::"  32 Word.word " 

     OSDTRTX_EL1 ::"  32 Word.word " 

     OSECCR_EL1 ::"  32 Word.word " 

     OSLAR_EL1 ::"  32 Word.word " 

     PAR_EL1 ::"  64 Word.word " 

     PAR_S ::"  64 Word.word " 

     PMCCFILTR_EL0 ::"  32 Word.word " 

     PMCCNTR_EL0 ::"  64 Word.word " 

     PMCEID0_EL0 ::"  64 Word.word " 

     PMCEID1_EL0 ::"  64 Word.word " 

     PMCNTENCLR_EL0 ::"  32 Word.word " 

     PMCNTENSET_EL0 ::"  32 Word.word " 

     PMCR_EL0 ::"  32 Word.word " 

     PMEVCNTR_EL0 ::" ( 32 Word.word) list " 

     PMEVTYPER_EL0 ::" ( 32 Word.word) list " 

     PMINTENCLR_EL1 ::"  32 Word.word " 

     PMINTENSET_EL1 ::"  32 Word.word " 

     PMLSR ::"  32 Word.word " 

     PMMIR ::"  32 Word.word " 

     PMMIR_EL1 ::"  32 Word.word " 

     PMOVSCLR_EL0 ::"  32 Word.word " 

     PMOVSSET_EL0 ::"  32 Word.word " 

     PMPCSR ::"  64 Word.word " 

     PMSELR_EL0 ::"  32 Word.word " 

     PMSWINC_EL0 ::"  32 Word.word " 

     PMUSERENR_EL0 ::"  32 Word.word " 

     PMVIDSR ::"  32 Word.word " 

     PMXEVCNTR_EL0 ::"  32 Word.word " 

     PMXEVTYPER_EL0 ::"  32 Word.word " 

     RC ::" ( 64 Word.word) list " 

     RD_EL0 ::"  64 Word.word " 

     REVIDR_EL1 ::"  32 Word.word " 

     RGSR_EL1 ::"  32 Word.word " 

     RMR_EL1 ::"  32 Word.word " 

     RMR_EL2 ::"  32 Word.word " 

     RMR_EL3 ::"  32 Word.word " 

     RMUID_EL0 ::"  32 Word.word " 

     RNDR ::"  64 Word.word " 

     RNDRRS ::"  64 Word.word " 

     RVBAR ::"  32 Word.word " 

     RVBAR_EL1 ::"  64 Word.word " 

     RVBAR_EL2 ::"  64 Word.word " 

     RVBAR_EL3 ::"  64 Word.word " 

     SCXTNUM_EL0 ::"  64 Word.word " 

     SCXTNUM_EL1 ::"  64 Word.word " 

     SCXTNUM_EL2 ::"  64 Word.word " 

     SCXTNUM_EL3 ::"  64 Word.word " 

     SDER32_EL2 ::"  32 Word.word " 

     SPSR_EL0 ::"  32 Word.word " 

     SP_EL0 ::"  64 Word.word " 

     SP_EL1 ::"  64 Word.word " 

     SP_EL2 ::"  64 Word.word " 

     SP_EL3 ::"  64 Word.word " 

     ShouldAdvanceIT ::" bool " 

     TLBTR ::"  32 Word.word " 

     TPIDRRO_EL0 ::"  64 Word.word " 

     TPIDR_EL0 ::"  64 Word.word " 

     TPIDR_EL1 ::"  64 Word.word " 

     TPIDR_EL2 ::"  64 Word.word " 

     TPIDR_EL3 ::"  64 Word.word " 

     TRFCR_EL1 ::"  32 Word.word " 

     TRFCR_EL2 ::"  32 Word.word " 

     VBAR_EL0 ::"  64 Word.word " 

     VDISR_EL2 ::"  64 Word.word " 

     VMPIDR_EL2 ::"  64 Word.word " 

     VNCR_EL2 ::"  64 Word.word " 

     VPIDR_EL2 ::"  32 Word.word " 

     V ::" ( 128 Word.word) list " 

     currentCond ::"  4 Word.word " 

     exclusive_block_address ::"  52 Word.word " 

     saved_exception_level ::"  2 Word.word " 

     unconditional ::" bool " 

     CONTEXTIDR_S ::"  32 Word.word " 

     GTEExtObsAccess ::" ( 16 Word.word) list " 

     GTEExtObsAddress ::" ( 64 Word.word) list " 

     GTEExtObsData ::" ( 64 Word.word) list " 

     GTEExtObsResult ::" ( 64 Word.word) list " 

     GTEExtObsActive ::" bool list " 

     GTEExtObsCount ::" ii list " 

     GTEExtObsIndex ::" ii list " 

     GTEExtObsResultIndex ::" ii list " 

     GTEExtObsResultIsAddress ::" bool list " 

     GTEListParam0 ::" ( 64 Word.word) list " 

     GTEListParam1 ::" ( 64 Word.word) list " 

     GTEParam ::" ( 64 Word.word) list " 

     GTE_AS_RecordedAccess ::" ( 32 Word.word) list " 

     GTE_AS_RecordedAddress ::" ( 64 Word.word) list " 

     GTE_AS_RecordedData ::" ( 64 Word.word) list " 

     GTE_PPU_Access ::" ( 32 Word.word) list " 

     GTE_PPU_Address ::" ( 64 Word.word) list " 

     GTE_PPU_SizeEn ::" ( 32 Word.word) list " 

     TCR_EL2 ::"  64 Word.word " 

     AbortRgn64Hi1 ::"  32 Word.word " 

     AbortRgn64Hi1_Hi ::"  32 Word.word " 

     AbortRgn64Hi2 ::"  32 Word.word " 

     AbortRgn64Hi2_Hi ::"  32 Word.word " 

     AbortRgn64Lo1 ::"  32 Word.word " 

     AbortRgn64Lo1_Hi ::"  32 Word.word " 

     AbortRgn64Lo2 ::"  32 Word.word " 

     AbortRgn64Lo2_Hi ::"  32 Word.word " 

     CNTCR ::"  32 Word.word " 

     CNTCV ::"  64 Word.word " 

     CNTFID0 ::"  32 Word.word " 

     CNTSR ::"  32 Word.word " 

     CONTEXTIDR_EL1 ::"  32 Word.word " 

     CONTEXTIDR_EL2 ::"  32 Word.word " 

     DACR32_EL2 ::"  32 Word.word " 

     DACR_S ::"  32 Word.word " 

     DBGBCR ::" ( 32 Word.word) list " 

     DBGBCR_EL1 ::" ( 32 Word.word) list " 

     DBGBVR ::" ( 32 Word.word) list " 

     DBGBVR_EL1 ::" ( 64 Word.word) list " 

     DBGBXVR ::" ( 32 Word.word) list " 

     DBGDIDR ::"  32 Word.word " 

     DBGEN ::" signal " 

     DBGPRCR_EL1 ::"  32 Word.word " 

     DBGVCR32_EL2 ::"  32 Word.word " 

     DBGWCR ::" ( 32 Word.word) list " 

     DBGWCR_EL1 ::" ( 32 Word.word) list " 

     DBGWVR ::" ( 32 Word.word) list " 

     DBGWVR_EL1 ::" ( 64 Word.word) list " 

     DFSR_S ::"  32 Word.word " 

     DLR_EL0 ::"  64 Word.word " 

     DSPSR_EL0 ::"  32 Word.word " 

     EDSCR ::"  32 Word.word " 

     ELR_EL1 ::"  64 Word.word " 

     ELR_EL2 ::"  64 Word.word " 

     ELR_EL3 ::"  64 Word.word " 

     ESR_EL1 ::"  32 Word.word " 

     ESR_EL2 ::"  32 Word.word " 

     ESR_EL3 ::"  32 Word.word " 

     FAR_EL1 ::"  64 Word.word " 

     FAR_EL2 ::"  64 Word.word " 

     FAR_EL3 ::"  64 Word.word " 

     HCR_EL2 ::"  64 Word.word " 

     HPFAR_EL2 ::"  64 Word.word " 

     ID_AA64DFR0_EL1 ::"  64 Word.word " 

     IFSR32_EL2 ::"  32 Word.word " 

     IFSR_S ::"  32 Word.word " 

     InGuardedPage ::" bool " 

     LR_mon ::"  32 Word.word " 

     MAIR0_S ::"  32 Word.word " 

     MAIR1_S ::"  32 Word.word " 

     MAIR_EL1 ::"  64 Word.word " 

     MAIR_EL2 ::"  64 Word.word " 

     MAIR_EL3 ::"  64 Word.word " 

     MDCR_EL2 ::"  32 Word.word " 

     MDCR_EL3 ::"  32 Word.word " 

     MDSCR_EL1 ::"  32 Word.word " 

     MPAM0_EL1 ::"  64 Word.word " 

     MPAM1_EL1 ::"  64 Word.word " 

     MPAM2_EL2 ::"  64 Word.word " 

     MPAM3_EL3 ::"  64 Word.word " 

     MPAMHCR_EL2 ::"  32 Word.word " 

     MPAMIDR_EL1 ::"  64 Word.word " 

     MPAMVPM0_EL2 ::"  64 Word.word " 

     MPAMVPM1_EL2 ::"  64 Word.word " 

     MPAMVPM2_EL2 ::"  64 Word.word " 

     MPAMVPM3_EL2 ::"  64 Word.word " 

     MPAMVPM4_EL2 ::"  64 Word.word " 

     MPAMVPM5_EL2 ::"  64 Word.word " 

     MPAMVPM6_EL2 ::"  64 Word.word " 

     MPAMVPM7_EL2 ::"  64 Word.word " 

     MPAMVPMV_EL2 ::"  32 Word.word " 

     MPIDR_EL1 ::"  64 Word.word " 

     MVBAR ::"  32 Word.word " 

     NMRR_S ::"  32 Word.word " 

     OSDLR_EL1 ::"  32 Word.word " 

     OSLSR_EL1 ::"  32 Word.word " 

     PRRR_S ::"  32 Word.word " 

     PSTATE ::" ProcState " 

     SCR_EL3 ::"  32 Word.word " 

     SCTLR_EL1 ::"  64 Word.word " 

     SCTLR_EL2 ::"  64 Word.word " 

     SCTLR_EL3 ::"  64 Word.word " 

     SCTLR_S ::"  32 Word.word " 

     SDER32_EL3 ::"  32 Word.word " 

     SPIDEN ::" signal " 

     SPSR_EL1 ::"  32 Word.word " 

     SPSR_EL2 ::"  32 Word.word " 

     SPSR_EL3 ::"  32 Word.word " 

     SPSR_abt ::"  32 Word.word " 

     SPSR_fiq ::"  32 Word.word " 

     SPSR_irq ::"  32 Word.word " 

     SPSR_und ::"  32 Word.word " 

     SP_mon ::"  32 Word.word " 

     ScheduledFIQ ::" bool " 

     ScheduledIRQ ::" bool " 

     TCR_EL1 ::"  64 Word.word " 

     TCR_EL3 ::"  32 Word.word " 

     TFSRE0_EL1 ::"  32 Word.word " 

     TFSR_EL1 ::"  32 Word.word " 

     TFSR_EL2 ::"  32 Word.word " 

     TFSR_EL3 ::"  32 Word.word " 

     TLBHits ::" ii " 

     TLBMisses ::" ii " 

     TTBCR2_S ::"  32 Word.word " 

     TTBCR_S ::"  32 Word.word " 

     TTBR0_EL1 ::"  64 Word.word " 

     TTBR0_EL2 ::"  64 Word.word " 

     TTBR0_EL3 ::"  64 Word.word " 

     TTBR0_S ::"  64 Word.word " 

     TTBR1_EL1 ::"  64 Word.word " 

     TTBR1_EL2 ::"  64 Word.word " 

     TTBR1_S ::"  64 Word.word " 

     VBAR_EL1 ::"  64 Word.word " 

     VBAR_EL2 ::"  64 Word.word " 

     VBAR_EL3 ::"  64 Word.word " 

     VBAR_S ::"  32 Word.word " 

     VSESR_EL2 ::"  64 Word.word " 

     VSTCR_EL2 ::"  32 Word.word " 

     VSTTBR_EL2 ::"  64 Word.word " 

     VTCR_EL2 ::"  32 Word.word " 

     VTTBR_EL2 ::"  64 Word.word " 

     AXIAbortCtl ::"  32 Word.word " 

     ClearFIQ ::"  32 Word.word " 

     ClearIRQ ::"  32 Word.word " 

     FIQPending ::" bool " 

     GTEActive ::" bool " 

     GTECurrentAPI ::"  32 Word.word " 

     GTEHaveParamLo ::" bool " 

     GTEListParam ::" ii " 

     GTEListParamIndex ::" ii " 

     GTEListParamTerminator ::"  64 Word.word " 

     GTEListParamTerminatorCount ::" ii " 

     GTEListParamTerminators ::" ii " 

     GTEParamCount ::" ii " 

     GTEParamLo ::"  32 Word.word " 

     GTEParamType ::" GTEParamType " 

     GTEParamsComplete ::" bool " 

     GTEStatus ::"  64 Word.word " 

     GTE_AS_Access ::"  32 Word.word " 

     GTE_AS_AccessCount ::" ii " 

     GTE_AS_Address ::"  64 Word.word " 

     GTE_AS_Size ::"  64 Word.word " 

     IRQPending ::" bool " 

     PC ::"  64 Word.word " 

     PPURACR ::"  32 Word.word " 

     PPURBAR ::"  64 Word.word " 

     PPURSER ::"  32 Word.word " 

     PendingPhysicalSE ::" bool " 

     R ::" ( 64 Word.word) list " 

     ScheduleFIQ ::"  32 Word.word " 

     ScheduleIRQ ::"  32 Word.word " 

     TLB ::" TLBLine list " 

     TargetCPU ::"  32 Word.word " 

     CNTControlBase ::"  52 Word.word " 

     LSISyndrome ::"  11 Word.word " 

     PC_changed ::" bool " 

     currentInstr ::"  32 Word.word " 

     currentInstrLength ::" ii " 

     defaultRAM ::"  56 Word.word " 

     highest_el_aarch32 ::" bool "  





\<comment> \<open>\<open>val GTEParamType_of_regval : register_value -> maybe GTEParamType\<close>\<close>

fun GTEParamType_of_regval  :: " register_value \<Rightarrow>(GTEParamType)option "  where 
     " GTEParamType_of_regval (Regval_GTEParamType (v)) = ( Some v )"
|" GTEParamType_of_regval g__42 = ( None )"


\<comment> \<open>\<open>val regval_of_GTEParamType : GTEParamType -> register_value\<close>\<close>

definition regval_of_GTEParamType  :: " GTEParamType \<Rightarrow> register_value "  where 
     " regval_of_GTEParamType v = ( Regval_GTEParamType v )"


\<comment> \<open>\<open>val ProcState_of_regval : register_value -> maybe ProcState\<close>\<close>

fun ProcState_of_regval  :: " register_value \<Rightarrow>(ProcState)option "  where 
     " ProcState_of_regval (Regval_ProcState (v)) = ( Some v )"
|" ProcState_of_regval g__41 = ( None )"


\<comment> \<open>\<open>val regval_of_ProcState : ProcState -> register_value\<close>\<close>

definition regval_of_ProcState  :: " ProcState \<Rightarrow> register_value "  where 
     " regval_of_ProcState v = ( Regval_ProcState v )"


\<comment> \<open>\<open>val TLBLine_of_regval : register_value -> maybe TLBLine\<close>\<close>

fun TLBLine_of_regval  :: " register_value \<Rightarrow>(TLBLine)option "  where 
     " TLBLine_of_regval (Regval_TLBLine (v)) = ( Some v )"
|" TLBLine_of_regval g__40 = ( None )"


\<comment> \<open>\<open>val regval_of_TLBLine : TLBLine -> register_value\<close>\<close>

definition regval_of_TLBLine  :: " TLBLine \<Rightarrow> register_value "  where 
     " regval_of_TLBLine v = ( Regval_TLBLine v )"


\<comment> \<open>\<open>val bool_of_regval : register_value -> maybe bool\<close>\<close>

fun bool_of_regval  :: " register_value \<Rightarrow>(bool)option "  where 
     " bool_of_regval (Regval_bool (v)) = ( Some v )"
|" bool_of_regval g__39 = ( None )"


\<comment> \<open>\<open>val regval_of_bool : bool -> register_value\<close>\<close>

definition regval_of_bool  :: " bool \<Rightarrow> register_value "  where 
     " regval_of_bool v = ( Regval_bool v )"


\<comment> \<open>\<open>val int_of_regval : register_value -> maybe ii\<close>\<close>

fun int_of_regval  :: " register_value \<Rightarrow>(int)option "  where 
     " int_of_regval (Regval_int (v)) = ( Some v )"
|" int_of_regval g__38 = ( None )"


\<comment> \<open>\<open>val regval_of_int : ii -> register_value\<close>\<close>

definition regval_of_int  :: " int \<Rightarrow> register_value "  where 
     " regval_of_int v = ( Regval_int v )"


\<comment> \<open>\<open>val signal_of_regval : register_value -> maybe signal\<close>\<close>

fun signal_of_regval  :: " register_value \<Rightarrow>(signal)option "  where 
     " signal_of_regval (Regval_signal (v)) = ( Some v )"
|" signal_of_regval g__37 = ( None )"


\<comment> \<open>\<open>val regval_of_signal : signal -> register_value\<close>\<close>

definition regval_of_signal  :: " signal \<Rightarrow> register_value "  where 
     " regval_of_signal v = ( Regval_signal v )"


\<comment> \<open>\<open>val vector_11_dec_bit_of_regval : register_value -> maybe (mword ty11)\<close>\<close>

fun vector_11_dec_bit_of_regval  :: " register_value \<Rightarrow>((11)Word.word)option "  where 
     " vector_11_dec_bit_of_regval (Regval_vector_11_dec_bit (v)) = ( Some v )"
|" vector_11_dec_bit_of_regval g__36 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_11_dec_bit : mword ty11 -> register_value\<close>\<close>

definition regval_of_vector_11_dec_bit  :: "(11)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_11_dec_bit v = ( Regval_vector_11_dec_bit v )"


\<comment> \<open>\<open>val vector_128_dec_bit_of_regval : register_value -> maybe (mword ty128)\<close>\<close>

fun vector_128_dec_bit_of_regval  :: " register_value \<Rightarrow>((128)Word.word)option "  where 
     " vector_128_dec_bit_of_regval (Regval_vector_128_dec_bit (v)) = ( Some v )"
|" vector_128_dec_bit_of_regval g__35 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_128_dec_bit : mword ty128 -> register_value\<close>\<close>

definition regval_of_vector_128_dec_bit  :: "(128)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_128_dec_bit v = ( Regval_vector_128_dec_bit v )"


\<comment> \<open>\<open>val vector_16_dec_bit_of_regval : register_value -> maybe (mword ty16)\<close>\<close>

fun vector_16_dec_bit_of_regval  :: " register_value \<Rightarrow>((16)Word.word)option "  where 
     " vector_16_dec_bit_of_regval (Regval_vector_16_dec_bit (v)) = ( Some v )"
|" vector_16_dec_bit_of_regval g__34 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_16_dec_bit : mword ty16 -> register_value\<close>\<close>

definition regval_of_vector_16_dec_bit  :: "(16)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_16_dec_bit v = ( Regval_vector_16_dec_bit v )"


\<comment> \<open>\<open>val vector_1_dec_bit_of_regval : register_value -> maybe (mword ty1)\<close>\<close>

fun vector_1_dec_bit_of_regval  :: " register_value \<Rightarrow>((1)Word.word)option "  where 
     " vector_1_dec_bit_of_regval (Regval_vector_1_dec_bit (v)) = ( Some v )"
|" vector_1_dec_bit_of_regval g__33 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_1_dec_bit : mword ty1 -> register_value\<close>\<close>

definition regval_of_vector_1_dec_bit  :: "(1)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_1_dec_bit v = ( Regval_vector_1_dec_bit v )"


\<comment> \<open>\<open>val vector_2_dec_bit_of_regval : register_value -> maybe (mword ty2)\<close>\<close>

fun vector_2_dec_bit_of_regval  :: " register_value \<Rightarrow>((2)Word.word)option "  where 
     " vector_2_dec_bit_of_regval (Regval_vector_2_dec_bit (v)) = ( Some v )"
|" vector_2_dec_bit_of_regval g__32 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_2_dec_bit : mword ty2 -> register_value\<close>\<close>

definition regval_of_vector_2_dec_bit  :: "(2)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_2_dec_bit v = ( Regval_vector_2_dec_bit v )"


\<comment> \<open>\<open>val vector_32_dec_bit_of_regval : register_value -> maybe (mword ty32)\<close>\<close>

fun vector_32_dec_bit_of_regval  :: " register_value \<Rightarrow>((32)Word.word)option "  where 
     " vector_32_dec_bit_of_regval (Regval_vector_32_dec_bit (v)) = ( Some v )"
|" vector_32_dec_bit_of_regval g__31 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_32_dec_bit : mword ty32 -> register_value\<close>\<close>

definition regval_of_vector_32_dec_bit  :: "(32)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_32_dec_bit v = ( Regval_vector_32_dec_bit v )"


\<comment> \<open>\<open>val vector_4_dec_bit_of_regval : register_value -> maybe (mword ty4)\<close>\<close>

fun vector_4_dec_bit_of_regval  :: " register_value \<Rightarrow>((4)Word.word)option "  where 
     " vector_4_dec_bit_of_regval (Regval_vector_4_dec_bit (v)) = ( Some v )"
|" vector_4_dec_bit_of_regval g__30 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_4_dec_bit : mword ty4 -> register_value\<close>\<close>

definition regval_of_vector_4_dec_bit  :: "(4)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_4_dec_bit v = ( Regval_vector_4_dec_bit v )"


\<comment> \<open>\<open>val vector_52_dec_bit_of_regval : register_value -> maybe (mword ty52)\<close>\<close>

fun vector_52_dec_bit_of_regval  :: " register_value \<Rightarrow>((52)Word.word)option "  where 
     " vector_52_dec_bit_of_regval (Regval_vector_52_dec_bit (v)) = ( Some v )"
|" vector_52_dec_bit_of_regval g__29 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_52_dec_bit : mword ty52 -> register_value\<close>\<close>

definition regval_of_vector_52_dec_bit  :: "(52)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_52_dec_bit v = ( Regval_vector_52_dec_bit v )"


\<comment> \<open>\<open>val vector_56_dec_bit_of_regval : register_value -> maybe (mword ty56)\<close>\<close>

fun vector_56_dec_bit_of_regval  :: " register_value \<Rightarrow>((56)Word.word)option "  where 
     " vector_56_dec_bit_of_regval (Regval_vector_56_dec_bit (v)) = ( Some v )"
|" vector_56_dec_bit_of_regval g__28 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_56_dec_bit : mword ty56 -> register_value\<close>\<close>

definition regval_of_vector_56_dec_bit  :: "(56)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_56_dec_bit v = ( Regval_vector_56_dec_bit v )"


\<comment> \<open>\<open>val vector_64_dec_bit_of_regval : register_value -> maybe (mword ty64)\<close>\<close>

fun vector_64_dec_bit_of_regval  :: " register_value \<Rightarrow>((64)Word.word)option "  where 
     " vector_64_dec_bit_of_regval (Regval_vector_64_dec_bit (v)) = ( Some v )"
|" vector_64_dec_bit_of_regval g__27 = ( None )"


\<comment> \<open>\<open>val regval_of_vector_64_dec_bit : mword ty64 -> register_value\<close>\<close>

definition regval_of_vector_64_dec_bit  :: "(64)Word.word \<Rightarrow> register_value "  where 
     " regval_of_vector_64_dec_bit v = ( Regval_vector_64_dec_bit v )"




\<comment> \<open>\<open>val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
definition vector_of_regval  :: "(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option "  where 
     " vector_of_regval of_regval1 = ( \<lambda>x .  
  (case  x of
        Regval_vector (_, _, v) => just_list (List.map of_regval1 v)
    | _ => None
  ) )"


\<comment> \<open>\<open>val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value\<close>\<close>
definition regval_of_vector  :: "('a \<Rightarrow> register_value)\<Rightarrow> int \<Rightarrow> bool \<Rightarrow> 'a list \<Rightarrow> register_value "  where 
     " regval_of_vector regval_of1 size1 is_inc xs = ( Regval_vector (size1, is_inc, List.map regval_of1 xs))"


\<comment> \<open>\<open>val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)\<close>\<close>
definition list_of_regval  :: "(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a list)option "  where 
     " list_of_regval of_regval1 = ( \<lambda>x .  
  (case  x of
        Regval_list v => just_list (List.map of_regval1 v)
    | _ => None
  ) )"


\<comment> \<open>\<open>val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value\<close>\<close>
definition regval_of_list  :: "('a \<Rightarrow> register_value)\<Rightarrow> 'a list \<Rightarrow> register_value "  where 
     " regval_of_list regval_of1 xs = ( Regval_list (List.map regval_of1 xs))"


\<comment> \<open>\<open>val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)\<close>\<close>
definition option_of_regval  :: "(register_value \<Rightarrow> 'a option)\<Rightarrow> register_value \<Rightarrow>('a option)option "  where 
     " option_of_regval of_regval1 = ( \<lambda>x .  
  (case  x of
        Regval_option v => Some (Option.bind v of_regval1)
    | _ => None
  ) )"


\<comment> \<open>\<open>val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value\<close>\<close>
definition regval_of_option  :: "('a \<Rightarrow> register_value)\<Rightarrow> 'a option \<Rightarrow> register_value "  where 
     " regval_of_option regval_of1 v = ( Regval_option (map_option regval_of1 v))"



definition CNTHCTL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHCTL_EL2_ref = ( (|
  name = (''CNTHCTL_EL2''),
  read_from = (\<lambda> s . (CNTHCTL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHCTL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CPTR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CPTR_EL2_ref = ( (|
  name = (''CPTR_EL2''),
  read_from = (\<lambda> s . (CPTR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CPTR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CCSIDR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CCSIDR_EL1_ref = ( (|
  name = (''CCSIDR_EL1''),
  read_from = (\<lambda> s . (CCSIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CCSIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ACTLR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ACTLR_EL1_ref = ( (|
  name = (''ACTLR_EL1''),
  read_from = (\<lambda> s . (ACTLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ACTLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ACTLR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ACTLR_EL2_ref = ( (|
  name = (''ACTLR_EL2''),
  read_from = (\<lambda> s . (ACTLR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ACTLR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ACTLR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ACTLR_EL3_ref = ( (|
  name = (''ACTLR_EL3''),
  read_from = (\<lambda> s . (ACTLR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ACTLR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition AFSR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AFSR0_EL1_ref = ( (|
  name = (''AFSR0_EL1''),
  read_from = (\<lambda> s . (AFSR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| AFSR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AFSR0_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AFSR0_EL2_ref = ( (|
  name = (''AFSR0_EL2''),
  read_from = (\<lambda> s . (AFSR0_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| AFSR0_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AFSR0_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AFSR0_EL3_ref = ( (|
  name = (''AFSR0_EL3''),
  read_from = (\<lambda> s . (AFSR0_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| AFSR0_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AFSR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AFSR1_EL1_ref = ( (|
  name = (''AFSR1_EL1''),
  read_from = (\<lambda> s . (AFSR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| AFSR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AFSR1_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AFSR1_EL2_ref = ( (|
  name = (''AFSR1_EL2''),
  read_from = (\<lambda> s . (AFSR1_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| AFSR1_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AFSR1_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AFSR1_EL3_ref = ( (|
  name = (''AFSR1_EL3''),
  read_from = (\<lambda> s . (AFSR1_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| AFSR1_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AIDR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AIDR_EL1_ref = ( (|
  name = (''AIDR_EL1''),
  read_from = (\<lambda> s . (AIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| AIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AMAIR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " AMAIR_EL1_ref = ( (|
  name = (''AMAIR_EL1''),
  read_from = (\<lambda> s . (AMAIR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| AMAIR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition AMAIR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " AMAIR_EL2_ref = ( (|
  name = (''AMAIR_EL2''),
  read_from = (\<lambda> s . (AMAIR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| AMAIR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition AMAIR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " AMAIR_EL3_ref = ( (|
  name = (''AMAIR_EL3''),
  read_from = (\<lambda> s . (AMAIR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| AMAIR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDAKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDAKeyHi_EL1_ref = ( (|
  name = (''APDAKeyHi_EL1''),
  read_from = (\<lambda> s . (APDAKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDAKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDAKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDAKeyLo_EL1_ref = ( (|
  name = (''APDAKeyLo_EL1''),
  read_from = (\<lambda> s . (APDAKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDAKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDBKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDBKeyHi_EL1_ref = ( (|
  name = (''APDBKeyHi_EL1''),
  read_from = (\<lambda> s . (APDBKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDBKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APDBKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APDBKeyLo_EL1_ref = ( (|
  name = (''APDBKeyLo_EL1''),
  read_from = (\<lambda> s . (APDBKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APDBKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APGAKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APGAKeyHi_EL1_ref = ( (|
  name = (''APGAKeyHi_EL1''),
  read_from = (\<lambda> s . (APGAKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APGAKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APGAKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APGAKeyLo_EL1_ref = ( (|
  name = (''APGAKeyLo_EL1''),
  read_from = (\<lambda> s . (APGAKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APGAKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIAKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIAKeyHi_EL1_ref = ( (|
  name = (''APIAKeyHi_EL1''),
  read_from = (\<lambda> s . (APIAKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIAKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIAKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIAKeyLo_EL1_ref = ( (|
  name = (''APIAKeyLo_EL1''),
  read_from = (\<lambda> s . (APIAKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIAKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIBKeyHi_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIBKeyHi_EL1_ref = ( (|
  name = (''APIBKeyHi_EL1''),
  read_from = (\<lambda> s . (APIBKeyHi_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIBKeyHi_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition APIBKeyLo_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " APIBKeyLo_EL1_ref = ( (|
  name = (''APIBKeyLo_EL1''),
  read_from = (\<lambda> s . (APIBKeyLo_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| APIBKeyLo_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition BTypeCompatible_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " BTypeCompatible_ref = ( (|
  name = (''BTypeCompatible''),
  read_from = (\<lambda> s . (BTypeCompatible   s)),
  write_to = (\<lambda> v s .  (( s (| BTypeCompatible := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition BTypeNext_ref  :: "((regstate),(register_value),((2)Word.word))register_ref "  where 
     " BTypeNext_ref = ( (|
  name = (''BTypeNext''),
  read_from = (\<lambda> s . (BTypeNext   s)),
  write_to = (\<lambda> v s .  (( s (| BTypeNext := v |)))),
  of_regval = (\<lambda> v .  vector_2_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_2_dec_bit v) |) )"


definition CCSIDR2_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CCSIDR2_EL1_ref = ( (|
  name = (''CCSIDR2_EL1''),
  read_from = (\<lambda> s . (CCSIDR2_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CCSIDR2_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CLIDR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CLIDR_EL1_ref = ( (|
  name = (''CLIDR_EL1''),
  read_from = (\<lambda> s . (CLIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CLIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTFRQ_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTFRQ_EL0_ref = ( (|
  name = (''CNTFRQ_EL0''),
  read_from = (\<lambda> s . (CNTFRQ_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTFRQ_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHPS_CTL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHPS_CTL_EL2_ref = ( (|
  name = (''CNTHPS_CTL_EL2''),
  read_from = (\<lambda> s . (CNTHPS_CTL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHPS_CTL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHPS_CVAL_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTHPS_CVAL_EL2_ref = ( (|
  name = (''CNTHPS_CVAL_EL2''),
  read_from = (\<lambda> s . (CNTHPS_CVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHPS_CVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTHPS_TVAL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHPS_TVAL_EL2_ref = ( (|
  name = (''CNTHPS_TVAL_EL2''),
  read_from = (\<lambda> s . (CNTHPS_TVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHPS_TVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHP_CTL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHP_CTL_EL2_ref = ( (|
  name = (''CNTHP_CTL_EL2''),
  read_from = (\<lambda> s . (CNTHP_CTL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHP_CTL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHP_CVAL_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTHP_CVAL_EL2_ref = ( (|
  name = (''CNTHP_CVAL_EL2''),
  read_from = (\<lambda> s . (CNTHP_CVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHP_CVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTHP_TVAL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHP_TVAL_EL2_ref = ( (|
  name = (''CNTHP_TVAL_EL2''),
  read_from = (\<lambda> s . (CNTHP_TVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHP_TVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHVS_CTL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHVS_CTL_EL2_ref = ( (|
  name = (''CNTHVS_CTL_EL2''),
  read_from = (\<lambda> s . (CNTHVS_CTL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHVS_CTL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHVS_CVAL_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTHVS_CVAL_EL2_ref = ( (|
  name = (''CNTHVS_CVAL_EL2''),
  read_from = (\<lambda> s . (CNTHVS_CVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHVS_CVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTHVS_TVAL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHVS_TVAL_EL2_ref = ( (|
  name = (''CNTHVS_TVAL_EL2''),
  read_from = (\<lambda> s . (CNTHVS_TVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHVS_TVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHV_CTL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHV_CTL_EL2_ref = ( (|
  name = (''CNTHV_CTL_EL2''),
  read_from = (\<lambda> s . (CNTHV_CTL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHV_CTL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTHV_CVAL_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTHV_CVAL_EL2_ref = ( (|
  name = (''CNTHV_CVAL_EL2''),
  read_from = (\<lambda> s . (CNTHV_CVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHV_CVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTHV_TVAL_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTHV_TVAL_EL2_ref = ( (|
  name = (''CNTHV_TVAL_EL2''),
  read_from = (\<lambda> s . (CNTHV_TVAL_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTHV_TVAL_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTKCTL_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTKCTL_EL1_ref = ( (|
  name = (''CNTKCTL_EL1''),
  read_from = (\<lambda> s . (CNTKCTL_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CNTKCTL_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTPCT_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTPCT_EL0_ref = ( (|
  name = (''CNTPCT_EL0''),
  read_from = (\<lambda> s . (CNTPCT_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTPCT_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTPS_CTL_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTPS_CTL_EL1_ref = ( (|
  name = (''CNTPS_CTL_EL1''),
  read_from = (\<lambda> s . (CNTPS_CTL_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CNTPS_CTL_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTPS_CVAL_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTPS_CVAL_EL1_ref = ( (|
  name = (''CNTPS_CVAL_EL1''),
  read_from = (\<lambda> s . (CNTPS_CVAL_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CNTPS_CVAL_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTPS_TVAL_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTPS_TVAL_EL1_ref = ( (|
  name = (''CNTPS_TVAL_EL1''),
  read_from = (\<lambda> s . (CNTPS_TVAL_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CNTPS_TVAL_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTP_CTL_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTP_CTL_EL0_ref = ( (|
  name = (''CNTP_CTL_EL0''),
  read_from = (\<lambda> s . (CNTP_CTL_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTP_CTL_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTP_CTL_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTP_CTL_S_ref = ( (|
  name = (''CNTP_CTL_S''),
  read_from = (\<lambda> s . (CNTP_CTL_S   s)),
  write_to = (\<lambda> v s .  (( s (| CNTP_CTL_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTP_CVAL_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTP_CVAL_EL0_ref = ( (|
  name = (''CNTP_CVAL_EL0''),
  read_from = (\<lambda> s . (CNTP_CVAL_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTP_CVAL_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTP_TVAL_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTP_TVAL_EL0_ref = ( (|
  name = (''CNTP_TVAL_EL0''),
  read_from = (\<lambda> s . (CNTP_TVAL_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTP_TVAL_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTVCT_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTVCT_EL0_ref = ( (|
  name = (''CNTVCT_EL0''),
  read_from = (\<lambda> s . (CNTVCT_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTVCT_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTVOFF_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTVOFF_EL2_ref = ( (|
  name = (''CNTVOFF_EL2''),
  read_from = (\<lambda> s . (CNTVOFF_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CNTVOFF_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTV_CTL_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTV_CTL_EL0_ref = ( (|
  name = (''CNTV_CTL_EL0''),
  read_from = (\<lambda> s . (CNTV_CTL_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTV_CTL_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTV_CVAL_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTV_CVAL_EL0_ref = ( (|
  name = (''CNTV_CVAL_EL0''),
  read_from = (\<lambda> s . (CNTV_CVAL_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTV_CVAL_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTV_TVAL_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTV_TVAL_EL0_ref = ( (|
  name = (''CNTV_TVAL_EL0''),
  read_from = (\<lambda> s . (CNTV_TVAL_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTV_TVAL_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CPACR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CPACR_EL1_ref = ( (|
  name = (''CPACR_EL1''),
  read_from = (\<lambda> s . (CPACR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CPACR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CPTR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CPTR_EL3_ref = ( (|
  name = (''CPTR_EL3''),
  read_from = (\<lambda> s . (CPTR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| CPTR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CSSELR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CSSELR_EL1_ref = ( (|
  name = (''CSSELR_EL1''),
  read_from = (\<lambda> s . (CSSELR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CSSELR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CSSELR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CSSELR_S_ref = ( (|
  name = (''CSSELR_S''),
  read_from = (\<lambda> s . (CSSELR_S   s)),
  write_to = (\<lambda> v s .  (( s (| CSSELR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CTR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CTR_EL0_ref = ( (|
  name = (''CTR_EL0''),
  read_from = (\<lambda> s . (CTR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| CTR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition DBGAUTHSTATUS_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGAUTHSTATUS_EL1_ref = ( (|
  name = (''DBGAUTHSTATUS_EL1''),
  read_from = (\<lambda> s . (DBGAUTHSTATUS_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGAUTHSTATUS_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGCLAIMCLR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGCLAIMCLR_EL1_ref = ( (|
  name = (''DBGCLAIMCLR_EL1''),
  read_from = (\<lambda> s . (DBGCLAIMCLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGCLAIMCLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGCLAIMSET_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGCLAIMSET_EL1_ref = ( (|
  name = (''DBGCLAIMSET_EL1''),
  read_from = (\<lambda> s . (DBGCLAIMSET_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGCLAIMSET_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGDEVID1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGDEVID1_ref = ( (|
  name = (''DBGDEVID1''),
  read_from = (\<lambda> s . (DBGDEVID1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDEVID1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGDEVID2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGDEVID2_ref = ( (|
  name = (''DBGDEVID2''),
  read_from = (\<lambda> s . (DBGDEVID2   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDEVID2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGDSCRint_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGDSCRint_ref = ( (|
  name = (''DBGDSCRint''),
  read_from = (\<lambda> s . (DBGDSCRint   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDSCRint := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGDTRRX_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGDTRRX_EL0_ref = ( (|
  name = (''DBGDTRRX_EL0''),
  read_from = (\<lambda> s . (DBGDTRRX_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDTRRX_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGDTRTX_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGDTRTX_EL0_ref = ( (|
  name = (''DBGDTRTX_EL0''),
  read_from = (\<lambda> s . (DBGDTRTX_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDTRTX_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGDTR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " DBGDTR_EL0_ref = ( (|
  name = (''DBGDTR_EL0''),
  read_from = (\<lambda> s . (DBGDTR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDTR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition DBGWFAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGWFAR_ref = ( (|
  name = (''DBGWFAR''),
  read_from = (\<lambda> s . (DBGWFAR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWFAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DCZID_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DCZID_EL0_ref = ( (|
  name = (''DCZID_EL0''),
  read_from = (\<lambda> s . (DCZID_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DCZID_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DISR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " DISR_EL1_ref = ( (|
  name = (''DISR_EL1''),
  read_from = (\<lambda> s . (DISR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DISR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition EDECCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDECCR_ref = ( (|
  name = (''EDECCR''),
  read_from = (\<lambda> s . (EDECCR   s)),
  write_to = (\<lambda> v s .  (( s (| EDECCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDECR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDECR_ref = ( (|
  name = (''EDECR''),
  read_from = (\<lambda> s . (EDECR   s)),
  write_to = (\<lambda> v s .  (( s (| EDECR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDESR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDESR_ref = ( (|
  name = (''EDESR''),
  read_from = (\<lambda> s . (EDESR   s)),
  write_to = (\<lambda> v s .  (( s (| EDESR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDLSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDLSR_ref = ( (|
  name = (''EDLSR''),
  read_from = (\<lambda> s . (EDLSR   s)),
  write_to = (\<lambda> v s .  (( s (| EDLSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDPCSR_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " EDPCSR_ref = ( (|
  name = (''EDPCSR''),
  read_from = (\<lambda> s . (EDPCSR   s)),
  write_to = (\<lambda> v s .  (( s (| EDPCSR := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition EDPFR_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " EDPFR_ref = ( (|
  name = (''EDPFR''),
  read_from = (\<lambda> s . (EDPFR   s)),
  write_to = (\<lambda> v s .  (( s (| EDPFR := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition EDPRCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDPRCR_ref = ( (|
  name = (''EDPRCR''),
  read_from = (\<lambda> s . (EDPRCR   s)),
  write_to = (\<lambda> v s .  (( s (| EDPRCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDPRSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDPRSR_ref = ( (|
  name = (''EDPRSR''),
  read_from = (\<lambda> s . (EDPRSR   s)),
  write_to = (\<lambda> v s .  (( s (| EDPRSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDVIDSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDVIDSR_ref = ( (|
  name = (''EDVIDSR''),
  read_from = (\<lambda> s . (EDVIDSR   s)),
  write_to = (\<lambda> v s .  (( s (| EDVIDSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ELR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL0_ref = ( (|
  name = (''ELR_EL0''),
  read_from = (\<lambda> s . (ELR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ESP_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ESP_EL0_ref = ( (|
  name = (''ESP_EL0''),
  read_from = (\<lambda> s . (ESP_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| ESP_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ESR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL0_ref = ( (|
  name = (''ESR_EL0''),
  read_from = (\<lambda> s . (ESR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EventRegister_ref  :: "((regstate),(register_value),((1)Word.word))register_ref "  where 
     " EventRegister_ref = ( (|
  name = (''EventRegister''),
  read_from = (\<lambda> s . (EventRegister   s)),
  write_to = (\<lambda> v s .  (( s (| EventRegister := v |)))),
  of_regval = (\<lambda> v .  vector_1_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_1_dec_bit v) |) )"


definition FAR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL0_ref = ( (|
  name = (''FAR_EL0''),
  read_from = (\<lambda> s . (FAR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition FCSEIDR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FCSEIDR_ref = ( (|
  name = (''FCSEIDR''),
  read_from = (\<lambda> s . (FCSEIDR   s)),
  write_to = (\<lambda> v s .  (( s (| FCSEIDR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPCR_ref = ( (|
  name = (''FPCR''),
  read_from = (\<lambda> s . (FPCR   s)),
  write_to = (\<lambda> v s .  (( s (| FPCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPEXC32_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPEXC32_EL2_ref = ( (|
  name = (''FPEXC32_EL2''),
  read_from = (\<lambda> s . (FPEXC32_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| FPEXC32_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPSCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPSCR_ref = ( (|
  name = (''FPSCR''),
  read_from = (\<lambda> s . (FPSCR   s)),
  write_to = (\<lambda> v s .  (( s (| FPSCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPSID_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPSID_ref = ( (|
  name = (''FPSID''),
  read_from = (\<lambda> s . (FPSID   s)),
  write_to = (\<lambda> v s .  (( s (| FPSID := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FPSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " FPSR_ref = ( (|
  name = (''FPSR''),
  read_from = (\<lambda> s . (FPSR   s)),
  write_to = (\<lambda> v s .  (( s (| FPSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition GCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " GCR_EL1_ref = ( (|
  name = (''GCR_EL1''),
  read_from = (\<lambda> s . (GCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| GCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HACR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HACR_EL2_ref = ( (|
  name = (''HACR_EL2''),
  read_from = (\<lambda> s . (HACR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| HACR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition HSTR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " HSTR_EL2_ref = ( (|
  name = (''HSTR_EL2''),
  read_from = (\<lambda> s . (HSTR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| HSTR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_AP0R_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " ICC_AP0R_EL1_ref = ( (|
  name = (''ICC_AP0R_EL1''),
  read_from = (\<lambda> s . (ICC_AP0R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_AP0R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 5 :: int)) False v) |) )"


definition ICC_AP1R_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " ICC_AP1R_EL1_ref = ( (|
  name = (''ICC_AP1R_EL1''),
  read_from = (\<lambda> s . (ICC_AP1R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_AP1R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 5 :: int)) False v) |) )"


definition ICC_ASGI1R_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ICC_ASGI1R_EL1_ref = ( (|
  name = (''ICC_ASGI1R_EL1''),
  read_from = (\<lambda> s . (ICC_ASGI1R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_ASGI1R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ICC_BPR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_BPR0_EL1_ref = ( (|
  name = (''ICC_BPR0_EL1''),
  read_from = (\<lambda> s . (ICC_BPR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_BPR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_BPR1_EL1_NS_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_BPR1_EL1_NS_ref = ( (|
  name = (''ICC_BPR1_EL1_NS''),
  read_from = (\<lambda> s . (ICC_BPR1_EL1_NS   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_BPR1_EL1_NS := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_BPR1_EL1_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_BPR1_EL1_S_ref = ( (|
  name = (''ICC_BPR1_EL1_S''),
  read_from = (\<lambda> s . (ICC_BPR1_EL1_S   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_BPR1_EL1_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_CTLR_EL1_NS_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_CTLR_EL1_NS_ref = ( (|
  name = (''ICC_CTLR_EL1_NS''),
  read_from = (\<lambda> s . (ICC_CTLR_EL1_NS   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_CTLR_EL1_NS := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_CTLR_EL1_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_CTLR_EL1_S_ref = ( (|
  name = (''ICC_CTLR_EL1_S''),
  read_from = (\<lambda> s . (ICC_CTLR_EL1_S   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_CTLR_EL1_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_CTLR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_CTLR_EL3_ref = ( (|
  name = (''ICC_CTLR_EL3''),
  read_from = (\<lambda> s . (ICC_CTLR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_CTLR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_DIR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_DIR_EL1_ref = ( (|
  name = (''ICC_DIR_EL1''),
  read_from = (\<lambda> s . (ICC_DIR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_DIR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_EOIR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_EOIR0_EL1_ref = ( (|
  name = (''ICC_EOIR0_EL1''),
  read_from = (\<lambda> s . (ICC_EOIR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_EOIR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_EOIR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_EOIR1_EL1_ref = ( (|
  name = (''ICC_EOIR1_EL1''),
  read_from = (\<lambda> s . (ICC_EOIR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_EOIR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_HPPIR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_HPPIR0_EL1_ref = ( (|
  name = (''ICC_HPPIR0_EL1''),
  read_from = (\<lambda> s . (ICC_HPPIR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_HPPIR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_HPPIR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_HPPIR1_EL1_ref = ( (|
  name = (''ICC_HPPIR1_EL1''),
  read_from = (\<lambda> s . (ICC_HPPIR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_HPPIR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_IAR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_IAR0_EL1_ref = ( (|
  name = (''ICC_IAR0_EL1''),
  read_from = (\<lambda> s . (ICC_IAR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_IAR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_IAR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_IAR1_EL1_ref = ( (|
  name = (''ICC_IAR1_EL1''),
  read_from = (\<lambda> s . (ICC_IAR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_IAR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_IGRPEN0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_IGRPEN0_EL1_ref = ( (|
  name = (''ICC_IGRPEN0_EL1''),
  read_from = (\<lambda> s . (ICC_IGRPEN0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_IGRPEN0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_IGRPEN1_EL1_NS_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_IGRPEN1_EL1_NS_ref = ( (|
  name = (''ICC_IGRPEN1_EL1_NS''),
  read_from = (\<lambda> s . (ICC_IGRPEN1_EL1_NS   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_IGRPEN1_EL1_NS := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_IGRPEN1_EL1_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_IGRPEN1_EL1_S_ref = ( (|
  name = (''ICC_IGRPEN1_EL1_S''),
  read_from = (\<lambda> s . (ICC_IGRPEN1_EL1_S   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_IGRPEN1_EL1_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_IGRPEN1_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_IGRPEN1_EL3_ref = ( (|
  name = (''ICC_IGRPEN1_EL3''),
  read_from = (\<lambda> s . (ICC_IGRPEN1_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_IGRPEN1_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_PMR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_PMR_EL1_ref = ( (|
  name = (''ICC_PMR_EL1''),
  read_from = (\<lambda> s . (ICC_PMR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_PMR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_RPR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_RPR_EL1_ref = ( (|
  name = (''ICC_RPR_EL1''),
  read_from = (\<lambda> s . (ICC_RPR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_RPR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_SGI0R_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ICC_SGI0R_EL1_ref = ( (|
  name = (''ICC_SGI0R_EL1''),
  read_from = (\<lambda> s . (ICC_SGI0R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_SGI0R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ICC_SGI1R_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ICC_SGI1R_EL1_ref = ( (|
  name = (''ICC_SGI1R_EL1''),
  read_from = (\<lambda> s . (ICC_SGI1R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_SGI1R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ICC_SRE_EL1_NS_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_SRE_EL1_NS_ref = ( (|
  name = (''ICC_SRE_EL1_NS''),
  read_from = (\<lambda> s . (ICC_SRE_EL1_NS   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_SRE_EL1_NS := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_SRE_EL1_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_SRE_EL1_S_ref = ( (|
  name = (''ICC_SRE_EL1_S''),
  read_from = (\<lambda> s . (ICC_SRE_EL1_S   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_SRE_EL1_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_SRE_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_SRE_EL2_ref = ( (|
  name = (''ICC_SRE_EL2''),
  read_from = (\<lambda> s . (ICC_SRE_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_SRE_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICC_SRE_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICC_SRE_EL3_ref = ( (|
  name = (''ICC_SRE_EL3''),
  read_from = (\<lambda> s . (ICC_SRE_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ICC_SRE_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICH_AP0R_EL2_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " ICH_AP0R_EL2_ref = ( (|
  name = (''ICH_AP0R_EL2''),
  read_from = (\<lambda> s . (ICH_AP0R_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_AP0R_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 5 :: int)) False v) |) )"


definition ICH_AP1R_EL2_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " ICH_AP1R_EL2_ref = ( (|
  name = (''ICH_AP1R_EL2''),
  read_from = (\<lambda> s . (ICH_AP1R_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_AP1R_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 5 :: int)) False v) |) )"


definition ICH_EISR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICH_EISR_EL2_ref = ( (|
  name = (''ICH_EISR_EL2''),
  read_from = (\<lambda> s . (ICH_EISR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_EISR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICH_ELRSR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICH_ELRSR_EL2_ref = ( (|
  name = (''ICH_ELRSR_EL2''),
  read_from = (\<lambda> s . (ICH_ELRSR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_ELRSR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICH_HCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICH_HCR_EL2_ref = ( (|
  name = (''ICH_HCR_EL2''),
  read_from = (\<lambda> s . (ICH_HCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_HCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICH_MISR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICH_MISR_EL2_ref = ( (|
  name = (''ICH_MISR_EL2''),
  read_from = (\<lambda> s . (ICH_MISR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_MISR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICH_VMCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICH_VMCR_EL2_ref = ( (|
  name = (''ICH_VMCR_EL2''),
  read_from = (\<lambda> s . (ICH_VMCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_VMCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICH_VTR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICH_VTR_EL2_ref = ( (|
  name = (''ICH_VTR_EL2''),
  read_from = (\<lambda> s . (ICH_VTR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ICH_VTR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_AP0R_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " ICV_AP0R_EL1_ref = ( (|
  name = (''ICV_AP0R_EL1''),
  read_from = (\<lambda> s . (ICV_AP0R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_AP0R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 5 :: int)) False v) |) )"


definition ICV_AP1R_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " ICV_AP1R_EL1_ref = ( (|
  name = (''ICV_AP1R_EL1''),
  read_from = (\<lambda> s . (ICV_AP1R_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_AP1R_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 5 :: int)) False v) |) )"


definition ICV_BPR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_BPR0_EL1_ref = ( (|
  name = (''ICV_BPR0_EL1''),
  read_from = (\<lambda> s . (ICV_BPR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_BPR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_BPR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_BPR1_EL1_ref = ( (|
  name = (''ICV_BPR1_EL1''),
  read_from = (\<lambda> s . (ICV_BPR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_BPR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_CTLR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_CTLR_EL1_ref = ( (|
  name = (''ICV_CTLR_EL1''),
  read_from = (\<lambda> s . (ICV_CTLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_CTLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_DIR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_DIR_EL1_ref = ( (|
  name = (''ICV_DIR_EL1''),
  read_from = (\<lambda> s . (ICV_DIR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_DIR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_EOIR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_EOIR0_EL1_ref = ( (|
  name = (''ICV_EOIR0_EL1''),
  read_from = (\<lambda> s . (ICV_EOIR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_EOIR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_EOIR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_EOIR1_EL1_ref = ( (|
  name = (''ICV_EOIR1_EL1''),
  read_from = (\<lambda> s . (ICV_EOIR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_EOIR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_HPPIR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_HPPIR0_EL1_ref = ( (|
  name = (''ICV_HPPIR0_EL1''),
  read_from = (\<lambda> s . (ICV_HPPIR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_HPPIR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_HPPIR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_HPPIR1_EL1_ref = ( (|
  name = (''ICV_HPPIR1_EL1''),
  read_from = (\<lambda> s . (ICV_HPPIR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_HPPIR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_IAR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_IAR0_EL1_ref = ( (|
  name = (''ICV_IAR0_EL1''),
  read_from = (\<lambda> s . (ICV_IAR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_IAR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_IAR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_IAR1_EL1_ref = ( (|
  name = (''ICV_IAR1_EL1''),
  read_from = (\<lambda> s . (ICV_IAR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_IAR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_IGRPEN0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_IGRPEN0_EL1_ref = ( (|
  name = (''ICV_IGRPEN0_EL1''),
  read_from = (\<lambda> s . (ICV_IGRPEN0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_IGRPEN0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_IGRPEN1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_IGRPEN1_EL1_ref = ( (|
  name = (''ICV_IGRPEN1_EL1''),
  read_from = (\<lambda> s . (ICV_IGRPEN1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_IGRPEN1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_PMR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_PMR_EL1_ref = ( (|
  name = (''ICV_PMR_EL1''),
  read_from = (\<lambda> s . (ICV_PMR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_PMR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ICV_RPR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ICV_RPR_EL1_ref = ( (|
  name = (''ICV_RPR_EL1''),
  read_from = (\<lambda> s . (ICV_RPR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ICV_RPR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AA64AFR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_AA64AFR0_EL1_ref = ( (|
  name = (''ID_AA64AFR0_EL1''),
  read_from = (\<lambda> s . (ID_AA64AFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64AFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AA64AFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_AA64AFR1_EL1_ref = ( (|
  name = (''ID_AA64AFR1_EL1''),
  read_from = (\<lambda> s . (ID_AA64AFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64AFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AA64DFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_AA64DFR1_EL1_ref = ( (|
  name = (''ID_AA64DFR1_EL1''),
  read_from = (\<lambda> s . (ID_AA64DFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64DFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AA64ISAR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64ISAR0_EL1_ref = ( (|
  name = (''ID_AA64ISAR0_EL1''),
  read_from = (\<lambda> s . (ID_AA64ISAR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64ISAR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ID_AA64ISAR1_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64ISAR1_EL1_ref = ( (|
  name = (''ID_AA64ISAR1_EL1''),
  read_from = (\<lambda> s . (ID_AA64ISAR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64ISAR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ID_AA64MMFR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64MMFR0_EL1_ref = ( (|
  name = (''ID_AA64MMFR0_EL1''),
  read_from = (\<lambda> s . (ID_AA64MMFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64MMFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ID_AA64MMFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_AA64MMFR1_EL1_ref = ( (|
  name = (''ID_AA64MMFR1_EL1''),
  read_from = (\<lambda> s . (ID_AA64MMFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64MMFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AA64MMFR2_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64MMFR2_EL1_ref = ( (|
  name = (''ID_AA64MMFR2_EL1''),
  read_from = (\<lambda> s . (ID_AA64MMFR2_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64MMFR2_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ID_AA64PFR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64PFR0_EL1_ref = ( (|
  name = (''ID_AA64PFR0_EL1''),
  read_from = (\<lambda> s . (ID_AA64PFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64PFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ID_AA64PFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_AA64PFR1_EL1_ref = ( (|
  name = (''ID_AA64PFR1_EL1''),
  read_from = (\<lambda> s . (ID_AA64PFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64PFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_AFR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_AFR0_EL1_ref = ( (|
  name = (''ID_AFR0_EL1''),
  read_from = (\<lambda> s . (ID_AFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_DFR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_DFR0_EL1_ref = ( (|
  name = (''ID_DFR0_EL1''),
  read_from = (\<lambda> s . (ID_DFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_DFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR0_EL1_ref = ( (|
  name = (''ID_ISAR0_EL1''),
  read_from = (\<lambda> s . (ID_ISAR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR1_EL1_ref = ( (|
  name = (''ID_ISAR1_EL1''),
  read_from = (\<lambda> s . (ID_ISAR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR2_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR2_EL1_ref = ( (|
  name = (''ID_ISAR2_EL1''),
  read_from = (\<lambda> s . (ID_ISAR2_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR2_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR3_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR3_EL1_ref = ( (|
  name = (''ID_ISAR3_EL1''),
  read_from = (\<lambda> s . (ID_ISAR3_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR3_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR4_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR4_EL1_ref = ( (|
  name = (''ID_ISAR4_EL1''),
  read_from = (\<lambda> s . (ID_ISAR4_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR4_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR5_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR5_EL1_ref = ( (|
  name = (''ID_ISAR5_EL1''),
  read_from = (\<lambda> s . (ID_ISAR5_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR5_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_ISAR6_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_ISAR6_EL1_ref = ( (|
  name = (''ID_ISAR6_EL1''),
  read_from = (\<lambda> s . (ID_ISAR6_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_ISAR6_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_MMFR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_MMFR0_EL1_ref = ( (|
  name = (''ID_MMFR0_EL1''),
  read_from = (\<lambda> s . (ID_MMFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_MMFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_MMFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_MMFR1_EL1_ref = ( (|
  name = (''ID_MMFR1_EL1''),
  read_from = (\<lambda> s . (ID_MMFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_MMFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_MMFR2_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_MMFR2_EL1_ref = ( (|
  name = (''ID_MMFR2_EL1''),
  read_from = (\<lambda> s . (ID_MMFR2_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_MMFR2_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_MMFR3_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_MMFR3_EL1_ref = ( (|
  name = (''ID_MMFR3_EL1''),
  read_from = (\<lambda> s . (ID_MMFR3_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_MMFR3_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_MMFR4_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_MMFR4_EL1_ref = ( (|
  name = (''ID_MMFR4_EL1''),
  read_from = (\<lambda> s . (ID_MMFR4_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_MMFR4_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_PFR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_PFR0_EL1_ref = ( (|
  name = (''ID_PFR0_EL1''),
  read_from = (\<lambda> s . (ID_PFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_PFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_PFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_PFR1_EL1_ref = ( (|
  name = (''ID_PFR1_EL1''),
  read_from = (\<lambda> s . (ID_PFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_PFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ID_PFR2_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ID_PFR2_EL1_ref = ( (|
  name = (''ID_PFR2_EL1''),
  read_from = (\<lambda> s . (ID_PFR2_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_PFR2_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ISR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ISR_EL1_ref = ( (|
  name = (''ISR_EL1''),
  read_from = (\<lambda> s . (ISR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ISR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition LORC_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " LORC_EL1_ref = ( (|
  name = (''LORC_EL1''),
  read_from = (\<lambda> s . (LORC_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| LORC_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition LOREA_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " LOREA_EL1_ref = ( (|
  name = (''LOREA_EL1''),
  read_from = (\<lambda> s . (LOREA_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| LOREA_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition LORID_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " LORID_EL1_ref = ( (|
  name = (''LORID_EL1''),
  read_from = (\<lambda> s . (LORID_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| LORID_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition LORN_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " LORN_EL1_ref = ( (|
  name = (''LORN_EL1''),
  read_from = (\<lambda> s . (LORN_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| LORN_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition LORSA_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " LORSA_EL1_ref = ( (|
  name = (''LORSA_EL1''),
  read_from = (\<lambda> s . (LORSA_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| LORSA_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MDCCINT_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDCCINT_EL1_ref = ( (|
  name = (''MDCCINT_EL1''),
  read_from = (\<lambda> s . (MDCCINT_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MDCCINT_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MDCCSR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDCCSR_EL0_ref = ( (|
  name = (''MDCCSR_EL0''),
  read_from = (\<lambda> s . (MDCCSR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| MDCCSR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MDRAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MDRAR_EL1_ref = ( (|
  name = (''MDRAR_EL1''),
  read_from = (\<lambda> s . (MDRAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MDRAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MIDR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MIDR_EL1_ref = ( (|
  name = (''MIDR_EL1''),
  read_from = (\<lambda> s . (MIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MVFR0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MVFR0_EL1_ref = ( (|
  name = (''MVFR0_EL1''),
  read_from = (\<lambda> s . (MVFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MVFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MVFR1_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MVFR1_EL1_ref = ( (|
  name = (''MVFR1_EL1''),
  read_from = (\<lambda> s . (MVFR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MVFR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MVFR2_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MVFR2_EL1_ref = ( (|
  name = (''MVFR2_EL1''),
  read_from = (\<lambda> s . (MVFR2_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MVFR2_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition NSACR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " NSACR_ref = ( (|
  name = (''NSACR''),
  read_from = (\<lambda> s . (NSACR   s)),
  write_to = (\<lambda> v s .  (( s (| NSACR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSDTRRX_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSDTRRX_EL1_ref = ( (|
  name = (''OSDTRRX_EL1''),
  read_from = (\<lambda> s . (OSDTRRX_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSDTRRX_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSDTRTX_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSDTRTX_EL1_ref = ( (|
  name = (''OSDTRTX_EL1''),
  read_from = (\<lambda> s . (OSDTRTX_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSDTRTX_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSECCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSECCR_EL1_ref = ( (|
  name = (''OSECCR_EL1''),
  read_from = (\<lambda> s . (OSECCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSECCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSLAR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSLAR_EL1_ref = ( (|
  name = (''OSLAR_EL1''),
  read_from = (\<lambda> s . (OSLAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSLAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PAR_EL1_ref = ( (|
  name = (''PAR_EL1''),
  read_from = (\<lambda> s . (PAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| PAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PAR_S_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PAR_S_ref = ( (|
  name = (''PAR_S''),
  read_from = (\<lambda> s . (PAR_S   s)),
  write_to = (\<lambda> v s .  (( s (| PAR_S := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PMCCFILTR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMCCFILTR_EL0_ref = ( (|
  name = (''PMCCFILTR_EL0''),
  read_from = (\<lambda> s . (PMCCFILTR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCCFILTR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMCCNTR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PMCCNTR_EL0_ref = ( (|
  name = (''PMCCNTR_EL0''),
  read_from = (\<lambda> s . (PMCCNTR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCCNTR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PMCEID0_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PMCEID0_EL0_ref = ( (|
  name = (''PMCEID0_EL0''),
  read_from = (\<lambda> s . (PMCEID0_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCEID0_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PMCEID1_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PMCEID1_EL0_ref = ( (|
  name = (''PMCEID1_EL0''),
  read_from = (\<lambda> s . (PMCEID1_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCEID1_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PMCNTENCLR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMCNTENCLR_EL0_ref = ( (|
  name = (''PMCNTENCLR_EL0''),
  read_from = (\<lambda> s . (PMCNTENCLR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCNTENCLR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMCNTENSET_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMCNTENSET_EL0_ref = ( (|
  name = (''PMCNTENSET_EL0''),
  read_from = (\<lambda> s . (PMCNTENSET_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCNTENSET_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMCR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMCR_EL0_ref = ( (|
  name = (''PMCR_EL0''),
  read_from = (\<lambda> s . (PMCR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMCR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMEVCNTR_EL0_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " PMEVCNTR_EL0_ref = ( (|
  name = (''PMEVCNTR_EL0''),
  read_from = (\<lambda> s . (PMEVCNTR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMEVCNTR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 33 :: int)) False v) |) )"


definition PMEVTYPER_EL0_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " PMEVTYPER_EL0_ref = ( (|
  name = (''PMEVTYPER_EL0''),
  read_from = (\<lambda> s . (PMEVTYPER_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMEVTYPER_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 33 :: int)) False v) |) )"


definition PMINTENCLR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMINTENCLR_EL1_ref = ( (|
  name = (''PMINTENCLR_EL1''),
  read_from = (\<lambda> s . (PMINTENCLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| PMINTENCLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMINTENSET_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMINTENSET_EL1_ref = ( (|
  name = (''PMINTENSET_EL1''),
  read_from = (\<lambda> s . (PMINTENSET_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| PMINTENSET_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMLSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMLSR_ref = ( (|
  name = (''PMLSR''),
  read_from = (\<lambda> s . (PMLSR   s)),
  write_to = (\<lambda> v s .  (( s (| PMLSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMMIR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMMIR_ref = ( (|
  name = (''PMMIR''),
  read_from = (\<lambda> s . (PMMIR   s)),
  write_to = (\<lambda> v s .  (( s (| PMMIR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMMIR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMMIR_EL1_ref = ( (|
  name = (''PMMIR_EL1''),
  read_from = (\<lambda> s . (PMMIR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| PMMIR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMOVSCLR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMOVSCLR_EL0_ref = ( (|
  name = (''PMOVSCLR_EL0''),
  read_from = (\<lambda> s . (PMOVSCLR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMOVSCLR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMOVSSET_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMOVSSET_EL0_ref = ( (|
  name = (''PMOVSSET_EL0''),
  read_from = (\<lambda> s . (PMOVSSET_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMOVSSET_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMPCSR_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PMPCSR_ref = ( (|
  name = (''PMPCSR''),
  read_from = (\<lambda> s . (PMPCSR   s)),
  write_to = (\<lambda> v s .  (( s (| PMPCSR := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PMSELR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMSELR_EL0_ref = ( (|
  name = (''PMSELR_EL0''),
  read_from = (\<lambda> s . (PMSELR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMSELR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMSWINC_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMSWINC_EL0_ref = ( (|
  name = (''PMSWINC_EL0''),
  read_from = (\<lambda> s . (PMSWINC_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMSWINC_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMUSERENR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMUSERENR_EL0_ref = ( (|
  name = (''PMUSERENR_EL0''),
  read_from = (\<lambda> s . (PMUSERENR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMUSERENR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMVIDSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMVIDSR_ref = ( (|
  name = (''PMVIDSR''),
  read_from = (\<lambda> s . (PMVIDSR   s)),
  write_to = (\<lambda> v s .  (( s (| PMVIDSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMXEVCNTR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMXEVCNTR_EL0_ref = ( (|
  name = (''PMXEVCNTR_EL0''),
  read_from = (\<lambda> s . (PMXEVCNTR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMXEVCNTR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PMXEVTYPER_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PMXEVTYPER_EL0_ref = ( (|
  name = (''PMXEVTYPER_EL0''),
  read_from = (\<lambda> s . (PMXEVTYPER_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| PMXEVTYPER_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RC_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " RC_ref = ( (|
  name = (''RC''),
  read_from = (\<lambda> s . (RC   s)),
  write_to = (\<lambda> v s .  (( s (| RC := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 5 :: int)) False v) |) )"


definition RD_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RD_EL0_ref = ( (|
  name = (''RD_EL0''),
  read_from = (\<lambda> s . (RD_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| RD_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition REVIDR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " REVIDR_EL1_ref = ( (|
  name = (''REVIDR_EL1''),
  read_from = (\<lambda> s . (REVIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| REVIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RGSR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " RGSR_EL1_ref = ( (|
  name = (''RGSR_EL1''),
  read_from = (\<lambda> s . (RGSR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| RGSR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RMR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " RMR_EL1_ref = ( (|
  name = (''RMR_EL1''),
  read_from = (\<lambda> s . (RMR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| RMR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RMR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " RMR_EL2_ref = ( (|
  name = (''RMR_EL2''),
  read_from = (\<lambda> s . (RMR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| RMR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RMR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " RMR_EL3_ref = ( (|
  name = (''RMR_EL3''),
  read_from = (\<lambda> s . (RMR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| RMR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RMUID_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " RMUID_EL0_ref = ( (|
  name = (''RMUID_EL0''),
  read_from = (\<lambda> s . (RMUID_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| RMUID_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RNDR_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RNDR_ref = ( (|
  name = (''RNDR''),
  read_from = (\<lambda> s . (RNDR   s)),
  write_to = (\<lambda> v s .  (( s (| RNDR := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition RNDRRS_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RNDRRS_ref = ( (|
  name = (''RNDRRS''),
  read_from = (\<lambda> s . (RNDRRS   s)),
  write_to = (\<lambda> v s .  (( s (| RNDRRS := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition RVBAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " RVBAR_ref = ( (|
  name = (''RVBAR''),
  read_from = (\<lambda> s . (RVBAR   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition RVBAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RVBAR_EL1_ref = ( (|
  name = (''RVBAR_EL1''),
  read_from = (\<lambda> s . (RVBAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition RVBAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RVBAR_EL2_ref = ( (|
  name = (''RVBAR_EL2''),
  read_from = (\<lambda> s . (RVBAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition RVBAR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " RVBAR_EL3_ref = ( (|
  name = (''RVBAR_EL3''),
  read_from = (\<lambda> s . (RVBAR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| RVBAR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCXTNUM_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCXTNUM_EL0_ref = ( (|
  name = (''SCXTNUM_EL0''),
  read_from = (\<lambda> s . (SCXTNUM_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| SCXTNUM_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCXTNUM_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCXTNUM_EL1_ref = ( (|
  name = (''SCXTNUM_EL1''),
  read_from = (\<lambda> s . (SCXTNUM_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SCXTNUM_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCXTNUM_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCXTNUM_EL2_ref = ( (|
  name = (''SCXTNUM_EL2''),
  read_from = (\<lambda> s . (SCXTNUM_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SCXTNUM_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCXTNUM_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCXTNUM_EL3_ref = ( (|
  name = (''SCXTNUM_EL3''),
  read_from = (\<lambda> s . (SCXTNUM_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SCXTNUM_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SDER32_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SDER32_EL2_ref = ( (|
  name = (''SDER32_EL2''),
  read_from = (\<lambda> s . (SDER32_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SDER32_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL0_ref = ( (|
  name = (''SPSR_EL0''),
  read_from = (\<lambda> s . (SPSR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SP_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL0_ref = ( (|
  name = (''SP_EL0''),
  read_from = (\<lambda> s . (SP_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL1_ref = ( (|
  name = (''SP_EL1''),
  read_from = (\<lambda> s . (SP_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL2_ref = ( (|
  name = (''SP_EL2''),
  read_from = (\<lambda> s . (SP_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SP_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SP_EL3_ref = ( (|
  name = (''SP_EL3''),
  read_from = (\<lambda> s . (SP_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SP_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ShouldAdvanceIT_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " ShouldAdvanceIT_ref = ( (|
  name = (''ShouldAdvanceIT''),
  read_from = (\<lambda> s . (ShouldAdvanceIT   s)),
  write_to = (\<lambda> v s .  (( s (| ShouldAdvanceIT := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition TLBTR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TLBTR_ref = ( (|
  name = (''TLBTR''),
  read_from = (\<lambda> s . (TLBTR   s)),
  write_to = (\<lambda> v s .  (( s (| TLBTR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TPIDRRO_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TPIDRRO_EL0_ref = ( (|
  name = (''TPIDRRO_EL0''),
  read_from = (\<lambda> s . (TPIDRRO_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| TPIDRRO_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TPIDR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TPIDR_EL0_ref = ( (|
  name = (''TPIDR_EL0''),
  read_from = (\<lambda> s . (TPIDR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| TPIDR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TPIDR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TPIDR_EL1_ref = ( (|
  name = (''TPIDR_EL1''),
  read_from = (\<lambda> s . (TPIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TPIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TPIDR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TPIDR_EL2_ref = ( (|
  name = (''TPIDR_EL2''),
  read_from = (\<lambda> s . (TPIDR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TPIDR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TPIDR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TPIDR_EL3_ref = ( (|
  name = (''TPIDR_EL3''),
  read_from = (\<lambda> s . (TPIDR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| TPIDR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TRFCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TRFCR_EL1_ref = ( (|
  name = (''TRFCR_EL1''),
  read_from = (\<lambda> s . (TRFCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TRFCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TRFCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TRFCR_EL2_ref = ( (|
  name = (''TRFCR_EL2''),
  read_from = (\<lambda> s . (TRFCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TRFCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VBAR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL0_ref = ( (|
  name = (''VBAR_EL0''),
  read_from = (\<lambda> s . (VBAR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VDISR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VDISR_EL2_ref = ( (|
  name = (''VDISR_EL2''),
  read_from = (\<lambda> s . (VDISR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VDISR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VMPIDR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VMPIDR_EL2_ref = ( (|
  name = (''VMPIDR_EL2''),
  read_from = (\<lambda> s . (VMPIDR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VMPIDR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VNCR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VNCR_EL2_ref = ( (|
  name = (''VNCR_EL2''),
  read_from = (\<lambda> s . (VNCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VNCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VPIDR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VPIDR_EL2_ref = ( (|
  name = (''VPIDR_EL2''),
  read_from = (\<lambda> s . (VPIDR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VPIDR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition V_ref  :: "((regstate),(register_value),(((128)Word.word)list))register_ref "  where 
     " V_ref = ( (|
  name = (''_V''),
  read_from = (\<lambda> s . (V   s)),
  write_to = (\<lambda> v s .  (( s (| V := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_128_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_128_dec_bit v)(( 32 :: int)) False v) |) )"


definition currentCond_ref  :: "((regstate),(register_value),((4)Word.word))register_ref "  where 
     " currentCond_ref = ( (|
  name = (''__currentCond''),
  read_from = (\<lambda> s . (currentCond   s)),
  write_to = (\<lambda> v s .  (( s (| currentCond := v |)))),
  of_regval = (\<lambda> v .  vector_4_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_4_dec_bit v) |) )"


definition exclusive_block_address_ref  :: "((regstate),(register_value),((52)Word.word))register_ref "  where 
     " exclusive_block_address_ref = ( (|
  name = (''__exclusive_block_address''),
  read_from = (\<lambda> s . (exclusive_block_address   s)),
  write_to = (\<lambda> v s .  (( s (| exclusive_block_address := v |)))),
  of_regval = (\<lambda> v .  vector_52_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_52_dec_bit v) |) )"


definition saved_exception_level_ref  :: "((regstate),(register_value),((2)Word.word))register_ref "  where 
     " saved_exception_level_ref = ( (|
  name = (''__saved_exception_level''),
  read_from = (\<lambda> s . (saved_exception_level   s)),
  write_to = (\<lambda> v s .  (( s (| saved_exception_level := v |)))),
  of_regval = (\<lambda> v .  vector_2_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_2_dec_bit v) |) )"


definition unconditional_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " unconditional_ref = ( (|
  name = (''__unconditional''),
  read_from = (\<lambda> s . (unconditional   s)),
  write_to = (\<lambda> v s .  (( s (| unconditional := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition CONTEXTIDR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CONTEXTIDR_S_ref = ( (|
  name = (''CONTEXTIDR_S''),
  read_from = (\<lambda> s . (CONTEXTIDR_S   s)),
  write_to = (\<lambda> v s .  (( s (| CONTEXTIDR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition GTEExtObsAccess_ref  :: "((regstate),(register_value),(((16)Word.word)list))register_ref "  where 
     " GTEExtObsAccess_ref = ( (|
  name = (''_GTEExtObsAccess''),
  read_from = (\<lambda> s . (GTEExtObsAccess   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsAccess := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_16_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_16_dec_bit v)(( 256 :: int)) False v) |) )"


definition GTEExtObsAddress_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTEExtObsAddress_ref = ( (|
  name = (''_GTEExtObsAddress''),
  read_from = (\<lambda> s . (GTEExtObsAddress   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsAddress := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 256 :: int)) False v) |) )"


definition GTEExtObsData_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTEExtObsData_ref = ( (|
  name = (''_GTEExtObsData''),
  read_from = (\<lambda> s . (GTEExtObsData   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsData := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 256 :: int)) False v) |) )"


definition GTEExtObsResult_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTEExtObsResult_ref = ( (|
  name = (''_GTEExtObsResult''),
  read_from = (\<lambda> s . (GTEExtObsResult   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsResult := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 256 :: int)) False v) |) )"


definition GTEExtObsActive_ref  :: "((regstate),(register_value),((bool)list))register_ref "  where 
     " GTEExtObsActive_ref = ( (|
  name = (''_GTEExtObsActive''),
  read_from = (\<lambda> s . (GTEExtObsActive   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsActive := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  bool_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_bool v)(( 4 :: int)) False v) |) )"


definition GTEExtObsCount_ref  :: "((regstate),(register_value),((ii)list))register_ref "  where 
     " GTEExtObsCount_ref = ( (|
  name = (''_GTEExtObsCount''),
  read_from = (\<lambda> s . (GTEExtObsCount   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsCount := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  int_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_int v)(( 4 :: int)) False v) |) )"


definition GTEExtObsIndex_ref  :: "((regstate),(register_value),((ii)list))register_ref "  where 
     " GTEExtObsIndex_ref = ( (|
  name = (''_GTEExtObsIndex''),
  read_from = (\<lambda> s . (GTEExtObsIndex   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsIndex := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  int_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_int v)(( 4 :: int)) False v) |) )"


definition GTEExtObsResultIndex_ref  :: "((regstate),(register_value),((ii)list))register_ref "  where 
     " GTEExtObsResultIndex_ref = ( (|
  name = (''_GTEExtObsResultIndex''),
  read_from = (\<lambda> s . (GTEExtObsResultIndex   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsResultIndex := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  int_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_int v)(( 4 :: int)) False v) |) )"


definition GTEExtObsResultIsAddress_ref  :: "((regstate),(register_value),((bool)list))register_ref "  where 
     " GTEExtObsResultIsAddress_ref = ( (|
  name = (''_GTEExtObsResultIsAddress''),
  read_from = (\<lambda> s . (GTEExtObsResultIsAddress   s)),
  write_to = (\<lambda> v s .  (( s (| GTEExtObsResultIsAddress := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  bool_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_bool v)(( 4 :: int)) False v) |) )"


definition GTEListParam0_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTEListParam0_ref = ( (|
  name = (''_GTEListParam0''),
  read_from = (\<lambda> s . (GTEListParam0   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParam0 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 64 :: int)) False v) |) )"


definition GTEListParam1_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTEListParam1_ref = ( (|
  name = (''_GTEListParam1''),
  read_from = (\<lambda> s . (GTEListParam1   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParam1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 64 :: int)) False v) |) )"


definition GTEParam_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTEParam_ref = ( (|
  name = (''_GTEParam''),
  read_from = (\<lambda> s . (GTEParam   s)),
  write_to = (\<lambda> v s .  (( s (| GTEParam := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 8 :: int)) False v) |) )"


definition GTE_AS_RecordedAccess_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " GTE_AS_RecordedAccess_ref = ( (|
  name = (''_GTE_AS_RecordedAccess''),
  read_from = (\<lambda> s . (GTE_AS_RecordedAccess   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_RecordedAccess := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 8 :: int)) False v) |) )"


definition GTE_AS_RecordedAddress_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTE_AS_RecordedAddress_ref = ( (|
  name = (''_GTE_AS_RecordedAddress''),
  read_from = (\<lambda> s . (GTE_AS_RecordedAddress   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_RecordedAddress := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 8 :: int)) False v) |) )"


definition GTE_AS_RecordedData_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTE_AS_RecordedData_ref = ( (|
  name = (''_GTE_AS_RecordedData''),
  read_from = (\<lambda> s . (GTE_AS_RecordedData   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_RecordedData := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 8 :: int)) False v) |) )"


definition GTE_PPU_Access_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " GTE_PPU_Access_ref = ( (|
  name = (''_GTE_PPU_Access''),
  read_from = (\<lambda> s . (GTE_PPU_Access   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_PPU_Access := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 6 :: int)) False v) |) )"


definition GTE_PPU_Address_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " GTE_PPU_Address_ref = ( (|
  name = (''_GTE_PPU_Address''),
  read_from = (\<lambda> s . (GTE_PPU_Address   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_PPU_Address := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 6 :: int)) False v) |) )"


definition GTE_PPU_SizeEn_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " GTE_PPU_SizeEn_ref = ( (|
  name = (''_GTE_PPU_SizeEn''),
  read_from = (\<lambda> s . (GTE_PPU_SizeEn   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_PPU_SizeEn := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 6 :: int)) False v) |) )"


definition AbortRgn64Hi1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Hi1_ref = ( (|
  name = (''AbortRgn64Hi1''),
  read_from = (\<lambda> s . (AbortRgn64Hi1   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Hi1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Hi1_Hi_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Hi1_Hi_ref = ( (|
  name = (''AbortRgn64Hi1_Hi''),
  read_from = (\<lambda> s . (AbortRgn64Hi1_Hi   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Hi1_Hi := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Hi2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Hi2_ref = ( (|
  name = (''AbortRgn64Hi2''),
  read_from = (\<lambda> s . (AbortRgn64Hi2   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Hi2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Hi2_Hi_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Hi2_Hi_ref = ( (|
  name = (''AbortRgn64Hi2_Hi''),
  read_from = (\<lambda> s . (AbortRgn64Hi2_Hi   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Hi2_Hi := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Lo1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Lo1_ref = ( (|
  name = (''AbortRgn64Lo1''),
  read_from = (\<lambda> s . (AbortRgn64Lo1   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Lo1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Lo1_Hi_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Lo1_Hi_ref = ( (|
  name = (''AbortRgn64Lo1_Hi''),
  read_from = (\<lambda> s . (AbortRgn64Lo1_Hi   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Lo1_Hi := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Lo2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Lo2_ref = ( (|
  name = (''AbortRgn64Lo2''),
  read_from = (\<lambda> s . (AbortRgn64Lo2   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Lo2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition AbortRgn64Lo2_Hi_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AbortRgn64Lo2_Hi_ref = ( (|
  name = (''AbortRgn64Lo2_Hi''),
  read_from = (\<lambda> s . (AbortRgn64Lo2_Hi   s)),
  write_to = (\<lambda> v s .  (( s (| AbortRgn64Lo2_Hi := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTCR_ref = ( (|
  name = (''CNTCR''),
  read_from = (\<lambda> s . (CNTCR   s)),
  write_to = (\<lambda> v s .  (( s (| CNTCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTCV_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " CNTCV_ref = ( (|
  name = (''CNTCV''),
  read_from = (\<lambda> s . (CNTCV   s)),
  write_to = (\<lambda> v s .  (( s (| CNTCV := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition CNTFID0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTFID0_ref = ( (|
  name = (''CNTFID0''),
  read_from = (\<lambda> s . (CNTFID0   s)),
  write_to = (\<lambda> v s .  (( s (| CNTFID0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTSR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CNTSR_ref = ( (|
  name = (''CNTSR''),
  read_from = (\<lambda> s . (CNTSR   s)),
  write_to = (\<lambda> v s .  (( s (| CNTSR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CONTEXTIDR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CONTEXTIDR_EL1_ref = ( (|
  name = (''CONTEXTIDR_EL1''),
  read_from = (\<lambda> s . (CONTEXTIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| CONTEXTIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CONTEXTIDR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " CONTEXTIDR_EL2_ref = ( (|
  name = (''CONTEXTIDR_EL2''),
  read_from = (\<lambda> s . (CONTEXTIDR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| CONTEXTIDR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DACR32_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DACR32_EL2_ref = ( (|
  name = (''DACR32_EL2''),
  read_from = (\<lambda> s . (DACR32_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| DACR32_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DACR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DACR_S_ref = ( (|
  name = (''DACR_S''),
  read_from = (\<lambda> s . (DACR_S   s)),
  write_to = (\<lambda> v s .  (( s (| DACR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGBCR_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGBCR_ref = ( (|
  name = (''DBGBCR''),
  read_from = (\<lambda> s . (DBGBCR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBCR := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGBCR_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGBCR_EL1_ref = ( (|
  name = (''DBGBCR_EL1''),
  read_from = (\<lambda> s . (DBGBCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGBVR_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGBVR_ref = ( (|
  name = (''DBGBVR''),
  read_from = (\<lambda> s . (DBGBVR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBVR := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGBVR_EL1_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " DBGBVR_EL1_ref = ( (|
  name = (''DBGBVR_EL1''),
  read_from = (\<lambda> s . (DBGBVR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBVR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGBXVR_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGBXVR_ref = ( (|
  name = (''DBGBXVR''),
  read_from = (\<lambda> s . (DBGBXVR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGBXVR := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGDIDR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGDIDR_ref = ( (|
  name = (''DBGDIDR''),
  read_from = (\<lambda> s . (DBGDIDR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGDIDR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGEN_ref  :: "((regstate),(register_value),(signal))register_ref "  where 
     " DBGEN_ref = ( (|
  name = (''DBGEN''),
  read_from = (\<lambda> s . (DBGEN   s)),
  write_to = (\<lambda> v s .  (( s (| DBGEN := v |)))),
  of_regval = (\<lambda> v .  signal_of_regval v),
  regval_of = (\<lambda> v .  regval_of_signal v) |) )"


definition DBGPRCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGPRCR_EL1_ref = ( (|
  name = (''DBGPRCR_EL1''),
  read_from = (\<lambda> s . (DBGPRCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGPRCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGVCR32_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DBGVCR32_EL2_ref = ( (|
  name = (''DBGVCR32_EL2''),
  read_from = (\<lambda> s . (DBGVCR32_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| DBGVCR32_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DBGWCR_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGWCR_ref = ( (|
  name = (''DBGWCR''),
  read_from = (\<lambda> s . (DBGWCR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWCR := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGWCR_EL1_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGWCR_EL1_ref = ( (|
  name = (''DBGWCR_EL1''),
  read_from = (\<lambda> s . (DBGWCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGWVR_ref  :: "((regstate),(register_value),(((32)Word.word)list))register_ref "  where 
     " DBGWVR_ref = ( (|
  name = (''DBGWVR''),
  read_from = (\<lambda> s . (DBGWVR   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWVR := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_32_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_32_dec_bit v)(( 17 :: int)) False v) |) )"


definition DBGWVR_EL1_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " DBGWVR_EL1_ref = ( (|
  name = (''DBGWVR_EL1''),
  read_from = (\<lambda> s . (DBGWVR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| DBGWVR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 17 :: int)) False v) |) )"


definition DLR_EL0_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " DLR_EL0_ref = ( (|
  name = (''DLR_EL0''),
  read_from = (\<lambda> s . (DLR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DLR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition DSPSR_EL0_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DSPSR_EL0_ref = ( (|
  name = (''DSPSR_EL0''),
  read_from = (\<lambda> s . (DSPSR_EL0   s)),
  write_to = (\<lambda> v s .  (( s (| DSPSR_EL0 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition EDSCR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " EDSCR_ref = ( (|
  name = (''EDSCR''),
  read_from = (\<lambda> s . (EDSCR   s)),
  write_to = (\<lambda> v s .  (( s (| EDSCR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition DFSR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " DFSR_S_ref = ( (|
  name = (''DFSR_S''),
  read_from = (\<lambda> s . (DFSR_S   s)),
  write_to = (\<lambda> v s .  (( s (| DFSR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ELR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL3_ref = ( (|
  name = (''ELR_EL3''),
  read_from = (\<lambda> s . (ELR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ELR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL1_ref = ( (|
  name = (''ELR_EL1''),
  read_from = (\<lambda> s . (ELR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ESR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL3_ref = ( (|
  name = (''ESR_EL3''),
  read_from = (\<lambda> s . (ESR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ESR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL1_ref = ( (|
  name = (''ESR_EL1''),
  read_from = (\<lambda> s . (ESR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ELR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ELR_EL2_ref = ( (|
  name = (''ELR_EL2''),
  read_from = (\<lambda> s . (ELR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ELR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TCR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TCR_EL2_ref = ( (|
  name = (''TCR_EL2''),
  read_from = (\<lambda> s . (TCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ESR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ESR_EL2_ref = ( (|
  name = (''ESR_EL2''),
  read_from = (\<lambda> s . (ESR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| ESR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL1_ref = ( (|
  name = (''FAR_EL1''),
  read_from = (\<lambda> s . (FAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition FAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL2_ref = ( (|
  name = (''FAR_EL2''),
  read_from = (\<lambda> s . (FAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition FAR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " FAR_EL3_ref = ( (|
  name = (''FAR_EL3''),
  read_from = (\<lambda> s . (FAR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| FAR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition HCR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " HCR_EL2_ref = ( (|
  name = (''HCR_EL2''),
  read_from = (\<lambda> s . (HCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| HCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition HPFAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " HPFAR_EL2_ref = ( (|
  name = (''HPFAR_EL2''),
  read_from = (\<lambda> s . (HPFAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| HPFAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition ID_AA64DFR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " ID_AA64DFR0_EL1_ref = ( (|
  name = (''ID_AA64DFR0_EL1''),
  read_from = (\<lambda> s . (ID_AA64DFR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| ID_AA64DFR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition IFSR32_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " IFSR32_EL2_ref = ( (|
  name = (''IFSR32_EL2''),
  read_from = (\<lambda> s . (IFSR32_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| IFSR32_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition IFSR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " IFSR_S_ref = ( (|
  name = (''IFSR_S''),
  read_from = (\<lambda> s . (IFSR_S   s)),
  write_to = (\<lambda> v s .  (( s (| IFSR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition InGuardedPage_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " InGuardedPage_ref = ( (|
  name = (''InGuardedPage''),
  read_from = (\<lambda> s . (InGuardedPage   s)),
  write_to = (\<lambda> v s .  (( s (| InGuardedPage := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition LR_mon_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " LR_mon_ref = ( (|
  name = (''LR_mon''),
  read_from = (\<lambda> s . (LR_mon   s)),
  write_to = (\<lambda> v s .  (( s (| LR_mon := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MAIR0_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MAIR0_S_ref = ( (|
  name = (''MAIR0_S''),
  read_from = (\<lambda> s . (MAIR0_S   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR0_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MAIR1_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MAIR1_S_ref = ( (|
  name = (''MAIR1_S''),
  read_from = (\<lambda> s . (MAIR1_S   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR1_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MAIR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MAIR_EL1_ref = ( (|
  name = (''MAIR_EL1''),
  read_from = (\<lambda> s . (MAIR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MAIR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MAIR_EL2_ref = ( (|
  name = (''MAIR_EL2''),
  read_from = (\<lambda> s . (MAIR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MAIR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MAIR_EL3_ref = ( (|
  name = (''MAIR_EL3''),
  read_from = (\<lambda> s . (MAIR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| MAIR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MDCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDCR_EL2_ref = ( (|
  name = (''MDCR_EL2''),
  read_from = (\<lambda> s . (MDCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MDCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MDCR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDCR_EL3_ref = ( (|
  name = (''MDCR_EL3''),
  read_from = (\<lambda> s . (MDCR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| MDCR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MDSCR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MDSCR_EL1_ref = ( (|
  name = (''MDSCR_EL1''),
  read_from = (\<lambda> s . (MDSCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MDSCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MPAM0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAM0_EL1_ref = ( (|
  name = (''MPAM0_EL1''),
  read_from = (\<lambda> s . (MPAM0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MPAM0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAM1_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAM1_EL1_ref = ( (|
  name = (''MPAM1_EL1''),
  read_from = (\<lambda> s . (MPAM1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MPAM1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAM2_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAM2_EL2_ref = ( (|
  name = (''MPAM2_EL2''),
  read_from = (\<lambda> s . (MPAM2_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAM2_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAM3_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAM3_EL3_ref = ( (|
  name = (''MPAM3_EL3''),
  read_from = (\<lambda> s . (MPAM3_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| MPAM3_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMHCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MPAMHCR_EL2_ref = ( (|
  name = (''MPAMHCR_EL2''),
  read_from = (\<lambda> s . (MPAMHCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMHCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MPAMIDR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMIDR_EL1_ref = ( (|
  name = (''MPAMIDR_EL1''),
  read_from = (\<lambda> s . (MPAMIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM0_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM0_EL2_ref = ( (|
  name = (''MPAMVPM0_EL2''),
  read_from = (\<lambda> s . (MPAMVPM0_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM0_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM1_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM1_EL2_ref = ( (|
  name = (''MPAMVPM1_EL2''),
  read_from = (\<lambda> s . (MPAMVPM1_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM1_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM2_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM2_EL2_ref = ( (|
  name = (''MPAMVPM2_EL2''),
  read_from = (\<lambda> s . (MPAMVPM2_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM2_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM3_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM3_EL2_ref = ( (|
  name = (''MPAMVPM3_EL2''),
  read_from = (\<lambda> s . (MPAMVPM3_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM3_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM4_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM4_EL2_ref = ( (|
  name = (''MPAMVPM4_EL2''),
  read_from = (\<lambda> s . (MPAMVPM4_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM4_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM5_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM5_EL2_ref = ( (|
  name = (''MPAMVPM5_EL2''),
  read_from = (\<lambda> s . (MPAMVPM5_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM5_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM6_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM6_EL2_ref = ( (|
  name = (''MPAMVPM6_EL2''),
  read_from = (\<lambda> s . (MPAMVPM6_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM6_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPM7_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPAMVPM7_EL2_ref = ( (|
  name = (''MPAMVPM7_EL2''),
  read_from = (\<lambda> s . (MPAMVPM7_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPM7_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MPAMVPMV_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MPAMVPMV_EL2_ref = ( (|
  name = (''MPAMVPMV_EL2''),
  read_from = (\<lambda> s . (MPAMVPMV_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| MPAMVPMV_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition MPIDR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " MPIDR_EL1_ref = ( (|
  name = (''MPIDR_EL1''),
  read_from = (\<lambda> s . (MPIDR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| MPIDR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition MVBAR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " MVBAR_ref = ( (|
  name = (''MVBAR''),
  read_from = (\<lambda> s . (MVBAR   s)),
  write_to = (\<lambda> v s .  (( s (| MVBAR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition NMRR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " NMRR_S_ref = ( (|
  name = (''NMRR_S''),
  read_from = (\<lambda> s . (NMRR_S   s)),
  write_to = (\<lambda> v s .  (( s (| NMRR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSDLR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSDLR_EL1_ref = ( (|
  name = (''OSDLR_EL1''),
  read_from = (\<lambda> s . (OSDLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSDLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition OSLSR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " OSLSR_EL1_ref = ( (|
  name = (''OSLSR_EL1''),
  read_from = (\<lambda> s . (OSLSR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| OSLSR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PRRR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PRRR_S_ref = ( (|
  name = (''PRRR_S''),
  read_from = (\<lambda> s . (PRRR_S   s)),
  write_to = (\<lambda> v s .  (( s (| PRRR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PSTATE_ref  :: "((regstate),(register_value),(ProcState))register_ref "  where 
     " PSTATE_ref = ( (|
  name = (''PSTATE''),
  read_from = (\<lambda> s . (PSTATE   s)),
  write_to = (\<lambda> v s .  (( s (| PSTATE := v |)))),
  of_regval = (\<lambda> v .  ProcState_of_regval v),
  regval_of = (\<lambda> v .  regval_of_ProcState v) |) )"


definition SCR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCR_EL3_ref = ( (|
  name = (''SCR_EL3''),
  read_from = (\<lambda> s . (SCR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SCR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SCTLR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCTLR_EL1_ref = ( (|
  name = (''SCTLR_EL1''),
  read_from = (\<lambda> s . (SCTLR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCTLR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCTLR_EL2_ref = ( (|
  name = (''SCTLR_EL2''),
  read_from = (\<lambda> s . (SCTLR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCTLR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " SCTLR_EL3_ref = ( (|
  name = (''SCTLR_EL3''),
  read_from = (\<lambda> s . (SCTLR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition SCTLR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SCTLR_S_ref = ( (|
  name = (''SCTLR_S''),
  read_from = (\<lambda> s . (SCTLR_S   s)),
  write_to = (\<lambda> v s .  (( s (| SCTLR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SDER32_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SDER32_EL3_ref = ( (|
  name = (''SDER32_EL3''),
  read_from = (\<lambda> s . (SDER32_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SDER32_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPIDEN_ref  :: "((regstate),(register_value),(signal))register_ref "  where 
     " SPIDEN_ref = ( (|
  name = (''SPIDEN''),
  read_from = (\<lambda> s . (SPIDEN   s)),
  write_to = (\<lambda> v s .  (( s (| SPIDEN := v |)))),
  of_regval = (\<lambda> v .  signal_of_regval v),
  regval_of = (\<lambda> v .  regval_of_signal v) |) )"


definition SPSR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL1_ref = ( (|
  name = (''SPSR_EL1''),
  read_from = (\<lambda> s . (SPSR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL2_ref = ( (|
  name = (''SPSR_EL2''),
  read_from = (\<lambda> s . (SPSR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_EL3_ref = ( (|
  name = (''SPSR_EL3''),
  read_from = (\<lambda> s . (SPSR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_abt_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_abt_ref = ( (|
  name = (''SPSR_abt''),
  read_from = (\<lambda> s . (SPSR_abt   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_abt := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_fiq_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_fiq_ref = ( (|
  name = (''SPSR_fiq''),
  read_from = (\<lambda> s . (SPSR_fiq   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_fiq := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_irq_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_irq_ref = ( (|
  name = (''SPSR_irq''),
  read_from = (\<lambda> s . (SPSR_irq   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_irq := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SPSR_und_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SPSR_und_ref = ( (|
  name = (''SPSR_und''),
  read_from = (\<lambda> s . (SPSR_und   s)),
  write_to = (\<lambda> v s .  (( s (| SPSR_und := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition SP_mon_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " SP_mon_ref = ( (|
  name = (''SP_mon''),
  read_from = (\<lambda> s . (SP_mon   s)),
  write_to = (\<lambda> v s .  (( s (| SP_mon := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ScheduledFIQ_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " ScheduledFIQ_ref = ( (|
  name = (''ScheduledFIQ''),
  read_from = (\<lambda> s . (ScheduledFIQ   s)),
  write_to = (\<lambda> v s .  (( s (| ScheduledFIQ := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition ScheduledIRQ_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " ScheduledIRQ_ref = ( (|
  name = (''ScheduledIRQ''),
  read_from = (\<lambda> s . (ScheduledIRQ   s)),
  write_to = (\<lambda> v s .  (( s (| ScheduledIRQ := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition TCR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TCR_EL1_ref = ( (|
  name = (''TCR_EL1''),
  read_from = (\<lambda> s . (TCR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TCR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TCR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TCR_EL3_ref = ( (|
  name = (''TCR_EL3''),
  read_from = (\<lambda> s . (TCR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| TCR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TFSRE0_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TFSRE0_EL1_ref = ( (|
  name = (''TFSRE0_EL1''),
  read_from = (\<lambda> s . (TFSRE0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TFSRE0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TFSR_EL1_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TFSR_EL1_ref = ( (|
  name = (''TFSR_EL1''),
  read_from = (\<lambda> s . (TFSR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TFSR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TFSR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TFSR_EL2_ref = ( (|
  name = (''TFSR_EL2''),
  read_from = (\<lambda> s . (TFSR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TFSR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TFSR_EL3_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TFSR_EL3_ref = ( (|
  name = (''TFSR_EL3''),
  read_from = (\<lambda> s . (TFSR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| TFSR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TLBHits_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " TLBHits_ref = ( (|
  name = (''TLBHits''),
  read_from = (\<lambda> s . (TLBHits   s)),
  write_to = (\<lambda> v s .  (( s (| TLBHits := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition TLBMisses_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " TLBMisses_ref = ( (|
  name = (''TLBMisses''),
  read_from = (\<lambda> s . (TLBMisses   s)),
  write_to = (\<lambda> v s .  (( s (| TLBMisses := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition TTBCR2_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TTBCR2_S_ref = ( (|
  name = (''TTBCR2_S''),
  read_from = (\<lambda> s . (TTBCR2_S   s)),
  write_to = (\<lambda> v s .  (( s (| TTBCR2_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TTBCR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TTBCR_S_ref = ( (|
  name = (''TTBCR_S''),
  read_from = (\<lambda> s . (TTBCR_S   s)),
  write_to = (\<lambda> v s .  (( s (| TTBCR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TTBR0_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_EL1_ref = ( (|
  name = (''TTBR0_EL1''),
  read_from = (\<lambda> s . (TTBR0_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR0_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_EL2_ref = ( (|
  name = (''TTBR0_EL2''),
  read_from = (\<lambda> s . (TTBR0_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR0_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_EL3_ref = ( (|
  name = (''TTBR0_EL3''),
  read_from = (\<lambda> s . (TTBR0_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR0_S_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR0_S_ref = ( (|
  name = (''TTBR0_S''),
  read_from = (\<lambda> s . (TTBR0_S   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR0_S := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR1_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR1_EL1_ref = ( (|
  name = (''TTBR1_EL1''),
  read_from = (\<lambda> s . (TTBR1_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR1_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR1_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR1_EL2_ref = ( (|
  name = (''TTBR1_EL2''),
  read_from = (\<lambda> s . (TTBR1_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR1_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition TTBR1_S_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " TTBR1_S_ref = ( (|
  name = (''TTBR1_S''),
  read_from = (\<lambda> s . (TTBR1_S   s)),
  write_to = (\<lambda> v s .  (( s (| TTBR1_S := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_EL1_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL1_ref = ( (|
  name = (''VBAR_EL1''),
  read_from = (\<lambda> s . (VBAR_EL1   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL1 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL2_ref = ( (|
  name = (''VBAR_EL2''),
  read_from = (\<lambda> s . (VBAR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_EL3_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VBAR_EL3_ref = ( (|
  name = (''VBAR_EL3''),
  read_from = (\<lambda> s . (VBAR_EL3   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_EL3 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VBAR_S_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VBAR_S_ref = ( (|
  name = (''VBAR_S''),
  read_from = (\<lambda> s . (VBAR_S   s)),
  write_to = (\<lambda> v s .  (( s (| VBAR_S := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VSESR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VSESR_EL2_ref = ( (|
  name = (''VSESR_EL2''),
  read_from = (\<lambda> s . (VSESR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VSESR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VSTCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VSTCR_EL2_ref = ( (|
  name = (''VSTCR_EL2''),
  read_from = (\<lambda> s . (VSTCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VSTCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VSTTBR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VSTTBR_EL2_ref = ( (|
  name = (''VSTTBR_EL2''),
  read_from = (\<lambda> s . (VSTTBR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VSTTBR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition VTCR_EL2_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " VTCR_EL2_ref = ( (|
  name = (''VTCR_EL2''),
  read_from = (\<lambda> s . (VTCR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VTCR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition VTTBR_EL2_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " VTTBR_EL2_ref = ( (|
  name = (''VTTBR_EL2''),
  read_from = (\<lambda> s . (VTTBR_EL2   s)),
  write_to = (\<lambda> v s .  (( s (| VTTBR_EL2 := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition AXIAbortCtl_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " AXIAbortCtl_ref = ( (|
  name = (''_AXIAbortCtl''),
  read_from = (\<lambda> s . (AXIAbortCtl   s)),
  write_to = (\<lambda> v s .  (( s (| AXIAbortCtl := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ClearFIQ_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ClearFIQ_ref = ( (|
  name = (''_ClearFIQ''),
  read_from = (\<lambda> s . (ClearFIQ   s)),
  write_to = (\<lambda> v s .  (( s (| ClearFIQ := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ClearIRQ_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ClearIRQ_ref = ( (|
  name = (''_ClearIRQ''),
  read_from = (\<lambda> s . (ClearIRQ   s)),
  write_to = (\<lambda> v s .  (( s (| ClearIRQ := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition FIQPending_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " FIQPending_ref = ( (|
  name = (''_FIQPending''),
  read_from = (\<lambda> s . (FIQPending   s)),
  write_to = (\<lambda> v s .  (( s (| FIQPending := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition GTEActive_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " GTEActive_ref = ( (|
  name = (''_GTEActive''),
  read_from = (\<lambda> s . (GTEActive   s)),
  write_to = (\<lambda> v s .  (( s (| GTEActive := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition GTECurrentAPI_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " GTECurrentAPI_ref = ( (|
  name = (''_GTECurrentAPI''),
  read_from = (\<lambda> s . (GTECurrentAPI   s)),
  write_to = (\<lambda> v s .  (( s (| GTECurrentAPI := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition GTEHaveParamLo_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " GTEHaveParamLo_ref = ( (|
  name = (''_GTEHaveParamLo''),
  read_from = (\<lambda> s . (GTEHaveParamLo   s)),
  write_to = (\<lambda> v s .  (( s (| GTEHaveParamLo := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition GTEListParam_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " GTEListParam_ref = ( (|
  name = (''_GTEListParam''),
  read_from = (\<lambda> s . (GTEListParam   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParam := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition GTEListParamIndex_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " GTEListParamIndex_ref = ( (|
  name = (''_GTEListParamIndex''),
  read_from = (\<lambda> s . (GTEListParamIndex   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParamIndex := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition GTEListParamTerminator_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " GTEListParamTerminator_ref = ( (|
  name = (''_GTEListParamTerminator''),
  read_from = (\<lambda> s . (GTEListParamTerminator   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParamTerminator := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition GTEListParamTerminatorCount_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " GTEListParamTerminatorCount_ref = ( (|
  name = (''_GTEListParamTerminatorCount''),
  read_from = (\<lambda> s . (GTEListParamTerminatorCount   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParamTerminatorCount := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition GTEListParamTerminators_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " GTEListParamTerminators_ref = ( (|
  name = (''_GTEListParamTerminators''),
  read_from = (\<lambda> s . (GTEListParamTerminators   s)),
  write_to = (\<lambda> v s .  (( s (| GTEListParamTerminators := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition GTEParamCount_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " GTEParamCount_ref = ( (|
  name = (''_GTEParamCount''),
  read_from = (\<lambda> s . (GTEParamCount   s)),
  write_to = (\<lambda> v s .  (( s (| GTEParamCount := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition GTEParamLo_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " GTEParamLo_ref = ( (|
  name = (''_GTEParamLo''),
  read_from = (\<lambda> s . (GTEParamLo   s)),
  write_to = (\<lambda> v s .  (( s (| GTEParamLo := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition GTEParamType_ref  :: "((regstate),(register_value),(GTEParamType))register_ref "  where 
     " GTEParamType_ref = ( (|
  name = (''_GTEParamType''),
  read_from = (\<lambda> s . (GTEParamType   s)),
  write_to = (\<lambda> v s .  (( s (| GTEParamType := v |)))),
  of_regval = (\<lambda> v .  GTEParamType_of_regval v),
  regval_of = (\<lambda> v .  regval_of_GTEParamType v) |) )"


definition GTEParamsComplete_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " GTEParamsComplete_ref = ( (|
  name = (''_GTEParamsComplete''),
  read_from = (\<lambda> s . (GTEParamsComplete   s)),
  write_to = (\<lambda> v s .  (( s (| GTEParamsComplete := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition GTEStatus_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " GTEStatus_ref = ( (|
  name = (''_GTEStatus''),
  read_from = (\<lambda> s . (GTEStatus   s)),
  write_to = (\<lambda> v s .  (( s (| GTEStatus := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition GTE_AS_Access_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " GTE_AS_Access_ref = ( (|
  name = (''_GTE_AS_Access''),
  read_from = (\<lambda> s . (GTE_AS_Access   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_Access := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition GTE_AS_AccessCount_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " GTE_AS_AccessCount_ref = ( (|
  name = (''_GTE_AS_AccessCount''),
  read_from = (\<lambda> s . (GTE_AS_AccessCount   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_AccessCount := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition GTE_AS_Address_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " GTE_AS_Address_ref = ( (|
  name = (''_GTE_AS_Address''),
  read_from = (\<lambda> s . (GTE_AS_Address   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_Address := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition GTE_AS_Size_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " GTE_AS_Size_ref = ( (|
  name = (''_GTE_AS_Size''),
  read_from = (\<lambda> s . (GTE_AS_Size   s)),
  write_to = (\<lambda> v s .  (( s (| GTE_AS_Size := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition IRQPending_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " IRQPending_ref = ( (|
  name = (''_IRQPending''),
  read_from = (\<lambda> s . (IRQPending   s)),
  write_to = (\<lambda> v s .  (( s (| IRQPending := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition PC_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PC_ref = ( (|
  name = (''_PC''),
  read_from = (\<lambda> s . (PC   s)),
  write_to = (\<lambda> v s .  (( s (| PC := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PPURACR_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PPURACR_ref = ( (|
  name = (''_PPURACR''),
  read_from = (\<lambda> s . (PPURACR   s)),
  write_to = (\<lambda> v s .  (( s (| PPURACR := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PPURBAR_ref  :: "((regstate),(register_value),((64)Word.word))register_ref "  where 
     " PPURBAR_ref = ( (|
  name = (''_PPURBAR''),
  read_from = (\<lambda> s . (PPURBAR   s)),
  write_to = (\<lambda> v s .  (( s (| PPURBAR := v |)))),
  of_regval = (\<lambda> v .  vector_64_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_64_dec_bit v) |) )"


definition PPURSER_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " PPURSER_ref = ( (|
  name = (''_PPURSER''),
  read_from = (\<lambda> s . (PPURSER   s)),
  write_to = (\<lambda> v s .  (( s (| PPURSER := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition PendingPhysicalSE_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " PendingPhysicalSE_ref = ( (|
  name = (''_PendingPhysicalSE''),
  read_from = (\<lambda> s . (PendingPhysicalSE   s)),
  write_to = (\<lambda> v s .  (( s (| PendingPhysicalSE := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition R_ref  :: "((regstate),(register_value),(((64)Word.word)list))register_ref "  where 
     " R_ref = ( (|
  name = (''_R''),
  read_from = (\<lambda> s . (R   s)),
  write_to = (\<lambda> v s .  (( s (| R := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  vector_64_dec_bit_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_vector_64_dec_bit v)(( 31 :: int)) False v) |) )"


definition ScheduleFIQ_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ScheduleFIQ_ref = ( (|
  name = (''_ScheduleFIQ''),
  read_from = (\<lambda> s . (ScheduleFIQ   s)),
  write_to = (\<lambda> v s .  (( s (| ScheduleFIQ := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition ScheduleIRQ_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " ScheduleIRQ_ref = ( (|
  name = (''_ScheduleIRQ''),
  read_from = (\<lambda> s . (ScheduleIRQ   s)),
  write_to = (\<lambda> v s .  (( s (| ScheduleIRQ := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition TLB_ref  :: "((regstate),(register_value),((TLBLine)list))register_ref "  where 
     " TLB_ref = ( (|
  name = (''_TLB''),
  read_from = (\<lambda> s . (TLB   s)),
  write_to = (\<lambda> v s .  (( s (| TLB := v |)))),
  of_regval = (\<lambda> v .  vector_of_regval (\<lambda> v .  TLBLine_of_regval v) v),
  regval_of = (\<lambda> v .  regval_of_vector (\<lambda> v .  regval_of_TLBLine v)(( 1024 :: int)) False v) |) )"


definition TargetCPU_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " TargetCPU_ref = ( (|
  name = (''_TargetCPU''),
  read_from = (\<lambda> s . (TargetCPU   s)),
  write_to = (\<lambda> v s .  (( s (| TargetCPU := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition CNTControlBase_ref  :: "((regstate),(register_value),((52)Word.word))register_ref "  where 
     " CNTControlBase_ref = ( (|
  name = (''__CNTControlBase''),
  read_from = (\<lambda> s . (CNTControlBase   s)),
  write_to = (\<lambda> v s .  (( s (| CNTControlBase := v |)))),
  of_regval = (\<lambda> v .  vector_52_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_52_dec_bit v) |) )"


definition LSISyndrome_ref  :: "((regstate),(register_value),((11)Word.word))register_ref "  where 
     " LSISyndrome_ref = ( (|
  name = (''__LSISyndrome''),
  read_from = (\<lambda> s . (LSISyndrome   s)),
  write_to = (\<lambda> v s .  (( s (| LSISyndrome := v |)))),
  of_regval = (\<lambda> v .  vector_11_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_11_dec_bit v) |) )"


definition PC_changed_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " PC_changed_ref = ( (|
  name = (''__PC_changed''),
  read_from = (\<lambda> s . (PC_changed   s)),
  write_to = (\<lambda> v s .  (( s (| PC_changed := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


definition currentInstr_ref  :: "((regstate),(register_value),((32)Word.word))register_ref "  where 
     " currentInstr_ref = ( (|
  name = (''__currentInstr''),
  read_from = (\<lambda> s . (currentInstr   s)),
  write_to = (\<lambda> v s .  (( s (| currentInstr := v |)))),
  of_regval = (\<lambda> v .  vector_32_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_32_dec_bit v) |) )"


definition currentInstrLength_ref  :: "((regstate),(register_value),(int))register_ref "  where 
     " currentInstrLength_ref = ( (|
  name = (''__currentInstrLength''),
  read_from = (\<lambda> s . (currentInstrLength   s)),
  write_to = (\<lambda> v s .  (( s (| currentInstrLength := v |)))),
  of_regval = (\<lambda> v .  int_of_regval v),
  regval_of = (\<lambda> v .  regval_of_int v) |) )"


definition defaultRAM_ref  :: "((regstate),(register_value),((56)Word.word))register_ref "  where 
     " defaultRAM_ref = ( (|
  name = (''__defaultRAM''),
  read_from = (\<lambda> s . (defaultRAM   s)),
  write_to = (\<lambda> v s .  (( s (| defaultRAM := v |)))),
  of_regval = (\<lambda> v .  vector_56_dec_bit_of_regval v),
  regval_of = (\<lambda> v .  regval_of_vector_56_dec_bit v) |) )"


definition highest_el_aarch32_ref  :: "((regstate),(register_value),(bool))register_ref "  where 
     " highest_el_aarch32_ref = ( (|
  name = (''__highest_el_aarch32''),
  read_from = (\<lambda> s . (highest_el_aarch32   s)),
  write_to = (\<lambda> v s .  (( s (| highest_el_aarch32 := v |)))),
  of_regval = (\<lambda> v .  bool_of_regval v),
  regval_of = (\<lambda> v .  regval_of_bool v) |) )"


\<comment> \<open>\<open>val get_regval : string -> regstate -> maybe register_value\<close>\<close>
definition get_regval  :: " string \<Rightarrow> regstate \<Rightarrow>(register_value)option "  where 
     " get_regval reg_name s = (
  if reg_name = (''CNTHCTL_EL2'') then Some ((regval_of   CNTHCTL_EL2_ref) ((read_from   CNTHCTL_EL2_ref) s)) else
  if reg_name = (''CPTR_EL2'') then Some ((regval_of   CPTR_EL2_ref) ((read_from   CPTR_EL2_ref) s)) else
  if reg_name = (''CCSIDR_EL1'') then Some ((regval_of   CCSIDR_EL1_ref) ((read_from   CCSIDR_EL1_ref) s)) else
  if reg_name = (''ACTLR_EL1'') then Some ((regval_of   ACTLR_EL1_ref) ((read_from   ACTLR_EL1_ref) s)) else
  if reg_name = (''ACTLR_EL2'') then Some ((regval_of   ACTLR_EL2_ref) ((read_from   ACTLR_EL2_ref) s)) else
  if reg_name = (''ACTLR_EL3'') then Some ((regval_of   ACTLR_EL3_ref) ((read_from   ACTLR_EL3_ref) s)) else
  if reg_name = (''AFSR0_EL1'') then Some ((regval_of   AFSR0_EL1_ref) ((read_from   AFSR0_EL1_ref) s)) else
  if reg_name = (''AFSR0_EL2'') then Some ((regval_of   AFSR0_EL2_ref) ((read_from   AFSR0_EL2_ref) s)) else
  if reg_name = (''AFSR0_EL3'') then Some ((regval_of   AFSR0_EL3_ref) ((read_from   AFSR0_EL3_ref) s)) else
  if reg_name = (''AFSR1_EL1'') then Some ((regval_of   AFSR1_EL1_ref) ((read_from   AFSR1_EL1_ref) s)) else
  if reg_name = (''AFSR1_EL2'') then Some ((regval_of   AFSR1_EL2_ref) ((read_from   AFSR1_EL2_ref) s)) else
  if reg_name = (''AFSR1_EL3'') then Some ((regval_of   AFSR1_EL3_ref) ((read_from   AFSR1_EL3_ref) s)) else
  if reg_name = (''AIDR_EL1'') then Some ((regval_of   AIDR_EL1_ref) ((read_from   AIDR_EL1_ref) s)) else
  if reg_name = (''AMAIR_EL1'') then Some ((regval_of   AMAIR_EL1_ref) ((read_from   AMAIR_EL1_ref) s)) else
  if reg_name = (''AMAIR_EL2'') then Some ((regval_of   AMAIR_EL2_ref) ((read_from   AMAIR_EL2_ref) s)) else
  if reg_name = (''AMAIR_EL3'') then Some ((regval_of   AMAIR_EL3_ref) ((read_from   AMAIR_EL3_ref) s)) else
  if reg_name = (''APDAKeyHi_EL1'') then Some ((regval_of   APDAKeyHi_EL1_ref) ((read_from   APDAKeyHi_EL1_ref) s)) else
  if reg_name = (''APDAKeyLo_EL1'') then Some ((regval_of   APDAKeyLo_EL1_ref) ((read_from   APDAKeyLo_EL1_ref) s)) else
  if reg_name = (''APDBKeyHi_EL1'') then Some ((regval_of   APDBKeyHi_EL1_ref) ((read_from   APDBKeyHi_EL1_ref) s)) else
  if reg_name = (''APDBKeyLo_EL1'') then Some ((regval_of   APDBKeyLo_EL1_ref) ((read_from   APDBKeyLo_EL1_ref) s)) else
  if reg_name = (''APGAKeyHi_EL1'') then Some ((regval_of   APGAKeyHi_EL1_ref) ((read_from   APGAKeyHi_EL1_ref) s)) else
  if reg_name = (''APGAKeyLo_EL1'') then Some ((regval_of   APGAKeyLo_EL1_ref) ((read_from   APGAKeyLo_EL1_ref) s)) else
  if reg_name = (''APIAKeyHi_EL1'') then Some ((regval_of   APIAKeyHi_EL1_ref) ((read_from   APIAKeyHi_EL1_ref) s)) else
  if reg_name = (''APIAKeyLo_EL1'') then Some ((regval_of   APIAKeyLo_EL1_ref) ((read_from   APIAKeyLo_EL1_ref) s)) else
  if reg_name = (''APIBKeyHi_EL1'') then Some ((regval_of   APIBKeyHi_EL1_ref) ((read_from   APIBKeyHi_EL1_ref) s)) else
  if reg_name = (''APIBKeyLo_EL1'') then Some ((regval_of   APIBKeyLo_EL1_ref) ((read_from   APIBKeyLo_EL1_ref) s)) else
  if reg_name = (''BTypeCompatible'') then Some ((regval_of   BTypeCompatible_ref) ((read_from   BTypeCompatible_ref) s)) else
  if reg_name = (''BTypeNext'') then Some ((regval_of   BTypeNext_ref) ((read_from   BTypeNext_ref) s)) else
  if reg_name = (''CCSIDR2_EL1'') then Some ((regval_of   CCSIDR2_EL1_ref) ((read_from   CCSIDR2_EL1_ref) s)) else
  if reg_name = (''CLIDR_EL1'') then Some ((regval_of   CLIDR_EL1_ref) ((read_from   CLIDR_EL1_ref) s)) else
  if reg_name = (''CNTFRQ_EL0'') then Some ((regval_of   CNTFRQ_EL0_ref) ((read_from   CNTFRQ_EL0_ref) s)) else
  if reg_name = (''CNTHPS_CTL_EL2'') then Some ((regval_of   CNTHPS_CTL_EL2_ref) ((read_from   CNTHPS_CTL_EL2_ref) s)) else
  if reg_name = (''CNTHPS_CVAL_EL2'') then Some ((regval_of   CNTHPS_CVAL_EL2_ref) ((read_from   CNTHPS_CVAL_EL2_ref) s)) else
  if reg_name = (''CNTHPS_TVAL_EL2'') then Some ((regval_of   CNTHPS_TVAL_EL2_ref) ((read_from   CNTHPS_TVAL_EL2_ref) s)) else
  if reg_name = (''CNTHP_CTL_EL2'') then Some ((regval_of   CNTHP_CTL_EL2_ref) ((read_from   CNTHP_CTL_EL2_ref) s)) else
  if reg_name = (''CNTHP_CVAL_EL2'') then Some ((regval_of   CNTHP_CVAL_EL2_ref) ((read_from   CNTHP_CVAL_EL2_ref) s)) else
  if reg_name = (''CNTHP_TVAL_EL2'') then Some ((regval_of   CNTHP_TVAL_EL2_ref) ((read_from   CNTHP_TVAL_EL2_ref) s)) else
  if reg_name = (''CNTHVS_CTL_EL2'') then Some ((regval_of   CNTHVS_CTL_EL2_ref) ((read_from   CNTHVS_CTL_EL2_ref) s)) else
  if reg_name = (''CNTHVS_CVAL_EL2'') then Some ((regval_of   CNTHVS_CVAL_EL2_ref) ((read_from   CNTHVS_CVAL_EL2_ref) s)) else
  if reg_name = (''CNTHVS_TVAL_EL2'') then Some ((regval_of   CNTHVS_TVAL_EL2_ref) ((read_from   CNTHVS_TVAL_EL2_ref) s)) else
  if reg_name = (''CNTHV_CTL_EL2'') then Some ((regval_of   CNTHV_CTL_EL2_ref) ((read_from   CNTHV_CTL_EL2_ref) s)) else
  if reg_name = (''CNTHV_CVAL_EL2'') then Some ((regval_of   CNTHV_CVAL_EL2_ref) ((read_from   CNTHV_CVAL_EL2_ref) s)) else
  if reg_name = (''CNTHV_TVAL_EL2'') then Some ((regval_of   CNTHV_TVAL_EL2_ref) ((read_from   CNTHV_TVAL_EL2_ref) s)) else
  if reg_name = (''CNTKCTL_EL1'') then Some ((regval_of   CNTKCTL_EL1_ref) ((read_from   CNTKCTL_EL1_ref) s)) else
  if reg_name = (''CNTPCT_EL0'') then Some ((regval_of   CNTPCT_EL0_ref) ((read_from   CNTPCT_EL0_ref) s)) else
  if reg_name = (''CNTPS_CTL_EL1'') then Some ((regval_of   CNTPS_CTL_EL1_ref) ((read_from   CNTPS_CTL_EL1_ref) s)) else
  if reg_name = (''CNTPS_CVAL_EL1'') then Some ((regval_of   CNTPS_CVAL_EL1_ref) ((read_from   CNTPS_CVAL_EL1_ref) s)) else
  if reg_name = (''CNTPS_TVAL_EL1'') then Some ((regval_of   CNTPS_TVAL_EL1_ref) ((read_from   CNTPS_TVAL_EL1_ref) s)) else
  if reg_name = (''CNTP_CTL_EL0'') then Some ((regval_of   CNTP_CTL_EL0_ref) ((read_from   CNTP_CTL_EL0_ref) s)) else
  if reg_name = (''CNTP_CTL_S'') then Some ((regval_of   CNTP_CTL_S_ref) ((read_from   CNTP_CTL_S_ref) s)) else
  if reg_name = (''CNTP_CVAL_EL0'') then Some ((regval_of   CNTP_CVAL_EL0_ref) ((read_from   CNTP_CVAL_EL0_ref) s)) else
  if reg_name = (''CNTP_TVAL_EL0'') then Some ((regval_of   CNTP_TVAL_EL0_ref) ((read_from   CNTP_TVAL_EL0_ref) s)) else
  if reg_name = (''CNTVCT_EL0'') then Some ((regval_of   CNTVCT_EL0_ref) ((read_from   CNTVCT_EL0_ref) s)) else
  if reg_name = (''CNTVOFF_EL2'') then Some ((regval_of   CNTVOFF_EL2_ref) ((read_from   CNTVOFF_EL2_ref) s)) else
  if reg_name = (''CNTV_CTL_EL0'') then Some ((regval_of   CNTV_CTL_EL0_ref) ((read_from   CNTV_CTL_EL0_ref) s)) else
  if reg_name = (''CNTV_CVAL_EL0'') then Some ((regval_of   CNTV_CVAL_EL0_ref) ((read_from   CNTV_CVAL_EL0_ref) s)) else
  if reg_name = (''CNTV_TVAL_EL0'') then Some ((regval_of   CNTV_TVAL_EL0_ref) ((read_from   CNTV_TVAL_EL0_ref) s)) else
  if reg_name = (''CPACR_EL1'') then Some ((regval_of   CPACR_EL1_ref) ((read_from   CPACR_EL1_ref) s)) else
  if reg_name = (''CPTR_EL3'') then Some ((regval_of   CPTR_EL3_ref) ((read_from   CPTR_EL3_ref) s)) else
  if reg_name = (''CSSELR_EL1'') then Some ((regval_of   CSSELR_EL1_ref) ((read_from   CSSELR_EL1_ref) s)) else
  if reg_name = (''CSSELR_S'') then Some ((regval_of   CSSELR_S_ref) ((read_from   CSSELR_S_ref) s)) else
  if reg_name = (''CTR_EL0'') then Some ((regval_of   CTR_EL0_ref) ((read_from   CTR_EL0_ref) s)) else
  if reg_name = (''DBGAUTHSTATUS_EL1'') then Some ((regval_of   DBGAUTHSTATUS_EL1_ref) ((read_from   DBGAUTHSTATUS_EL1_ref) s)) else
  if reg_name = (''DBGCLAIMCLR_EL1'') then Some ((regval_of   DBGCLAIMCLR_EL1_ref) ((read_from   DBGCLAIMCLR_EL1_ref) s)) else
  if reg_name = (''DBGCLAIMSET_EL1'') then Some ((regval_of   DBGCLAIMSET_EL1_ref) ((read_from   DBGCLAIMSET_EL1_ref) s)) else
  if reg_name = (''DBGDEVID1'') then Some ((regval_of   DBGDEVID1_ref) ((read_from   DBGDEVID1_ref) s)) else
  if reg_name = (''DBGDEVID2'') then Some ((regval_of   DBGDEVID2_ref) ((read_from   DBGDEVID2_ref) s)) else
  if reg_name = (''DBGDSCRint'') then Some ((regval_of   DBGDSCRint_ref) ((read_from   DBGDSCRint_ref) s)) else
  if reg_name = (''DBGDTRRX_EL0'') then Some ((regval_of   DBGDTRRX_EL0_ref) ((read_from   DBGDTRRX_EL0_ref) s)) else
  if reg_name = (''DBGDTRTX_EL0'') then Some ((regval_of   DBGDTRTX_EL0_ref) ((read_from   DBGDTRTX_EL0_ref) s)) else
  if reg_name = (''DBGDTR_EL0'') then Some ((regval_of   DBGDTR_EL0_ref) ((read_from   DBGDTR_EL0_ref) s)) else
  if reg_name = (''DBGWFAR'') then Some ((regval_of   DBGWFAR_ref) ((read_from   DBGWFAR_ref) s)) else
  if reg_name = (''DCZID_EL0'') then Some ((regval_of   DCZID_EL0_ref) ((read_from   DCZID_EL0_ref) s)) else
  if reg_name = (''DISR_EL1'') then Some ((regval_of   DISR_EL1_ref) ((read_from   DISR_EL1_ref) s)) else
  if reg_name = (''EDECCR'') then Some ((regval_of   EDECCR_ref) ((read_from   EDECCR_ref) s)) else
  if reg_name = (''EDECR'') then Some ((regval_of   EDECR_ref) ((read_from   EDECR_ref) s)) else
  if reg_name = (''EDESR'') then Some ((regval_of   EDESR_ref) ((read_from   EDESR_ref) s)) else
  if reg_name = (''EDLSR'') then Some ((regval_of   EDLSR_ref) ((read_from   EDLSR_ref) s)) else
  if reg_name = (''EDPCSR'') then Some ((regval_of   EDPCSR_ref) ((read_from   EDPCSR_ref) s)) else
  if reg_name = (''EDPFR'') then Some ((regval_of   EDPFR_ref) ((read_from   EDPFR_ref) s)) else
  if reg_name = (''EDPRCR'') then Some ((regval_of   EDPRCR_ref) ((read_from   EDPRCR_ref) s)) else
  if reg_name = (''EDPRSR'') then Some ((regval_of   EDPRSR_ref) ((read_from   EDPRSR_ref) s)) else
  if reg_name = (''EDVIDSR'') then Some ((regval_of   EDVIDSR_ref) ((read_from   EDVIDSR_ref) s)) else
  if reg_name = (''ELR_EL0'') then Some ((regval_of   ELR_EL0_ref) ((read_from   ELR_EL0_ref) s)) else
  if reg_name = (''ESP_EL0'') then Some ((regval_of   ESP_EL0_ref) ((read_from   ESP_EL0_ref) s)) else
  if reg_name = (''ESR_EL0'') then Some ((regval_of   ESR_EL0_ref) ((read_from   ESR_EL0_ref) s)) else
  if reg_name = (''EventRegister'') then Some ((regval_of   EventRegister_ref) ((read_from   EventRegister_ref) s)) else
  if reg_name = (''FAR_EL0'') then Some ((regval_of   FAR_EL0_ref) ((read_from   FAR_EL0_ref) s)) else
  if reg_name = (''FCSEIDR'') then Some ((regval_of   FCSEIDR_ref) ((read_from   FCSEIDR_ref) s)) else
  if reg_name = (''FPCR'') then Some ((regval_of   FPCR_ref) ((read_from   FPCR_ref) s)) else
  if reg_name = (''FPEXC32_EL2'') then Some ((regval_of   FPEXC32_EL2_ref) ((read_from   FPEXC32_EL2_ref) s)) else
  if reg_name = (''FPSCR'') then Some ((regval_of   FPSCR_ref) ((read_from   FPSCR_ref) s)) else
  if reg_name = (''FPSID'') then Some ((regval_of   FPSID_ref) ((read_from   FPSID_ref) s)) else
  if reg_name = (''FPSR'') then Some ((regval_of   FPSR_ref) ((read_from   FPSR_ref) s)) else
  if reg_name = (''GCR_EL1'') then Some ((regval_of   GCR_EL1_ref) ((read_from   GCR_EL1_ref) s)) else
  if reg_name = (''HACR_EL2'') then Some ((regval_of   HACR_EL2_ref) ((read_from   HACR_EL2_ref) s)) else
  if reg_name = (''HSTR_EL2'') then Some ((regval_of   HSTR_EL2_ref) ((read_from   HSTR_EL2_ref) s)) else
  if reg_name = (''ICC_AP0R_EL1'') then Some ((regval_of   ICC_AP0R_EL1_ref) ((read_from   ICC_AP0R_EL1_ref) s)) else
  if reg_name = (''ICC_AP1R_EL1'') then Some ((regval_of   ICC_AP1R_EL1_ref) ((read_from   ICC_AP1R_EL1_ref) s)) else
  if reg_name = (''ICC_ASGI1R_EL1'') then Some ((regval_of   ICC_ASGI1R_EL1_ref) ((read_from   ICC_ASGI1R_EL1_ref) s)) else
  if reg_name = (''ICC_BPR0_EL1'') then Some ((regval_of   ICC_BPR0_EL1_ref) ((read_from   ICC_BPR0_EL1_ref) s)) else
  if reg_name = (''ICC_BPR1_EL1_NS'') then Some ((regval_of   ICC_BPR1_EL1_NS_ref) ((read_from   ICC_BPR1_EL1_NS_ref) s)) else
  if reg_name = (''ICC_BPR1_EL1_S'') then Some ((regval_of   ICC_BPR1_EL1_S_ref) ((read_from   ICC_BPR1_EL1_S_ref) s)) else
  if reg_name = (''ICC_CTLR_EL1_NS'') then Some ((regval_of   ICC_CTLR_EL1_NS_ref) ((read_from   ICC_CTLR_EL1_NS_ref) s)) else
  if reg_name = (''ICC_CTLR_EL1_S'') then Some ((regval_of   ICC_CTLR_EL1_S_ref) ((read_from   ICC_CTLR_EL1_S_ref) s)) else
  if reg_name = (''ICC_CTLR_EL3'') then Some ((regval_of   ICC_CTLR_EL3_ref) ((read_from   ICC_CTLR_EL3_ref) s)) else
  if reg_name = (''ICC_DIR_EL1'') then Some ((regval_of   ICC_DIR_EL1_ref) ((read_from   ICC_DIR_EL1_ref) s)) else
  if reg_name = (''ICC_EOIR0_EL1'') then Some ((regval_of   ICC_EOIR0_EL1_ref) ((read_from   ICC_EOIR0_EL1_ref) s)) else
  if reg_name = (''ICC_EOIR1_EL1'') then Some ((regval_of   ICC_EOIR1_EL1_ref) ((read_from   ICC_EOIR1_EL1_ref) s)) else
  if reg_name = (''ICC_HPPIR0_EL1'') then Some ((regval_of   ICC_HPPIR0_EL1_ref) ((read_from   ICC_HPPIR0_EL1_ref) s)) else
  if reg_name = (''ICC_HPPIR1_EL1'') then Some ((regval_of   ICC_HPPIR1_EL1_ref) ((read_from   ICC_HPPIR1_EL1_ref) s)) else
  if reg_name = (''ICC_IAR0_EL1'') then Some ((regval_of   ICC_IAR0_EL1_ref) ((read_from   ICC_IAR0_EL1_ref) s)) else
  if reg_name = (''ICC_IAR1_EL1'') then Some ((regval_of   ICC_IAR1_EL1_ref) ((read_from   ICC_IAR1_EL1_ref) s)) else
  if reg_name = (''ICC_IGRPEN0_EL1'') then Some ((regval_of   ICC_IGRPEN0_EL1_ref) ((read_from   ICC_IGRPEN0_EL1_ref) s)) else
  if reg_name = (''ICC_IGRPEN1_EL1_NS'') then Some ((regval_of   ICC_IGRPEN1_EL1_NS_ref) ((read_from   ICC_IGRPEN1_EL1_NS_ref) s)) else
  if reg_name = (''ICC_IGRPEN1_EL1_S'') then Some ((regval_of   ICC_IGRPEN1_EL1_S_ref) ((read_from   ICC_IGRPEN1_EL1_S_ref) s)) else
  if reg_name = (''ICC_IGRPEN1_EL3'') then Some ((regval_of   ICC_IGRPEN1_EL3_ref) ((read_from   ICC_IGRPEN1_EL3_ref) s)) else
  if reg_name = (''ICC_PMR_EL1'') then Some ((regval_of   ICC_PMR_EL1_ref) ((read_from   ICC_PMR_EL1_ref) s)) else
  if reg_name = (''ICC_RPR_EL1'') then Some ((regval_of   ICC_RPR_EL1_ref) ((read_from   ICC_RPR_EL1_ref) s)) else
  if reg_name = (''ICC_SGI0R_EL1'') then Some ((regval_of   ICC_SGI0R_EL1_ref) ((read_from   ICC_SGI0R_EL1_ref) s)) else
  if reg_name = (''ICC_SGI1R_EL1'') then Some ((regval_of   ICC_SGI1R_EL1_ref) ((read_from   ICC_SGI1R_EL1_ref) s)) else
  if reg_name = (''ICC_SRE_EL1_NS'') then Some ((regval_of   ICC_SRE_EL1_NS_ref) ((read_from   ICC_SRE_EL1_NS_ref) s)) else
  if reg_name = (''ICC_SRE_EL1_S'') then Some ((regval_of   ICC_SRE_EL1_S_ref) ((read_from   ICC_SRE_EL1_S_ref) s)) else
  if reg_name = (''ICC_SRE_EL2'') then Some ((regval_of   ICC_SRE_EL2_ref) ((read_from   ICC_SRE_EL2_ref) s)) else
  if reg_name = (''ICC_SRE_EL3'') then Some ((regval_of   ICC_SRE_EL3_ref) ((read_from   ICC_SRE_EL3_ref) s)) else
  if reg_name = (''ICH_AP0R_EL2'') then Some ((regval_of   ICH_AP0R_EL2_ref) ((read_from   ICH_AP0R_EL2_ref) s)) else
  if reg_name = (''ICH_AP1R_EL2'') then Some ((regval_of   ICH_AP1R_EL2_ref) ((read_from   ICH_AP1R_EL2_ref) s)) else
  if reg_name = (''ICH_EISR_EL2'') then Some ((regval_of   ICH_EISR_EL2_ref) ((read_from   ICH_EISR_EL2_ref) s)) else
  if reg_name = (''ICH_ELRSR_EL2'') then Some ((regval_of   ICH_ELRSR_EL2_ref) ((read_from   ICH_ELRSR_EL2_ref) s)) else
  if reg_name = (''ICH_HCR_EL2'') then Some ((regval_of   ICH_HCR_EL2_ref) ((read_from   ICH_HCR_EL2_ref) s)) else
  if reg_name = (''ICH_MISR_EL2'') then Some ((regval_of   ICH_MISR_EL2_ref) ((read_from   ICH_MISR_EL2_ref) s)) else
  if reg_name = (''ICH_VMCR_EL2'') then Some ((regval_of   ICH_VMCR_EL2_ref) ((read_from   ICH_VMCR_EL2_ref) s)) else
  if reg_name = (''ICH_VTR_EL2'') then Some ((regval_of   ICH_VTR_EL2_ref) ((read_from   ICH_VTR_EL2_ref) s)) else
  if reg_name = (''ICV_AP0R_EL1'') then Some ((regval_of   ICV_AP0R_EL1_ref) ((read_from   ICV_AP0R_EL1_ref) s)) else
  if reg_name = (''ICV_AP1R_EL1'') then Some ((regval_of   ICV_AP1R_EL1_ref) ((read_from   ICV_AP1R_EL1_ref) s)) else
  if reg_name = (''ICV_BPR0_EL1'') then Some ((regval_of   ICV_BPR0_EL1_ref) ((read_from   ICV_BPR0_EL1_ref) s)) else
  if reg_name = (''ICV_BPR1_EL1'') then Some ((regval_of   ICV_BPR1_EL1_ref) ((read_from   ICV_BPR1_EL1_ref) s)) else
  if reg_name = (''ICV_CTLR_EL1'') then Some ((regval_of   ICV_CTLR_EL1_ref) ((read_from   ICV_CTLR_EL1_ref) s)) else
  if reg_name = (''ICV_DIR_EL1'') then Some ((regval_of   ICV_DIR_EL1_ref) ((read_from   ICV_DIR_EL1_ref) s)) else
  if reg_name = (''ICV_EOIR0_EL1'') then Some ((regval_of   ICV_EOIR0_EL1_ref) ((read_from   ICV_EOIR0_EL1_ref) s)) else
  if reg_name = (''ICV_EOIR1_EL1'') then Some ((regval_of   ICV_EOIR1_EL1_ref) ((read_from   ICV_EOIR1_EL1_ref) s)) else
  if reg_name = (''ICV_HPPIR0_EL1'') then Some ((regval_of   ICV_HPPIR0_EL1_ref) ((read_from   ICV_HPPIR0_EL1_ref) s)) else
  if reg_name = (''ICV_HPPIR1_EL1'') then Some ((regval_of   ICV_HPPIR1_EL1_ref) ((read_from   ICV_HPPIR1_EL1_ref) s)) else
  if reg_name = (''ICV_IAR0_EL1'') then Some ((regval_of   ICV_IAR0_EL1_ref) ((read_from   ICV_IAR0_EL1_ref) s)) else
  if reg_name = (''ICV_IAR1_EL1'') then Some ((regval_of   ICV_IAR1_EL1_ref) ((read_from   ICV_IAR1_EL1_ref) s)) else
  if reg_name = (''ICV_IGRPEN0_EL1'') then Some ((regval_of   ICV_IGRPEN0_EL1_ref) ((read_from   ICV_IGRPEN0_EL1_ref) s)) else
  if reg_name = (''ICV_IGRPEN1_EL1'') then Some ((regval_of   ICV_IGRPEN1_EL1_ref) ((read_from   ICV_IGRPEN1_EL1_ref) s)) else
  if reg_name = (''ICV_PMR_EL1'') then Some ((regval_of   ICV_PMR_EL1_ref) ((read_from   ICV_PMR_EL1_ref) s)) else
  if reg_name = (''ICV_RPR_EL1'') then Some ((regval_of   ICV_RPR_EL1_ref) ((read_from   ICV_RPR_EL1_ref) s)) else
  if reg_name = (''ID_AA64AFR0_EL1'') then Some ((regval_of   ID_AA64AFR0_EL1_ref) ((read_from   ID_AA64AFR0_EL1_ref) s)) else
  if reg_name = (''ID_AA64AFR1_EL1'') then Some ((regval_of   ID_AA64AFR1_EL1_ref) ((read_from   ID_AA64AFR1_EL1_ref) s)) else
  if reg_name = (''ID_AA64DFR1_EL1'') then Some ((regval_of   ID_AA64DFR1_EL1_ref) ((read_from   ID_AA64DFR1_EL1_ref) s)) else
  if reg_name = (''ID_AA64ISAR0_EL1'') then Some ((regval_of   ID_AA64ISAR0_EL1_ref) ((read_from   ID_AA64ISAR0_EL1_ref) s)) else
  if reg_name = (''ID_AA64ISAR1_EL1'') then Some ((regval_of   ID_AA64ISAR1_EL1_ref) ((read_from   ID_AA64ISAR1_EL1_ref) s)) else
  if reg_name = (''ID_AA64MMFR0_EL1'') then Some ((regval_of   ID_AA64MMFR0_EL1_ref) ((read_from   ID_AA64MMFR0_EL1_ref) s)) else
  if reg_name = (''ID_AA64MMFR1_EL1'') then Some ((regval_of   ID_AA64MMFR1_EL1_ref) ((read_from   ID_AA64MMFR1_EL1_ref) s)) else
  if reg_name = (''ID_AA64MMFR2_EL1'') then Some ((regval_of   ID_AA64MMFR2_EL1_ref) ((read_from   ID_AA64MMFR2_EL1_ref) s)) else
  if reg_name = (''ID_AA64PFR0_EL1'') then Some ((regval_of   ID_AA64PFR0_EL1_ref) ((read_from   ID_AA64PFR0_EL1_ref) s)) else
  if reg_name = (''ID_AA64PFR1_EL1'') then Some ((regval_of   ID_AA64PFR1_EL1_ref) ((read_from   ID_AA64PFR1_EL1_ref) s)) else
  if reg_name = (''ID_AFR0_EL1'') then Some ((regval_of   ID_AFR0_EL1_ref) ((read_from   ID_AFR0_EL1_ref) s)) else
  if reg_name = (''ID_DFR0_EL1'') then Some ((regval_of   ID_DFR0_EL1_ref) ((read_from   ID_DFR0_EL1_ref) s)) else
  if reg_name = (''ID_ISAR0_EL1'') then Some ((regval_of   ID_ISAR0_EL1_ref) ((read_from   ID_ISAR0_EL1_ref) s)) else
  if reg_name = (''ID_ISAR1_EL1'') then Some ((regval_of   ID_ISAR1_EL1_ref) ((read_from   ID_ISAR1_EL1_ref) s)) else
  if reg_name = (''ID_ISAR2_EL1'') then Some ((regval_of   ID_ISAR2_EL1_ref) ((read_from   ID_ISAR2_EL1_ref) s)) else
  if reg_name = (''ID_ISAR3_EL1'') then Some ((regval_of   ID_ISAR3_EL1_ref) ((read_from   ID_ISAR3_EL1_ref) s)) else
  if reg_name = (''ID_ISAR4_EL1'') then Some ((regval_of   ID_ISAR4_EL1_ref) ((read_from   ID_ISAR4_EL1_ref) s)) else
  if reg_name = (''ID_ISAR5_EL1'') then Some ((regval_of   ID_ISAR5_EL1_ref) ((read_from   ID_ISAR5_EL1_ref) s)) else
  if reg_name = (''ID_ISAR6_EL1'') then Some ((regval_of   ID_ISAR6_EL1_ref) ((read_from   ID_ISAR6_EL1_ref) s)) else
  if reg_name = (''ID_MMFR0_EL1'') then Some ((regval_of   ID_MMFR0_EL1_ref) ((read_from   ID_MMFR0_EL1_ref) s)) else
  if reg_name = (''ID_MMFR1_EL1'') then Some ((regval_of   ID_MMFR1_EL1_ref) ((read_from   ID_MMFR1_EL1_ref) s)) else
  if reg_name = (''ID_MMFR2_EL1'') then Some ((regval_of   ID_MMFR2_EL1_ref) ((read_from   ID_MMFR2_EL1_ref) s)) else
  if reg_name = (''ID_MMFR3_EL1'') then Some ((regval_of   ID_MMFR3_EL1_ref) ((read_from   ID_MMFR3_EL1_ref) s)) else
  if reg_name = (''ID_MMFR4_EL1'') then Some ((regval_of   ID_MMFR4_EL1_ref) ((read_from   ID_MMFR4_EL1_ref) s)) else
  if reg_name = (''ID_PFR0_EL1'') then Some ((regval_of   ID_PFR0_EL1_ref) ((read_from   ID_PFR0_EL1_ref) s)) else
  if reg_name = (''ID_PFR1_EL1'') then Some ((regval_of   ID_PFR1_EL1_ref) ((read_from   ID_PFR1_EL1_ref) s)) else
  if reg_name = (''ID_PFR2_EL1'') then Some ((regval_of   ID_PFR2_EL1_ref) ((read_from   ID_PFR2_EL1_ref) s)) else
  if reg_name = (''ISR_EL1'') then Some ((regval_of   ISR_EL1_ref) ((read_from   ISR_EL1_ref) s)) else
  if reg_name = (''LORC_EL1'') then Some ((regval_of   LORC_EL1_ref) ((read_from   LORC_EL1_ref) s)) else
  if reg_name = (''LOREA_EL1'') then Some ((regval_of   LOREA_EL1_ref) ((read_from   LOREA_EL1_ref) s)) else
  if reg_name = (''LORID_EL1'') then Some ((regval_of   LORID_EL1_ref) ((read_from   LORID_EL1_ref) s)) else
  if reg_name = (''LORN_EL1'') then Some ((regval_of   LORN_EL1_ref) ((read_from   LORN_EL1_ref) s)) else
  if reg_name = (''LORSA_EL1'') then Some ((regval_of   LORSA_EL1_ref) ((read_from   LORSA_EL1_ref) s)) else
  if reg_name = (''MDCCINT_EL1'') then Some ((regval_of   MDCCINT_EL1_ref) ((read_from   MDCCINT_EL1_ref) s)) else
  if reg_name = (''MDCCSR_EL0'') then Some ((regval_of   MDCCSR_EL0_ref) ((read_from   MDCCSR_EL0_ref) s)) else
  if reg_name = (''MDRAR_EL1'') then Some ((regval_of   MDRAR_EL1_ref) ((read_from   MDRAR_EL1_ref) s)) else
  if reg_name = (''MIDR_EL1'') then Some ((regval_of   MIDR_EL1_ref) ((read_from   MIDR_EL1_ref) s)) else
  if reg_name = (''MVFR0_EL1'') then Some ((regval_of   MVFR0_EL1_ref) ((read_from   MVFR0_EL1_ref) s)) else
  if reg_name = (''MVFR1_EL1'') then Some ((regval_of   MVFR1_EL1_ref) ((read_from   MVFR1_EL1_ref) s)) else
  if reg_name = (''MVFR2_EL1'') then Some ((regval_of   MVFR2_EL1_ref) ((read_from   MVFR2_EL1_ref) s)) else
  if reg_name = (''NSACR'') then Some ((regval_of   NSACR_ref) ((read_from   NSACR_ref) s)) else
  if reg_name = (''OSDTRRX_EL1'') then Some ((regval_of   OSDTRRX_EL1_ref) ((read_from   OSDTRRX_EL1_ref) s)) else
  if reg_name = (''OSDTRTX_EL1'') then Some ((regval_of   OSDTRTX_EL1_ref) ((read_from   OSDTRTX_EL1_ref) s)) else
  if reg_name = (''OSECCR_EL1'') then Some ((regval_of   OSECCR_EL1_ref) ((read_from   OSECCR_EL1_ref) s)) else
  if reg_name = (''OSLAR_EL1'') then Some ((regval_of   OSLAR_EL1_ref) ((read_from   OSLAR_EL1_ref) s)) else
  if reg_name = (''PAR_EL1'') then Some ((regval_of   PAR_EL1_ref) ((read_from   PAR_EL1_ref) s)) else
  if reg_name = (''PAR_S'') then Some ((regval_of   PAR_S_ref) ((read_from   PAR_S_ref) s)) else
  if reg_name = (''PMCCFILTR_EL0'') then Some ((regval_of   PMCCFILTR_EL0_ref) ((read_from   PMCCFILTR_EL0_ref) s)) else
  if reg_name = (''PMCCNTR_EL0'') then Some ((regval_of   PMCCNTR_EL0_ref) ((read_from   PMCCNTR_EL0_ref) s)) else
  if reg_name = (''PMCEID0_EL0'') then Some ((regval_of   PMCEID0_EL0_ref) ((read_from   PMCEID0_EL0_ref) s)) else
  if reg_name = (''PMCEID1_EL0'') then Some ((regval_of   PMCEID1_EL0_ref) ((read_from   PMCEID1_EL0_ref) s)) else
  if reg_name = (''PMCNTENCLR_EL0'') then Some ((regval_of   PMCNTENCLR_EL0_ref) ((read_from   PMCNTENCLR_EL0_ref) s)) else
  if reg_name = (''PMCNTENSET_EL0'') then Some ((regval_of   PMCNTENSET_EL0_ref) ((read_from   PMCNTENSET_EL0_ref) s)) else
  if reg_name = (''PMCR_EL0'') then Some ((regval_of   PMCR_EL0_ref) ((read_from   PMCR_EL0_ref) s)) else
  if reg_name = (''PMEVCNTR_EL0'') then Some ((regval_of   PMEVCNTR_EL0_ref) ((read_from   PMEVCNTR_EL0_ref) s)) else
  if reg_name = (''PMEVTYPER_EL0'') then Some ((regval_of   PMEVTYPER_EL0_ref) ((read_from   PMEVTYPER_EL0_ref) s)) else
  if reg_name = (''PMINTENCLR_EL1'') then Some ((regval_of   PMINTENCLR_EL1_ref) ((read_from   PMINTENCLR_EL1_ref) s)) else
  if reg_name = (''PMINTENSET_EL1'') then Some ((regval_of   PMINTENSET_EL1_ref) ((read_from   PMINTENSET_EL1_ref) s)) else
  if reg_name = (''PMLSR'') then Some ((regval_of   PMLSR_ref) ((read_from   PMLSR_ref) s)) else
  if reg_name = (''PMMIR'') then Some ((regval_of   PMMIR_ref) ((read_from   PMMIR_ref) s)) else
  if reg_name = (''PMMIR_EL1'') then Some ((regval_of   PMMIR_EL1_ref) ((read_from   PMMIR_EL1_ref) s)) else
  if reg_name = (''PMOVSCLR_EL0'') then Some ((regval_of   PMOVSCLR_EL0_ref) ((read_from   PMOVSCLR_EL0_ref) s)) else
  if reg_name = (''PMOVSSET_EL0'') then Some ((regval_of   PMOVSSET_EL0_ref) ((read_from   PMOVSSET_EL0_ref) s)) else
  if reg_name = (''PMPCSR'') then Some ((regval_of   PMPCSR_ref) ((read_from   PMPCSR_ref) s)) else
  if reg_name = (''PMSELR_EL0'') then Some ((regval_of   PMSELR_EL0_ref) ((read_from   PMSELR_EL0_ref) s)) else
  if reg_name = (''PMSWINC_EL0'') then Some ((regval_of   PMSWINC_EL0_ref) ((read_from   PMSWINC_EL0_ref) s)) else
  if reg_name = (''PMUSERENR_EL0'') then Some ((regval_of   PMUSERENR_EL0_ref) ((read_from   PMUSERENR_EL0_ref) s)) else
  if reg_name = (''PMVIDSR'') then Some ((regval_of   PMVIDSR_ref) ((read_from   PMVIDSR_ref) s)) else
  if reg_name = (''PMXEVCNTR_EL0'') then Some ((regval_of   PMXEVCNTR_EL0_ref) ((read_from   PMXEVCNTR_EL0_ref) s)) else
  if reg_name = (''PMXEVTYPER_EL0'') then Some ((regval_of   PMXEVTYPER_EL0_ref) ((read_from   PMXEVTYPER_EL0_ref) s)) else
  if reg_name = (''RC'') then Some ((regval_of   RC_ref) ((read_from   RC_ref) s)) else
  if reg_name = (''RD_EL0'') then Some ((regval_of   RD_EL0_ref) ((read_from   RD_EL0_ref) s)) else
  if reg_name = (''REVIDR_EL1'') then Some ((regval_of   REVIDR_EL1_ref) ((read_from   REVIDR_EL1_ref) s)) else
  if reg_name = (''RGSR_EL1'') then Some ((regval_of   RGSR_EL1_ref) ((read_from   RGSR_EL1_ref) s)) else
  if reg_name = (''RMR_EL1'') then Some ((regval_of   RMR_EL1_ref) ((read_from   RMR_EL1_ref) s)) else
  if reg_name = (''RMR_EL2'') then Some ((regval_of   RMR_EL2_ref) ((read_from   RMR_EL2_ref) s)) else
  if reg_name = (''RMR_EL3'') then Some ((regval_of   RMR_EL3_ref) ((read_from   RMR_EL3_ref) s)) else
  if reg_name = (''RMUID_EL0'') then Some ((regval_of   RMUID_EL0_ref) ((read_from   RMUID_EL0_ref) s)) else
  if reg_name = (''RNDR'') then Some ((regval_of   RNDR_ref) ((read_from   RNDR_ref) s)) else
  if reg_name = (''RNDRRS'') then Some ((regval_of   RNDRRS_ref) ((read_from   RNDRRS_ref) s)) else
  if reg_name = (''RVBAR'') then Some ((regval_of   RVBAR_ref) ((read_from   RVBAR_ref) s)) else
  if reg_name = (''RVBAR_EL1'') then Some ((regval_of   RVBAR_EL1_ref) ((read_from   RVBAR_EL1_ref) s)) else
  if reg_name = (''RVBAR_EL2'') then Some ((regval_of   RVBAR_EL2_ref) ((read_from   RVBAR_EL2_ref) s)) else
  if reg_name = (''RVBAR_EL3'') then Some ((regval_of   RVBAR_EL3_ref) ((read_from   RVBAR_EL3_ref) s)) else
  if reg_name = (''SCXTNUM_EL0'') then Some ((regval_of   SCXTNUM_EL0_ref) ((read_from   SCXTNUM_EL0_ref) s)) else
  if reg_name = (''SCXTNUM_EL1'') then Some ((regval_of   SCXTNUM_EL1_ref) ((read_from   SCXTNUM_EL1_ref) s)) else
  if reg_name = (''SCXTNUM_EL2'') then Some ((regval_of   SCXTNUM_EL2_ref) ((read_from   SCXTNUM_EL2_ref) s)) else
  if reg_name = (''SCXTNUM_EL3'') then Some ((regval_of   SCXTNUM_EL3_ref) ((read_from   SCXTNUM_EL3_ref) s)) else
  if reg_name = (''SDER32_EL2'') then Some ((regval_of   SDER32_EL2_ref) ((read_from   SDER32_EL2_ref) s)) else
  if reg_name = (''SPSR_EL0'') then Some ((regval_of   SPSR_EL0_ref) ((read_from   SPSR_EL0_ref) s)) else
  if reg_name = (''SP_EL0'') then Some ((regval_of   SP_EL0_ref) ((read_from   SP_EL0_ref) s)) else
  if reg_name = (''SP_EL1'') then Some ((regval_of   SP_EL1_ref) ((read_from   SP_EL1_ref) s)) else
  if reg_name = (''SP_EL2'') then Some ((regval_of   SP_EL2_ref) ((read_from   SP_EL2_ref) s)) else
  if reg_name = (''SP_EL3'') then Some ((regval_of   SP_EL3_ref) ((read_from   SP_EL3_ref) s)) else
  if reg_name = (''ShouldAdvanceIT'') then Some ((regval_of   ShouldAdvanceIT_ref) ((read_from   ShouldAdvanceIT_ref) s)) else
  if reg_name = (''TLBTR'') then Some ((regval_of   TLBTR_ref) ((read_from   TLBTR_ref) s)) else
  if reg_name = (''TPIDRRO_EL0'') then Some ((regval_of   TPIDRRO_EL0_ref) ((read_from   TPIDRRO_EL0_ref) s)) else
  if reg_name = (''TPIDR_EL0'') then Some ((regval_of   TPIDR_EL0_ref) ((read_from   TPIDR_EL0_ref) s)) else
  if reg_name = (''TPIDR_EL1'') then Some ((regval_of   TPIDR_EL1_ref) ((read_from   TPIDR_EL1_ref) s)) else
  if reg_name = (''TPIDR_EL2'') then Some ((regval_of   TPIDR_EL2_ref) ((read_from   TPIDR_EL2_ref) s)) else
  if reg_name = (''TPIDR_EL3'') then Some ((regval_of   TPIDR_EL3_ref) ((read_from   TPIDR_EL3_ref) s)) else
  if reg_name = (''TRFCR_EL1'') then Some ((regval_of   TRFCR_EL1_ref) ((read_from   TRFCR_EL1_ref) s)) else
  if reg_name = (''TRFCR_EL2'') then Some ((regval_of   TRFCR_EL2_ref) ((read_from   TRFCR_EL2_ref) s)) else
  if reg_name = (''VBAR_EL0'') then Some ((regval_of   VBAR_EL0_ref) ((read_from   VBAR_EL0_ref) s)) else
  if reg_name = (''VDISR_EL2'') then Some ((regval_of   VDISR_EL2_ref) ((read_from   VDISR_EL2_ref) s)) else
  if reg_name = (''VMPIDR_EL2'') then Some ((regval_of   VMPIDR_EL2_ref) ((read_from   VMPIDR_EL2_ref) s)) else
  if reg_name = (''VNCR_EL2'') then Some ((regval_of   VNCR_EL2_ref) ((read_from   VNCR_EL2_ref) s)) else
  if reg_name = (''VPIDR_EL2'') then Some ((regval_of   VPIDR_EL2_ref) ((read_from   VPIDR_EL2_ref) s)) else
  if reg_name = (''_V'') then Some ((regval_of   V_ref) ((read_from   V_ref) s)) else
  if reg_name = (''__currentCond'') then Some ((regval_of   currentCond_ref) ((read_from   currentCond_ref) s)) else
  if reg_name = (''__exclusive_block_address'') then Some ((regval_of   exclusive_block_address_ref) ((read_from   exclusive_block_address_ref) s)) else
  if reg_name = (''__saved_exception_level'') then Some ((regval_of   saved_exception_level_ref) ((read_from   saved_exception_level_ref) s)) else
  if reg_name = (''__unconditional'') then Some ((regval_of   unconditional_ref) ((read_from   unconditional_ref) s)) else
  if reg_name = (''CONTEXTIDR_S'') then Some ((regval_of   CONTEXTIDR_S_ref) ((read_from   CONTEXTIDR_S_ref) s)) else
  if reg_name = (''_GTEExtObsAccess'') then Some ((regval_of   GTEExtObsAccess_ref) ((read_from   GTEExtObsAccess_ref) s)) else
  if reg_name = (''_GTEExtObsAddress'') then Some ((regval_of   GTEExtObsAddress_ref) ((read_from   GTEExtObsAddress_ref) s)) else
  if reg_name = (''_GTEExtObsData'') then Some ((regval_of   GTEExtObsData_ref) ((read_from   GTEExtObsData_ref) s)) else
  if reg_name = (''_GTEExtObsResult'') then Some ((regval_of   GTEExtObsResult_ref) ((read_from   GTEExtObsResult_ref) s)) else
  if reg_name = (''_GTEExtObsActive'') then Some ((regval_of   GTEExtObsActive_ref) ((read_from   GTEExtObsActive_ref) s)) else
  if reg_name = (''_GTEExtObsCount'') then Some ((regval_of   GTEExtObsCount_ref) ((read_from   GTEExtObsCount_ref) s)) else
  if reg_name = (''_GTEExtObsIndex'') then Some ((regval_of   GTEExtObsIndex_ref) ((read_from   GTEExtObsIndex_ref) s)) else
  if reg_name = (''_GTEExtObsResultIndex'') then Some ((regval_of   GTEExtObsResultIndex_ref) ((read_from   GTEExtObsResultIndex_ref) s)) else
  if reg_name = (''_GTEExtObsResultIsAddress'') then Some ((regval_of   GTEExtObsResultIsAddress_ref) ((read_from   GTEExtObsResultIsAddress_ref) s)) else
  if reg_name = (''_GTEListParam0'') then Some ((regval_of   GTEListParam0_ref) ((read_from   GTEListParam0_ref) s)) else
  if reg_name = (''_GTEListParam1'') then Some ((regval_of   GTEListParam1_ref) ((read_from   GTEListParam1_ref) s)) else
  if reg_name = (''_GTEParam'') then Some ((regval_of   GTEParam_ref) ((read_from   GTEParam_ref) s)) else
  if reg_name = (''_GTE_AS_RecordedAccess'') then Some ((regval_of   GTE_AS_RecordedAccess_ref) ((read_from   GTE_AS_RecordedAccess_ref) s)) else
  if reg_name = (''_GTE_AS_RecordedAddress'') then Some ((regval_of   GTE_AS_RecordedAddress_ref) ((read_from   GTE_AS_RecordedAddress_ref) s)) else
  if reg_name = (''_GTE_AS_RecordedData'') then Some ((regval_of   GTE_AS_RecordedData_ref) ((read_from   GTE_AS_RecordedData_ref) s)) else
  if reg_name = (''_GTE_PPU_Access'') then Some ((regval_of   GTE_PPU_Access_ref) ((read_from   GTE_PPU_Access_ref) s)) else
  if reg_name = (''_GTE_PPU_Address'') then Some ((regval_of   GTE_PPU_Address_ref) ((read_from   GTE_PPU_Address_ref) s)) else
  if reg_name = (''_GTE_PPU_SizeEn'') then Some ((regval_of   GTE_PPU_SizeEn_ref) ((read_from   GTE_PPU_SizeEn_ref) s)) else
  if reg_name = (''AbortRgn64Hi1'') then Some ((regval_of   AbortRgn64Hi1_ref) ((read_from   AbortRgn64Hi1_ref) s)) else
  if reg_name = (''AbortRgn64Hi1_Hi'') then Some ((regval_of   AbortRgn64Hi1_Hi_ref) ((read_from   AbortRgn64Hi1_Hi_ref) s)) else
  if reg_name = (''AbortRgn64Hi2'') then Some ((regval_of   AbortRgn64Hi2_ref) ((read_from   AbortRgn64Hi2_ref) s)) else
  if reg_name = (''AbortRgn64Hi2_Hi'') then Some ((regval_of   AbortRgn64Hi2_Hi_ref) ((read_from   AbortRgn64Hi2_Hi_ref) s)) else
  if reg_name = (''AbortRgn64Lo1'') then Some ((regval_of   AbortRgn64Lo1_ref) ((read_from   AbortRgn64Lo1_ref) s)) else
  if reg_name = (''AbortRgn64Lo1_Hi'') then Some ((regval_of   AbortRgn64Lo1_Hi_ref) ((read_from   AbortRgn64Lo1_Hi_ref) s)) else
  if reg_name = (''AbortRgn64Lo2'') then Some ((regval_of   AbortRgn64Lo2_ref) ((read_from   AbortRgn64Lo2_ref) s)) else
  if reg_name = (''AbortRgn64Lo2_Hi'') then Some ((regval_of   AbortRgn64Lo2_Hi_ref) ((read_from   AbortRgn64Lo2_Hi_ref) s)) else
  if reg_name = (''CNTCR'') then Some ((regval_of   CNTCR_ref) ((read_from   CNTCR_ref) s)) else
  if reg_name = (''CNTCV'') then Some ((regval_of   CNTCV_ref) ((read_from   CNTCV_ref) s)) else
  if reg_name = (''CNTFID0'') then Some ((regval_of   CNTFID0_ref) ((read_from   CNTFID0_ref) s)) else
  if reg_name = (''CNTSR'') then Some ((regval_of   CNTSR_ref) ((read_from   CNTSR_ref) s)) else
  if reg_name = (''CONTEXTIDR_EL1'') then Some ((regval_of   CONTEXTIDR_EL1_ref) ((read_from   CONTEXTIDR_EL1_ref) s)) else
  if reg_name = (''CONTEXTIDR_EL2'') then Some ((regval_of   CONTEXTIDR_EL2_ref) ((read_from   CONTEXTIDR_EL2_ref) s)) else
  if reg_name = (''DACR32_EL2'') then Some ((regval_of   DACR32_EL2_ref) ((read_from   DACR32_EL2_ref) s)) else
  if reg_name = (''DACR_S'') then Some ((regval_of   DACR_S_ref) ((read_from   DACR_S_ref) s)) else
  if reg_name = (''DBGBCR'') then Some ((regval_of   DBGBCR_ref) ((read_from   DBGBCR_ref) s)) else
  if reg_name = (''DBGBCR_EL1'') then Some ((regval_of   DBGBCR_EL1_ref) ((read_from   DBGBCR_EL1_ref) s)) else
  if reg_name = (''DBGBVR'') then Some ((regval_of   DBGBVR_ref) ((read_from   DBGBVR_ref) s)) else
  if reg_name = (''DBGBVR_EL1'') then Some ((regval_of   DBGBVR_EL1_ref) ((read_from   DBGBVR_EL1_ref) s)) else
  if reg_name = (''DBGBXVR'') then Some ((regval_of   DBGBXVR_ref) ((read_from   DBGBXVR_ref) s)) else
  if reg_name = (''DBGDIDR'') then Some ((regval_of   DBGDIDR_ref) ((read_from   DBGDIDR_ref) s)) else
  if reg_name = (''DBGEN'') then Some ((regval_of   DBGEN_ref) ((read_from   DBGEN_ref) s)) else
  if reg_name = (''DBGPRCR_EL1'') then Some ((regval_of   DBGPRCR_EL1_ref) ((read_from   DBGPRCR_EL1_ref) s)) else
  if reg_name = (''DBGVCR32_EL2'') then Some ((regval_of   DBGVCR32_EL2_ref) ((read_from   DBGVCR32_EL2_ref) s)) else
  if reg_name = (''DBGWCR'') then Some ((regval_of   DBGWCR_ref) ((read_from   DBGWCR_ref) s)) else
  if reg_name = (''DBGWCR_EL1'') then Some ((regval_of   DBGWCR_EL1_ref) ((read_from   DBGWCR_EL1_ref) s)) else
  if reg_name = (''DBGWVR'') then Some ((regval_of   DBGWVR_ref) ((read_from   DBGWVR_ref) s)) else
  if reg_name = (''DBGWVR_EL1'') then Some ((regval_of   DBGWVR_EL1_ref) ((read_from   DBGWVR_EL1_ref) s)) else
  if reg_name = (''DLR_EL0'') then Some ((regval_of   DLR_EL0_ref) ((read_from   DLR_EL0_ref) s)) else
  if reg_name = (''DSPSR_EL0'') then Some ((regval_of   DSPSR_EL0_ref) ((read_from   DSPSR_EL0_ref) s)) else
  if reg_name = (''EDSCR'') then Some ((regval_of   EDSCR_ref) ((read_from   EDSCR_ref) s)) else
  if reg_name = (''DFSR_S'') then Some ((regval_of   DFSR_S_ref) ((read_from   DFSR_S_ref) s)) else
  if reg_name = (''ELR_EL3'') then Some ((regval_of   ELR_EL3_ref) ((read_from   ELR_EL3_ref) s)) else
  if reg_name = (''ELR_EL1'') then Some ((regval_of   ELR_EL1_ref) ((read_from   ELR_EL1_ref) s)) else
  if reg_name = (''ESR_EL3'') then Some ((regval_of   ESR_EL3_ref) ((read_from   ESR_EL3_ref) s)) else
  if reg_name = (''ESR_EL1'') then Some ((regval_of   ESR_EL1_ref) ((read_from   ESR_EL1_ref) s)) else
  if reg_name = (''ELR_EL2'') then Some ((regval_of   ELR_EL2_ref) ((read_from   ELR_EL2_ref) s)) else
  if reg_name = (''TCR_EL2'') then Some ((regval_of   TCR_EL2_ref) ((read_from   TCR_EL2_ref) s)) else
  if reg_name = (''ESR_EL2'') then Some ((regval_of   ESR_EL2_ref) ((read_from   ESR_EL2_ref) s)) else
  if reg_name = (''FAR_EL1'') then Some ((regval_of   FAR_EL1_ref) ((read_from   FAR_EL1_ref) s)) else
  if reg_name = (''FAR_EL2'') then Some ((regval_of   FAR_EL2_ref) ((read_from   FAR_EL2_ref) s)) else
  if reg_name = (''FAR_EL3'') then Some ((regval_of   FAR_EL3_ref) ((read_from   FAR_EL3_ref) s)) else
  if reg_name = (''HCR_EL2'') then Some ((regval_of   HCR_EL2_ref) ((read_from   HCR_EL2_ref) s)) else
  if reg_name = (''HPFAR_EL2'') then Some ((regval_of   HPFAR_EL2_ref) ((read_from   HPFAR_EL2_ref) s)) else
  if reg_name = (''ID_AA64DFR0_EL1'') then Some ((regval_of   ID_AA64DFR0_EL1_ref) ((read_from   ID_AA64DFR0_EL1_ref) s)) else
  if reg_name = (''IFSR32_EL2'') then Some ((regval_of   IFSR32_EL2_ref) ((read_from   IFSR32_EL2_ref) s)) else
  if reg_name = (''IFSR_S'') then Some ((regval_of   IFSR_S_ref) ((read_from   IFSR_S_ref) s)) else
  if reg_name = (''InGuardedPage'') then Some ((regval_of   InGuardedPage_ref) ((read_from   InGuardedPage_ref) s)) else
  if reg_name = (''LR_mon'') then Some ((regval_of   LR_mon_ref) ((read_from   LR_mon_ref) s)) else
  if reg_name = (''MAIR0_S'') then Some ((regval_of   MAIR0_S_ref) ((read_from   MAIR0_S_ref) s)) else
  if reg_name = (''MAIR1_S'') then Some ((regval_of   MAIR1_S_ref) ((read_from   MAIR1_S_ref) s)) else
  if reg_name = (''MAIR_EL1'') then Some ((regval_of   MAIR_EL1_ref) ((read_from   MAIR_EL1_ref) s)) else
  if reg_name = (''MAIR_EL2'') then Some ((regval_of   MAIR_EL2_ref) ((read_from   MAIR_EL2_ref) s)) else
  if reg_name = (''MAIR_EL3'') then Some ((regval_of   MAIR_EL3_ref) ((read_from   MAIR_EL3_ref) s)) else
  if reg_name = (''MDCR_EL2'') then Some ((regval_of   MDCR_EL2_ref) ((read_from   MDCR_EL2_ref) s)) else
  if reg_name = (''MDCR_EL3'') then Some ((regval_of   MDCR_EL3_ref) ((read_from   MDCR_EL3_ref) s)) else
  if reg_name = (''MDSCR_EL1'') then Some ((regval_of   MDSCR_EL1_ref) ((read_from   MDSCR_EL1_ref) s)) else
  if reg_name = (''MPAM0_EL1'') then Some ((regval_of   MPAM0_EL1_ref) ((read_from   MPAM0_EL1_ref) s)) else
  if reg_name = (''MPAM1_EL1'') then Some ((regval_of   MPAM1_EL1_ref) ((read_from   MPAM1_EL1_ref) s)) else
  if reg_name = (''MPAM2_EL2'') then Some ((regval_of   MPAM2_EL2_ref) ((read_from   MPAM2_EL2_ref) s)) else
  if reg_name = (''MPAM3_EL3'') then Some ((regval_of   MPAM3_EL3_ref) ((read_from   MPAM3_EL3_ref) s)) else
  if reg_name = (''MPAMHCR_EL2'') then Some ((regval_of   MPAMHCR_EL2_ref) ((read_from   MPAMHCR_EL2_ref) s)) else
  if reg_name = (''MPAMIDR_EL1'') then Some ((regval_of   MPAMIDR_EL1_ref) ((read_from   MPAMIDR_EL1_ref) s)) else
  if reg_name = (''MPAMVPM0_EL2'') then Some ((regval_of   MPAMVPM0_EL2_ref) ((read_from   MPAMVPM0_EL2_ref) s)) else
  if reg_name = (''MPAMVPM1_EL2'') then Some ((regval_of   MPAMVPM1_EL2_ref) ((read_from   MPAMVPM1_EL2_ref) s)) else
  if reg_name = (''MPAMVPM2_EL2'') then Some ((regval_of   MPAMVPM2_EL2_ref) ((read_from   MPAMVPM2_EL2_ref) s)) else
  if reg_name = (''MPAMVPM3_EL2'') then Some ((regval_of   MPAMVPM3_EL2_ref) ((read_from   MPAMVPM3_EL2_ref) s)) else
  if reg_name = (''MPAMVPM4_EL2'') then Some ((regval_of   MPAMVPM4_EL2_ref) ((read_from   MPAMVPM4_EL2_ref) s)) else
  if reg_name = (''MPAMVPM5_EL2'') then Some ((regval_of   MPAMVPM5_EL2_ref) ((read_from   MPAMVPM5_EL2_ref) s)) else
  if reg_name = (''MPAMVPM6_EL2'') then Some ((regval_of   MPAMVPM6_EL2_ref) ((read_from   MPAMVPM6_EL2_ref) s)) else
  if reg_name = (''MPAMVPM7_EL2'') then Some ((regval_of   MPAMVPM7_EL2_ref) ((read_from   MPAMVPM7_EL2_ref) s)) else
  if reg_name = (''MPAMVPMV_EL2'') then Some ((regval_of   MPAMVPMV_EL2_ref) ((read_from   MPAMVPMV_EL2_ref) s)) else
  if reg_name = (''MPIDR_EL1'') then Some ((regval_of   MPIDR_EL1_ref) ((read_from   MPIDR_EL1_ref) s)) else
  if reg_name = (''MVBAR'') then Some ((regval_of   MVBAR_ref) ((read_from   MVBAR_ref) s)) else
  if reg_name = (''NMRR_S'') then Some ((regval_of   NMRR_S_ref) ((read_from   NMRR_S_ref) s)) else
  if reg_name = (''OSDLR_EL1'') then Some ((regval_of   OSDLR_EL1_ref) ((read_from   OSDLR_EL1_ref) s)) else
  if reg_name = (''OSLSR_EL1'') then Some ((regval_of   OSLSR_EL1_ref) ((read_from   OSLSR_EL1_ref) s)) else
  if reg_name = (''PRRR_S'') then Some ((regval_of   PRRR_S_ref) ((read_from   PRRR_S_ref) s)) else
  if reg_name = (''PSTATE'') then Some ((regval_of   PSTATE_ref) ((read_from   PSTATE_ref) s)) else
  if reg_name = (''SCR_EL3'') then Some ((regval_of   SCR_EL3_ref) ((read_from   SCR_EL3_ref) s)) else
  if reg_name = (''SCTLR_EL1'') then Some ((regval_of   SCTLR_EL1_ref) ((read_from   SCTLR_EL1_ref) s)) else
  if reg_name = (''SCTLR_EL2'') then Some ((regval_of   SCTLR_EL2_ref) ((read_from   SCTLR_EL2_ref) s)) else
  if reg_name = (''SCTLR_EL3'') then Some ((regval_of   SCTLR_EL3_ref) ((read_from   SCTLR_EL3_ref) s)) else
  if reg_name = (''SCTLR_S'') then Some ((regval_of   SCTLR_S_ref) ((read_from   SCTLR_S_ref) s)) else
  if reg_name = (''SDER32_EL3'') then Some ((regval_of   SDER32_EL3_ref) ((read_from   SDER32_EL3_ref) s)) else
  if reg_name = (''SPIDEN'') then Some ((regval_of   SPIDEN_ref) ((read_from   SPIDEN_ref) s)) else
  if reg_name = (''SPSR_EL1'') then Some ((regval_of   SPSR_EL1_ref) ((read_from   SPSR_EL1_ref) s)) else
  if reg_name = (''SPSR_EL2'') then Some ((regval_of   SPSR_EL2_ref) ((read_from   SPSR_EL2_ref) s)) else
  if reg_name = (''SPSR_EL3'') then Some ((regval_of   SPSR_EL3_ref) ((read_from   SPSR_EL3_ref) s)) else
  if reg_name = (''SPSR_abt'') then Some ((regval_of   SPSR_abt_ref) ((read_from   SPSR_abt_ref) s)) else
  if reg_name = (''SPSR_fiq'') then Some ((regval_of   SPSR_fiq_ref) ((read_from   SPSR_fiq_ref) s)) else
  if reg_name = (''SPSR_irq'') then Some ((regval_of   SPSR_irq_ref) ((read_from   SPSR_irq_ref) s)) else
  if reg_name = (''SPSR_und'') then Some ((regval_of   SPSR_und_ref) ((read_from   SPSR_und_ref) s)) else
  if reg_name = (''SP_mon'') then Some ((regval_of   SP_mon_ref) ((read_from   SP_mon_ref) s)) else
  if reg_name = (''ScheduledFIQ'') then Some ((regval_of   ScheduledFIQ_ref) ((read_from   ScheduledFIQ_ref) s)) else
  if reg_name = (''ScheduledIRQ'') then Some ((regval_of   ScheduledIRQ_ref) ((read_from   ScheduledIRQ_ref) s)) else
  if reg_name = (''TCR_EL1'') then Some ((regval_of   TCR_EL1_ref) ((read_from   TCR_EL1_ref) s)) else
  if reg_name = (''TCR_EL3'') then Some ((regval_of   TCR_EL3_ref) ((read_from   TCR_EL3_ref) s)) else
  if reg_name = (''TFSRE0_EL1'') then Some ((regval_of   TFSRE0_EL1_ref) ((read_from   TFSRE0_EL1_ref) s)) else
  if reg_name = (''TFSR_EL1'') then Some ((regval_of   TFSR_EL1_ref) ((read_from   TFSR_EL1_ref) s)) else
  if reg_name = (''TFSR_EL2'') then Some ((regval_of   TFSR_EL2_ref) ((read_from   TFSR_EL2_ref) s)) else
  if reg_name = (''TFSR_EL3'') then Some ((regval_of   TFSR_EL3_ref) ((read_from   TFSR_EL3_ref) s)) else
  if reg_name = (''TLBHits'') then Some ((regval_of   TLBHits_ref) ((read_from   TLBHits_ref) s)) else
  if reg_name = (''TLBMisses'') then Some ((regval_of   TLBMisses_ref) ((read_from   TLBMisses_ref) s)) else
  if reg_name = (''TTBCR2_S'') then Some ((regval_of   TTBCR2_S_ref) ((read_from   TTBCR2_S_ref) s)) else
  if reg_name = (''TTBCR_S'') then Some ((regval_of   TTBCR_S_ref) ((read_from   TTBCR_S_ref) s)) else
  if reg_name = (''TTBR0_EL1'') then Some ((regval_of   TTBR0_EL1_ref) ((read_from   TTBR0_EL1_ref) s)) else
  if reg_name = (''TTBR0_EL2'') then Some ((regval_of   TTBR0_EL2_ref) ((read_from   TTBR0_EL2_ref) s)) else
  if reg_name = (''TTBR0_EL3'') then Some ((regval_of   TTBR0_EL3_ref) ((read_from   TTBR0_EL3_ref) s)) else
  if reg_name = (''TTBR0_S'') then Some ((regval_of   TTBR0_S_ref) ((read_from   TTBR0_S_ref) s)) else
  if reg_name = (''TTBR1_EL1'') then Some ((regval_of   TTBR1_EL1_ref) ((read_from   TTBR1_EL1_ref) s)) else
  if reg_name = (''TTBR1_EL2'') then Some ((regval_of   TTBR1_EL2_ref) ((read_from   TTBR1_EL2_ref) s)) else
  if reg_name = (''TTBR1_S'') then Some ((regval_of   TTBR1_S_ref) ((read_from   TTBR1_S_ref) s)) else
  if reg_name = (''VBAR_EL1'') then Some ((regval_of   VBAR_EL1_ref) ((read_from   VBAR_EL1_ref) s)) else
  if reg_name = (''VBAR_EL2'') then Some ((regval_of   VBAR_EL2_ref) ((read_from   VBAR_EL2_ref) s)) else
  if reg_name = (''VBAR_EL3'') then Some ((regval_of   VBAR_EL3_ref) ((read_from   VBAR_EL3_ref) s)) else
  if reg_name = (''VBAR_S'') then Some ((regval_of   VBAR_S_ref) ((read_from   VBAR_S_ref) s)) else
  if reg_name = (''VSESR_EL2'') then Some ((regval_of   VSESR_EL2_ref) ((read_from   VSESR_EL2_ref) s)) else
  if reg_name = (''VSTCR_EL2'') then Some ((regval_of   VSTCR_EL2_ref) ((read_from   VSTCR_EL2_ref) s)) else
  if reg_name = (''VSTTBR_EL2'') then Some ((regval_of   VSTTBR_EL2_ref) ((read_from   VSTTBR_EL2_ref) s)) else
  if reg_name = (''VTCR_EL2'') then Some ((regval_of   VTCR_EL2_ref) ((read_from   VTCR_EL2_ref) s)) else
  if reg_name = (''VTTBR_EL2'') then Some ((regval_of   VTTBR_EL2_ref) ((read_from   VTTBR_EL2_ref) s)) else
  if reg_name = (''_AXIAbortCtl'') then Some ((regval_of   AXIAbortCtl_ref) ((read_from   AXIAbortCtl_ref) s)) else
  if reg_name = (''_ClearFIQ'') then Some ((regval_of   ClearFIQ_ref) ((read_from   ClearFIQ_ref) s)) else
  if reg_name = (''_ClearIRQ'') then Some ((regval_of   ClearIRQ_ref) ((read_from   ClearIRQ_ref) s)) else
  if reg_name = (''_FIQPending'') then Some ((regval_of   FIQPending_ref) ((read_from   FIQPending_ref) s)) else
  if reg_name = (''_GTEActive'') then Some ((regval_of   GTEActive_ref) ((read_from   GTEActive_ref) s)) else
  if reg_name = (''_GTECurrentAPI'') then Some ((regval_of   GTECurrentAPI_ref) ((read_from   GTECurrentAPI_ref) s)) else
  if reg_name = (''_GTEHaveParamLo'') then Some ((regval_of   GTEHaveParamLo_ref) ((read_from   GTEHaveParamLo_ref) s)) else
  if reg_name = (''_GTEListParam'') then Some ((regval_of   GTEListParam_ref) ((read_from   GTEListParam_ref) s)) else
  if reg_name = (''_GTEListParamIndex'') then Some ((regval_of   GTEListParamIndex_ref) ((read_from   GTEListParamIndex_ref) s)) else
  if reg_name = (''_GTEListParamTerminator'') then Some ((regval_of   GTEListParamTerminator_ref) ((read_from   GTEListParamTerminator_ref) s)) else
  if reg_name = (''_GTEListParamTerminatorCount'') then Some ((regval_of   GTEListParamTerminatorCount_ref) ((read_from   GTEListParamTerminatorCount_ref) s)) else
  if reg_name = (''_GTEListParamTerminators'') then Some ((regval_of   GTEListParamTerminators_ref) ((read_from   GTEListParamTerminators_ref) s)) else
  if reg_name = (''_GTEParamCount'') then Some ((regval_of   GTEParamCount_ref) ((read_from   GTEParamCount_ref) s)) else
  if reg_name = (''_GTEParamLo'') then Some ((regval_of   GTEParamLo_ref) ((read_from   GTEParamLo_ref) s)) else
  if reg_name = (''_GTEParamType'') then Some ((regval_of   GTEParamType_ref) ((read_from   GTEParamType_ref) s)) else
  if reg_name = (''_GTEParamsComplete'') then Some ((regval_of   GTEParamsComplete_ref) ((read_from   GTEParamsComplete_ref) s)) else
  if reg_name = (''_GTEStatus'') then Some ((regval_of   GTEStatus_ref) ((read_from   GTEStatus_ref) s)) else
  if reg_name = (''_GTE_AS_Access'') then Some ((regval_of   GTE_AS_Access_ref) ((read_from   GTE_AS_Access_ref) s)) else
  if reg_name = (''_GTE_AS_AccessCount'') then Some ((regval_of   GTE_AS_AccessCount_ref) ((read_from   GTE_AS_AccessCount_ref) s)) else
  if reg_name = (''_GTE_AS_Address'') then Some ((regval_of   GTE_AS_Address_ref) ((read_from   GTE_AS_Address_ref) s)) else
  if reg_name = (''_GTE_AS_Size'') then Some ((regval_of   GTE_AS_Size_ref) ((read_from   GTE_AS_Size_ref) s)) else
  if reg_name = (''_IRQPending'') then Some ((regval_of   IRQPending_ref) ((read_from   IRQPending_ref) s)) else
  if reg_name = (''_PC'') then Some ((regval_of   PC_ref) ((read_from   PC_ref) s)) else
  if reg_name = (''_PPURACR'') then Some ((regval_of   PPURACR_ref) ((read_from   PPURACR_ref) s)) else
  if reg_name = (''_PPURBAR'') then Some ((regval_of   PPURBAR_ref) ((read_from   PPURBAR_ref) s)) else
  if reg_name = (''_PPURSER'') then Some ((regval_of   PPURSER_ref) ((read_from   PPURSER_ref) s)) else
  if reg_name = (''_PendingPhysicalSE'') then Some ((regval_of   PendingPhysicalSE_ref) ((read_from   PendingPhysicalSE_ref) s)) else
  if reg_name = (''_R'') then Some ((regval_of   R_ref) ((read_from   R_ref) s)) else
  if reg_name = (''_ScheduleFIQ'') then Some ((regval_of   ScheduleFIQ_ref) ((read_from   ScheduleFIQ_ref) s)) else
  if reg_name = (''_ScheduleIRQ'') then Some ((regval_of   ScheduleIRQ_ref) ((read_from   ScheduleIRQ_ref) s)) else
  if reg_name = (''_TLB'') then Some ((regval_of   TLB_ref) ((read_from   TLB_ref) s)) else
  if reg_name = (''_TargetCPU'') then Some ((regval_of   TargetCPU_ref) ((read_from   TargetCPU_ref) s)) else
  if reg_name = (''__CNTControlBase'') then Some ((regval_of   CNTControlBase_ref) ((read_from   CNTControlBase_ref) s)) else
  if reg_name = (''__LSISyndrome'') then Some ((regval_of   LSISyndrome_ref) ((read_from   LSISyndrome_ref) s)) else
  if reg_name = (''__PC_changed'') then Some ((regval_of   PC_changed_ref) ((read_from   PC_changed_ref) s)) else
  if reg_name = (''__currentInstr'') then Some ((regval_of   currentInstr_ref) ((read_from   currentInstr_ref) s)) else
  if reg_name = (''__currentInstrLength'') then Some ((regval_of   currentInstrLength_ref) ((read_from   currentInstrLength_ref) s)) else
  if reg_name = (''__defaultRAM'') then Some ((regval_of   defaultRAM_ref) ((read_from   defaultRAM_ref) s)) else
  if reg_name = (''__highest_el_aarch32'') then Some ((regval_of   highest_el_aarch32_ref) ((read_from   highest_el_aarch32_ref) s)) else
  None )"


\<comment> \<open>\<open>val set_regval : string -> register_value -> regstate -> maybe regstate\<close>\<close>
definition set_regval  :: " string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option "  where 
     " set_regval reg_name v s = (
  if reg_name = (''CNTHCTL_EL2'') then map_option (\<lambda> v . (write_to   CNTHCTL_EL2_ref) v s) ((of_regval   CNTHCTL_EL2_ref) v) else
  if reg_name = (''CPTR_EL2'') then map_option (\<lambda> v . (write_to   CPTR_EL2_ref) v s) ((of_regval   CPTR_EL2_ref) v) else
  if reg_name = (''CCSIDR_EL1'') then map_option (\<lambda> v . (write_to   CCSIDR_EL1_ref) v s) ((of_regval   CCSIDR_EL1_ref) v) else
  if reg_name = (''ACTLR_EL1'') then map_option (\<lambda> v . (write_to   ACTLR_EL1_ref) v s) ((of_regval   ACTLR_EL1_ref) v) else
  if reg_name = (''ACTLR_EL2'') then map_option (\<lambda> v . (write_to   ACTLR_EL2_ref) v s) ((of_regval   ACTLR_EL2_ref) v) else
  if reg_name = (''ACTLR_EL3'') then map_option (\<lambda> v . (write_to   ACTLR_EL3_ref) v s) ((of_regval   ACTLR_EL3_ref) v) else
  if reg_name = (''AFSR0_EL1'') then map_option (\<lambda> v . (write_to   AFSR0_EL1_ref) v s) ((of_regval   AFSR0_EL1_ref) v) else
  if reg_name = (''AFSR0_EL2'') then map_option (\<lambda> v . (write_to   AFSR0_EL2_ref) v s) ((of_regval   AFSR0_EL2_ref) v) else
  if reg_name = (''AFSR0_EL3'') then map_option (\<lambda> v . (write_to   AFSR0_EL3_ref) v s) ((of_regval   AFSR0_EL3_ref) v) else
  if reg_name = (''AFSR1_EL1'') then map_option (\<lambda> v . (write_to   AFSR1_EL1_ref) v s) ((of_regval   AFSR1_EL1_ref) v) else
  if reg_name = (''AFSR1_EL2'') then map_option (\<lambda> v . (write_to   AFSR1_EL2_ref) v s) ((of_regval   AFSR1_EL2_ref) v) else
  if reg_name = (''AFSR1_EL3'') then map_option (\<lambda> v . (write_to   AFSR1_EL3_ref) v s) ((of_regval   AFSR1_EL3_ref) v) else
  if reg_name = (''AIDR_EL1'') then map_option (\<lambda> v . (write_to   AIDR_EL1_ref) v s) ((of_regval   AIDR_EL1_ref) v) else
  if reg_name = (''AMAIR_EL1'') then map_option (\<lambda> v . (write_to   AMAIR_EL1_ref) v s) ((of_regval   AMAIR_EL1_ref) v) else
  if reg_name = (''AMAIR_EL2'') then map_option (\<lambda> v . (write_to   AMAIR_EL2_ref) v s) ((of_regval   AMAIR_EL2_ref) v) else
  if reg_name = (''AMAIR_EL3'') then map_option (\<lambda> v . (write_to   AMAIR_EL3_ref) v s) ((of_regval   AMAIR_EL3_ref) v) else
  if reg_name = (''APDAKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APDAKeyHi_EL1_ref) v s) ((of_regval   APDAKeyHi_EL1_ref) v) else
  if reg_name = (''APDAKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APDAKeyLo_EL1_ref) v s) ((of_regval   APDAKeyLo_EL1_ref) v) else
  if reg_name = (''APDBKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APDBKeyHi_EL1_ref) v s) ((of_regval   APDBKeyHi_EL1_ref) v) else
  if reg_name = (''APDBKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APDBKeyLo_EL1_ref) v s) ((of_regval   APDBKeyLo_EL1_ref) v) else
  if reg_name = (''APGAKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APGAKeyHi_EL1_ref) v s) ((of_regval   APGAKeyHi_EL1_ref) v) else
  if reg_name = (''APGAKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APGAKeyLo_EL1_ref) v s) ((of_regval   APGAKeyLo_EL1_ref) v) else
  if reg_name = (''APIAKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APIAKeyHi_EL1_ref) v s) ((of_regval   APIAKeyHi_EL1_ref) v) else
  if reg_name = (''APIAKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APIAKeyLo_EL1_ref) v s) ((of_regval   APIAKeyLo_EL1_ref) v) else
  if reg_name = (''APIBKeyHi_EL1'') then map_option (\<lambda> v . (write_to   APIBKeyHi_EL1_ref) v s) ((of_regval   APIBKeyHi_EL1_ref) v) else
  if reg_name = (''APIBKeyLo_EL1'') then map_option (\<lambda> v . (write_to   APIBKeyLo_EL1_ref) v s) ((of_regval   APIBKeyLo_EL1_ref) v) else
  if reg_name = (''BTypeCompatible'') then map_option (\<lambda> v . (write_to   BTypeCompatible_ref) v s) ((of_regval   BTypeCompatible_ref) v) else
  if reg_name = (''BTypeNext'') then map_option (\<lambda> v . (write_to   BTypeNext_ref) v s) ((of_regval   BTypeNext_ref) v) else
  if reg_name = (''CCSIDR2_EL1'') then map_option (\<lambda> v . (write_to   CCSIDR2_EL1_ref) v s) ((of_regval   CCSIDR2_EL1_ref) v) else
  if reg_name = (''CLIDR_EL1'') then map_option (\<lambda> v . (write_to   CLIDR_EL1_ref) v s) ((of_regval   CLIDR_EL1_ref) v) else
  if reg_name = (''CNTFRQ_EL0'') then map_option (\<lambda> v . (write_to   CNTFRQ_EL0_ref) v s) ((of_regval   CNTFRQ_EL0_ref) v) else
  if reg_name = (''CNTHPS_CTL_EL2'') then map_option (\<lambda> v . (write_to   CNTHPS_CTL_EL2_ref) v s) ((of_regval   CNTHPS_CTL_EL2_ref) v) else
  if reg_name = (''CNTHPS_CVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHPS_CVAL_EL2_ref) v s) ((of_regval   CNTHPS_CVAL_EL2_ref) v) else
  if reg_name = (''CNTHPS_TVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHPS_TVAL_EL2_ref) v s) ((of_regval   CNTHPS_TVAL_EL2_ref) v) else
  if reg_name = (''CNTHP_CTL_EL2'') then map_option (\<lambda> v . (write_to   CNTHP_CTL_EL2_ref) v s) ((of_regval   CNTHP_CTL_EL2_ref) v) else
  if reg_name = (''CNTHP_CVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHP_CVAL_EL2_ref) v s) ((of_regval   CNTHP_CVAL_EL2_ref) v) else
  if reg_name = (''CNTHP_TVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHP_TVAL_EL2_ref) v s) ((of_regval   CNTHP_TVAL_EL2_ref) v) else
  if reg_name = (''CNTHVS_CTL_EL2'') then map_option (\<lambda> v . (write_to   CNTHVS_CTL_EL2_ref) v s) ((of_regval   CNTHVS_CTL_EL2_ref) v) else
  if reg_name = (''CNTHVS_CVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHVS_CVAL_EL2_ref) v s) ((of_regval   CNTHVS_CVAL_EL2_ref) v) else
  if reg_name = (''CNTHVS_TVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHVS_TVAL_EL2_ref) v s) ((of_regval   CNTHVS_TVAL_EL2_ref) v) else
  if reg_name = (''CNTHV_CTL_EL2'') then map_option (\<lambda> v . (write_to   CNTHV_CTL_EL2_ref) v s) ((of_regval   CNTHV_CTL_EL2_ref) v) else
  if reg_name = (''CNTHV_CVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHV_CVAL_EL2_ref) v s) ((of_regval   CNTHV_CVAL_EL2_ref) v) else
  if reg_name = (''CNTHV_TVAL_EL2'') then map_option (\<lambda> v . (write_to   CNTHV_TVAL_EL2_ref) v s) ((of_regval   CNTHV_TVAL_EL2_ref) v) else
  if reg_name = (''CNTKCTL_EL1'') then map_option (\<lambda> v . (write_to   CNTKCTL_EL1_ref) v s) ((of_regval   CNTKCTL_EL1_ref) v) else
  if reg_name = (''CNTPCT_EL0'') then map_option (\<lambda> v . (write_to   CNTPCT_EL0_ref) v s) ((of_regval   CNTPCT_EL0_ref) v) else
  if reg_name = (''CNTPS_CTL_EL1'') then map_option (\<lambda> v . (write_to   CNTPS_CTL_EL1_ref) v s) ((of_regval   CNTPS_CTL_EL1_ref) v) else
  if reg_name = (''CNTPS_CVAL_EL1'') then map_option (\<lambda> v . (write_to   CNTPS_CVAL_EL1_ref) v s) ((of_regval   CNTPS_CVAL_EL1_ref) v) else
  if reg_name = (''CNTPS_TVAL_EL1'') then map_option (\<lambda> v . (write_to   CNTPS_TVAL_EL1_ref) v s) ((of_regval   CNTPS_TVAL_EL1_ref) v) else
  if reg_name = (''CNTP_CTL_EL0'') then map_option (\<lambda> v . (write_to   CNTP_CTL_EL0_ref) v s) ((of_regval   CNTP_CTL_EL0_ref) v) else
  if reg_name = (''CNTP_CTL_S'') then map_option (\<lambda> v . (write_to   CNTP_CTL_S_ref) v s) ((of_regval   CNTP_CTL_S_ref) v) else
  if reg_name = (''CNTP_CVAL_EL0'') then map_option (\<lambda> v . (write_to   CNTP_CVAL_EL0_ref) v s) ((of_regval   CNTP_CVAL_EL0_ref) v) else
  if reg_name = (''CNTP_TVAL_EL0'') then map_option (\<lambda> v . (write_to   CNTP_TVAL_EL0_ref) v s) ((of_regval   CNTP_TVAL_EL0_ref) v) else
  if reg_name = (''CNTVCT_EL0'') then map_option (\<lambda> v . (write_to   CNTVCT_EL0_ref) v s) ((of_regval   CNTVCT_EL0_ref) v) else
  if reg_name = (''CNTVOFF_EL2'') then map_option (\<lambda> v . (write_to   CNTVOFF_EL2_ref) v s) ((of_regval   CNTVOFF_EL2_ref) v) else
  if reg_name = (''CNTV_CTL_EL0'') then map_option (\<lambda> v . (write_to   CNTV_CTL_EL0_ref) v s) ((of_regval   CNTV_CTL_EL0_ref) v) else
  if reg_name = (''CNTV_CVAL_EL0'') then map_option (\<lambda> v . (write_to   CNTV_CVAL_EL0_ref) v s) ((of_regval   CNTV_CVAL_EL0_ref) v) else
  if reg_name = (''CNTV_TVAL_EL0'') then map_option (\<lambda> v . (write_to   CNTV_TVAL_EL0_ref) v s) ((of_regval   CNTV_TVAL_EL0_ref) v) else
  if reg_name = (''CPACR_EL1'') then map_option (\<lambda> v . (write_to   CPACR_EL1_ref) v s) ((of_regval   CPACR_EL1_ref) v) else
  if reg_name = (''CPTR_EL3'') then map_option (\<lambda> v . (write_to   CPTR_EL3_ref) v s) ((of_regval   CPTR_EL3_ref) v) else
  if reg_name = (''CSSELR_EL1'') then map_option (\<lambda> v . (write_to   CSSELR_EL1_ref) v s) ((of_regval   CSSELR_EL1_ref) v) else
  if reg_name = (''CSSELR_S'') then map_option (\<lambda> v . (write_to   CSSELR_S_ref) v s) ((of_regval   CSSELR_S_ref) v) else
  if reg_name = (''CTR_EL0'') then map_option (\<lambda> v . (write_to   CTR_EL0_ref) v s) ((of_regval   CTR_EL0_ref) v) else
  if reg_name = (''DBGAUTHSTATUS_EL1'') then map_option (\<lambda> v . (write_to   DBGAUTHSTATUS_EL1_ref) v s) ((of_regval   DBGAUTHSTATUS_EL1_ref) v) else
  if reg_name = (''DBGCLAIMCLR_EL1'') then map_option (\<lambda> v . (write_to   DBGCLAIMCLR_EL1_ref) v s) ((of_regval   DBGCLAIMCLR_EL1_ref) v) else
  if reg_name = (''DBGCLAIMSET_EL1'') then map_option (\<lambda> v . (write_to   DBGCLAIMSET_EL1_ref) v s) ((of_regval   DBGCLAIMSET_EL1_ref) v) else
  if reg_name = (''DBGDEVID1'') then map_option (\<lambda> v . (write_to   DBGDEVID1_ref) v s) ((of_regval   DBGDEVID1_ref) v) else
  if reg_name = (''DBGDEVID2'') then map_option (\<lambda> v . (write_to   DBGDEVID2_ref) v s) ((of_regval   DBGDEVID2_ref) v) else
  if reg_name = (''DBGDSCRint'') then map_option (\<lambda> v . (write_to   DBGDSCRint_ref) v s) ((of_regval   DBGDSCRint_ref) v) else
  if reg_name = (''DBGDTRRX_EL0'') then map_option (\<lambda> v . (write_to   DBGDTRRX_EL0_ref) v s) ((of_regval   DBGDTRRX_EL0_ref) v) else
  if reg_name = (''DBGDTRTX_EL0'') then map_option (\<lambda> v . (write_to   DBGDTRTX_EL0_ref) v s) ((of_regval   DBGDTRTX_EL0_ref) v) else
  if reg_name = (''DBGDTR_EL0'') then map_option (\<lambda> v . (write_to   DBGDTR_EL0_ref) v s) ((of_regval   DBGDTR_EL0_ref) v) else
  if reg_name = (''DBGWFAR'') then map_option (\<lambda> v . (write_to   DBGWFAR_ref) v s) ((of_regval   DBGWFAR_ref) v) else
  if reg_name = (''DCZID_EL0'') then map_option (\<lambda> v . (write_to   DCZID_EL0_ref) v s) ((of_regval   DCZID_EL0_ref) v) else
  if reg_name = (''DISR_EL1'') then map_option (\<lambda> v . (write_to   DISR_EL1_ref) v s) ((of_regval   DISR_EL1_ref) v) else
  if reg_name = (''EDECCR'') then map_option (\<lambda> v . (write_to   EDECCR_ref) v s) ((of_regval   EDECCR_ref) v) else
  if reg_name = (''EDECR'') then map_option (\<lambda> v . (write_to   EDECR_ref) v s) ((of_regval   EDECR_ref) v) else
  if reg_name = (''EDESR'') then map_option (\<lambda> v . (write_to   EDESR_ref) v s) ((of_regval   EDESR_ref) v) else
  if reg_name = (''EDLSR'') then map_option (\<lambda> v . (write_to   EDLSR_ref) v s) ((of_regval   EDLSR_ref) v) else
  if reg_name = (''EDPCSR'') then map_option (\<lambda> v . (write_to   EDPCSR_ref) v s) ((of_regval   EDPCSR_ref) v) else
  if reg_name = (''EDPFR'') then map_option (\<lambda> v . (write_to   EDPFR_ref) v s) ((of_regval   EDPFR_ref) v) else
  if reg_name = (''EDPRCR'') then map_option (\<lambda> v . (write_to   EDPRCR_ref) v s) ((of_regval   EDPRCR_ref) v) else
  if reg_name = (''EDPRSR'') then map_option (\<lambda> v . (write_to   EDPRSR_ref) v s) ((of_regval   EDPRSR_ref) v) else
  if reg_name = (''EDVIDSR'') then map_option (\<lambda> v . (write_to   EDVIDSR_ref) v s) ((of_regval   EDVIDSR_ref) v) else
  if reg_name = (''ELR_EL0'') then map_option (\<lambda> v . (write_to   ELR_EL0_ref) v s) ((of_regval   ELR_EL0_ref) v) else
  if reg_name = (''ESP_EL0'') then map_option (\<lambda> v . (write_to   ESP_EL0_ref) v s) ((of_regval   ESP_EL0_ref) v) else
  if reg_name = (''ESR_EL0'') then map_option (\<lambda> v . (write_to   ESR_EL0_ref) v s) ((of_regval   ESR_EL0_ref) v) else
  if reg_name = (''EventRegister'') then map_option (\<lambda> v . (write_to   EventRegister_ref) v s) ((of_regval   EventRegister_ref) v) else
  if reg_name = (''FAR_EL0'') then map_option (\<lambda> v . (write_to   FAR_EL0_ref) v s) ((of_regval   FAR_EL0_ref) v) else
  if reg_name = (''FCSEIDR'') then map_option (\<lambda> v . (write_to   FCSEIDR_ref) v s) ((of_regval   FCSEIDR_ref) v) else
  if reg_name = (''FPCR'') then map_option (\<lambda> v . (write_to   FPCR_ref) v s) ((of_regval   FPCR_ref) v) else
  if reg_name = (''FPEXC32_EL2'') then map_option (\<lambda> v . (write_to   FPEXC32_EL2_ref) v s) ((of_regval   FPEXC32_EL2_ref) v) else
  if reg_name = (''FPSCR'') then map_option (\<lambda> v . (write_to   FPSCR_ref) v s) ((of_regval   FPSCR_ref) v) else
  if reg_name = (''FPSID'') then map_option (\<lambda> v . (write_to   FPSID_ref) v s) ((of_regval   FPSID_ref) v) else
  if reg_name = (''FPSR'') then map_option (\<lambda> v . (write_to   FPSR_ref) v s) ((of_regval   FPSR_ref) v) else
  if reg_name = (''GCR_EL1'') then map_option (\<lambda> v . (write_to   GCR_EL1_ref) v s) ((of_regval   GCR_EL1_ref) v) else
  if reg_name = (''HACR_EL2'') then map_option (\<lambda> v . (write_to   HACR_EL2_ref) v s) ((of_regval   HACR_EL2_ref) v) else
  if reg_name = (''HSTR_EL2'') then map_option (\<lambda> v . (write_to   HSTR_EL2_ref) v s) ((of_regval   HSTR_EL2_ref) v) else
  if reg_name = (''ICC_AP0R_EL1'') then map_option (\<lambda> v . (write_to   ICC_AP0R_EL1_ref) v s) ((of_regval   ICC_AP0R_EL1_ref) v) else
  if reg_name = (''ICC_AP1R_EL1'') then map_option (\<lambda> v . (write_to   ICC_AP1R_EL1_ref) v s) ((of_regval   ICC_AP1R_EL1_ref) v) else
  if reg_name = (''ICC_ASGI1R_EL1'') then map_option (\<lambda> v . (write_to   ICC_ASGI1R_EL1_ref) v s) ((of_regval   ICC_ASGI1R_EL1_ref) v) else
  if reg_name = (''ICC_BPR0_EL1'') then map_option (\<lambda> v . (write_to   ICC_BPR0_EL1_ref) v s) ((of_regval   ICC_BPR0_EL1_ref) v) else
  if reg_name = (''ICC_BPR1_EL1_NS'') then map_option (\<lambda> v . (write_to   ICC_BPR1_EL1_NS_ref) v s) ((of_regval   ICC_BPR1_EL1_NS_ref) v) else
  if reg_name = (''ICC_BPR1_EL1_S'') then map_option (\<lambda> v . (write_to   ICC_BPR1_EL1_S_ref) v s) ((of_regval   ICC_BPR1_EL1_S_ref) v) else
  if reg_name = (''ICC_CTLR_EL1_NS'') then map_option (\<lambda> v . (write_to   ICC_CTLR_EL1_NS_ref) v s) ((of_regval   ICC_CTLR_EL1_NS_ref) v) else
  if reg_name = (''ICC_CTLR_EL1_S'') then map_option (\<lambda> v . (write_to   ICC_CTLR_EL1_S_ref) v s) ((of_regval   ICC_CTLR_EL1_S_ref) v) else
  if reg_name = (''ICC_CTLR_EL3'') then map_option (\<lambda> v . (write_to   ICC_CTLR_EL3_ref) v s) ((of_regval   ICC_CTLR_EL3_ref) v) else
  if reg_name = (''ICC_DIR_EL1'') then map_option (\<lambda> v . (write_to   ICC_DIR_EL1_ref) v s) ((of_regval   ICC_DIR_EL1_ref) v) else
  if reg_name = (''ICC_EOIR0_EL1'') then map_option (\<lambda> v . (write_to   ICC_EOIR0_EL1_ref) v s) ((of_regval   ICC_EOIR0_EL1_ref) v) else
  if reg_name = (''ICC_EOIR1_EL1'') then map_option (\<lambda> v . (write_to   ICC_EOIR1_EL1_ref) v s) ((of_regval   ICC_EOIR1_EL1_ref) v) else
  if reg_name = (''ICC_HPPIR0_EL1'') then map_option (\<lambda> v . (write_to   ICC_HPPIR0_EL1_ref) v s) ((of_regval   ICC_HPPIR0_EL1_ref) v) else
  if reg_name = (''ICC_HPPIR1_EL1'') then map_option (\<lambda> v . (write_to   ICC_HPPIR1_EL1_ref) v s) ((of_regval   ICC_HPPIR1_EL1_ref) v) else
  if reg_name = (''ICC_IAR0_EL1'') then map_option (\<lambda> v . (write_to   ICC_IAR0_EL1_ref) v s) ((of_regval   ICC_IAR0_EL1_ref) v) else
  if reg_name = (''ICC_IAR1_EL1'') then map_option (\<lambda> v . (write_to   ICC_IAR1_EL1_ref) v s) ((of_regval   ICC_IAR1_EL1_ref) v) else
  if reg_name = (''ICC_IGRPEN0_EL1'') then map_option (\<lambda> v . (write_to   ICC_IGRPEN0_EL1_ref) v s) ((of_regval   ICC_IGRPEN0_EL1_ref) v) else
  if reg_name = (''ICC_IGRPEN1_EL1_NS'') then map_option (\<lambda> v . (write_to   ICC_IGRPEN1_EL1_NS_ref) v s) ((of_regval   ICC_IGRPEN1_EL1_NS_ref) v) else
  if reg_name = (''ICC_IGRPEN1_EL1_S'') then map_option (\<lambda> v . (write_to   ICC_IGRPEN1_EL1_S_ref) v s) ((of_regval   ICC_IGRPEN1_EL1_S_ref) v) else
  if reg_name = (''ICC_IGRPEN1_EL3'') then map_option (\<lambda> v . (write_to   ICC_IGRPEN1_EL3_ref) v s) ((of_regval   ICC_IGRPEN1_EL3_ref) v) else
  if reg_name = (''ICC_PMR_EL1'') then map_option (\<lambda> v . (write_to   ICC_PMR_EL1_ref) v s) ((of_regval   ICC_PMR_EL1_ref) v) else
  if reg_name = (''ICC_RPR_EL1'') then map_option (\<lambda> v . (write_to   ICC_RPR_EL1_ref) v s) ((of_regval   ICC_RPR_EL1_ref) v) else
  if reg_name = (''ICC_SGI0R_EL1'') then map_option (\<lambda> v . (write_to   ICC_SGI0R_EL1_ref) v s) ((of_regval   ICC_SGI0R_EL1_ref) v) else
  if reg_name = (''ICC_SGI1R_EL1'') then map_option (\<lambda> v . (write_to   ICC_SGI1R_EL1_ref) v s) ((of_regval   ICC_SGI1R_EL1_ref) v) else
  if reg_name = (''ICC_SRE_EL1_NS'') then map_option (\<lambda> v . (write_to   ICC_SRE_EL1_NS_ref) v s) ((of_regval   ICC_SRE_EL1_NS_ref) v) else
  if reg_name = (''ICC_SRE_EL1_S'') then map_option (\<lambda> v . (write_to   ICC_SRE_EL1_S_ref) v s) ((of_regval   ICC_SRE_EL1_S_ref) v) else
  if reg_name = (''ICC_SRE_EL2'') then map_option (\<lambda> v . (write_to   ICC_SRE_EL2_ref) v s) ((of_regval   ICC_SRE_EL2_ref) v) else
  if reg_name = (''ICC_SRE_EL3'') then map_option (\<lambda> v . (write_to   ICC_SRE_EL3_ref) v s) ((of_regval   ICC_SRE_EL3_ref) v) else
  if reg_name = (''ICH_AP0R_EL2'') then map_option (\<lambda> v . (write_to   ICH_AP0R_EL2_ref) v s) ((of_regval   ICH_AP0R_EL2_ref) v) else
  if reg_name = (''ICH_AP1R_EL2'') then map_option (\<lambda> v . (write_to   ICH_AP1R_EL2_ref) v s) ((of_regval   ICH_AP1R_EL2_ref) v) else
  if reg_name = (''ICH_EISR_EL2'') then map_option (\<lambda> v . (write_to   ICH_EISR_EL2_ref) v s) ((of_regval   ICH_EISR_EL2_ref) v) else
  if reg_name = (''ICH_ELRSR_EL2'') then map_option (\<lambda> v . (write_to   ICH_ELRSR_EL2_ref) v s) ((of_regval   ICH_ELRSR_EL2_ref) v) else
  if reg_name = (''ICH_HCR_EL2'') then map_option (\<lambda> v . (write_to   ICH_HCR_EL2_ref) v s) ((of_regval   ICH_HCR_EL2_ref) v) else
  if reg_name = (''ICH_MISR_EL2'') then map_option (\<lambda> v . (write_to   ICH_MISR_EL2_ref) v s) ((of_regval   ICH_MISR_EL2_ref) v) else
  if reg_name = (''ICH_VMCR_EL2'') then map_option (\<lambda> v . (write_to   ICH_VMCR_EL2_ref) v s) ((of_regval   ICH_VMCR_EL2_ref) v) else
  if reg_name = (''ICH_VTR_EL2'') then map_option (\<lambda> v . (write_to   ICH_VTR_EL2_ref) v s) ((of_regval   ICH_VTR_EL2_ref) v) else
  if reg_name = (''ICV_AP0R_EL1'') then map_option (\<lambda> v . (write_to   ICV_AP0R_EL1_ref) v s) ((of_regval   ICV_AP0R_EL1_ref) v) else
  if reg_name = (''ICV_AP1R_EL1'') then map_option (\<lambda> v . (write_to   ICV_AP1R_EL1_ref) v s) ((of_regval   ICV_AP1R_EL1_ref) v) else
  if reg_name = (''ICV_BPR0_EL1'') then map_option (\<lambda> v . (write_to   ICV_BPR0_EL1_ref) v s) ((of_regval   ICV_BPR0_EL1_ref) v) else
  if reg_name = (''ICV_BPR1_EL1'') then map_option (\<lambda> v . (write_to   ICV_BPR1_EL1_ref) v s) ((of_regval   ICV_BPR1_EL1_ref) v) else
  if reg_name = (''ICV_CTLR_EL1'') then map_option (\<lambda> v . (write_to   ICV_CTLR_EL1_ref) v s) ((of_regval   ICV_CTLR_EL1_ref) v) else
  if reg_name = (''ICV_DIR_EL1'') then map_option (\<lambda> v . (write_to   ICV_DIR_EL1_ref) v s) ((of_regval   ICV_DIR_EL1_ref) v) else
  if reg_name = (''ICV_EOIR0_EL1'') then map_option (\<lambda> v . (write_to   ICV_EOIR0_EL1_ref) v s) ((of_regval   ICV_EOIR0_EL1_ref) v) else
  if reg_name = (''ICV_EOIR1_EL1'') then map_option (\<lambda> v . (write_to   ICV_EOIR1_EL1_ref) v s) ((of_regval   ICV_EOIR1_EL1_ref) v) else
  if reg_name = (''ICV_HPPIR0_EL1'') then map_option (\<lambda> v . (write_to   ICV_HPPIR0_EL1_ref) v s) ((of_regval   ICV_HPPIR0_EL1_ref) v) else
  if reg_name = (''ICV_HPPIR1_EL1'') then map_option (\<lambda> v . (write_to   ICV_HPPIR1_EL1_ref) v s) ((of_regval   ICV_HPPIR1_EL1_ref) v) else
  if reg_name = (''ICV_IAR0_EL1'') then map_option (\<lambda> v . (write_to   ICV_IAR0_EL1_ref) v s) ((of_regval   ICV_IAR0_EL1_ref) v) else
  if reg_name = (''ICV_IAR1_EL1'') then map_option (\<lambda> v . (write_to   ICV_IAR1_EL1_ref) v s) ((of_regval   ICV_IAR1_EL1_ref) v) else
  if reg_name = (''ICV_IGRPEN0_EL1'') then map_option (\<lambda> v . (write_to   ICV_IGRPEN0_EL1_ref) v s) ((of_regval   ICV_IGRPEN0_EL1_ref) v) else
  if reg_name = (''ICV_IGRPEN1_EL1'') then map_option (\<lambda> v . (write_to   ICV_IGRPEN1_EL1_ref) v s) ((of_regval   ICV_IGRPEN1_EL1_ref) v) else
  if reg_name = (''ICV_PMR_EL1'') then map_option (\<lambda> v . (write_to   ICV_PMR_EL1_ref) v s) ((of_regval   ICV_PMR_EL1_ref) v) else
  if reg_name = (''ICV_RPR_EL1'') then map_option (\<lambda> v . (write_to   ICV_RPR_EL1_ref) v s) ((of_regval   ICV_RPR_EL1_ref) v) else
  if reg_name = (''ID_AA64AFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64AFR0_EL1_ref) v s) ((of_regval   ID_AA64AFR0_EL1_ref) v) else
  if reg_name = (''ID_AA64AFR1_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64AFR1_EL1_ref) v s) ((of_regval   ID_AA64AFR1_EL1_ref) v) else
  if reg_name = (''ID_AA64DFR1_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64DFR1_EL1_ref) v s) ((of_regval   ID_AA64DFR1_EL1_ref) v) else
  if reg_name = (''ID_AA64ISAR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64ISAR0_EL1_ref) v s) ((of_regval   ID_AA64ISAR0_EL1_ref) v) else
  if reg_name = (''ID_AA64ISAR1_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64ISAR1_EL1_ref) v s) ((of_regval   ID_AA64ISAR1_EL1_ref) v) else
  if reg_name = (''ID_AA64MMFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64MMFR0_EL1_ref) v s) ((of_regval   ID_AA64MMFR0_EL1_ref) v) else
  if reg_name = (''ID_AA64MMFR1_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64MMFR1_EL1_ref) v s) ((of_regval   ID_AA64MMFR1_EL1_ref) v) else
  if reg_name = (''ID_AA64MMFR2_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64MMFR2_EL1_ref) v s) ((of_regval   ID_AA64MMFR2_EL1_ref) v) else
  if reg_name = (''ID_AA64PFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64PFR0_EL1_ref) v s) ((of_regval   ID_AA64PFR0_EL1_ref) v) else
  if reg_name = (''ID_AA64PFR1_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64PFR1_EL1_ref) v s) ((of_regval   ID_AA64PFR1_EL1_ref) v) else
  if reg_name = (''ID_AFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AFR0_EL1_ref) v s) ((of_regval   ID_AFR0_EL1_ref) v) else
  if reg_name = (''ID_DFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_DFR0_EL1_ref) v s) ((of_regval   ID_DFR0_EL1_ref) v) else
  if reg_name = (''ID_ISAR0_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR0_EL1_ref) v s) ((of_regval   ID_ISAR0_EL1_ref) v) else
  if reg_name = (''ID_ISAR1_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR1_EL1_ref) v s) ((of_regval   ID_ISAR1_EL1_ref) v) else
  if reg_name = (''ID_ISAR2_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR2_EL1_ref) v s) ((of_regval   ID_ISAR2_EL1_ref) v) else
  if reg_name = (''ID_ISAR3_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR3_EL1_ref) v s) ((of_regval   ID_ISAR3_EL1_ref) v) else
  if reg_name = (''ID_ISAR4_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR4_EL1_ref) v s) ((of_regval   ID_ISAR4_EL1_ref) v) else
  if reg_name = (''ID_ISAR5_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR5_EL1_ref) v s) ((of_regval   ID_ISAR5_EL1_ref) v) else
  if reg_name = (''ID_ISAR6_EL1'') then map_option (\<lambda> v . (write_to   ID_ISAR6_EL1_ref) v s) ((of_regval   ID_ISAR6_EL1_ref) v) else
  if reg_name = (''ID_MMFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_MMFR0_EL1_ref) v s) ((of_regval   ID_MMFR0_EL1_ref) v) else
  if reg_name = (''ID_MMFR1_EL1'') then map_option (\<lambda> v . (write_to   ID_MMFR1_EL1_ref) v s) ((of_regval   ID_MMFR1_EL1_ref) v) else
  if reg_name = (''ID_MMFR2_EL1'') then map_option (\<lambda> v . (write_to   ID_MMFR2_EL1_ref) v s) ((of_regval   ID_MMFR2_EL1_ref) v) else
  if reg_name = (''ID_MMFR3_EL1'') then map_option (\<lambda> v . (write_to   ID_MMFR3_EL1_ref) v s) ((of_regval   ID_MMFR3_EL1_ref) v) else
  if reg_name = (''ID_MMFR4_EL1'') then map_option (\<lambda> v . (write_to   ID_MMFR4_EL1_ref) v s) ((of_regval   ID_MMFR4_EL1_ref) v) else
  if reg_name = (''ID_PFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_PFR0_EL1_ref) v s) ((of_regval   ID_PFR0_EL1_ref) v) else
  if reg_name = (''ID_PFR1_EL1'') then map_option (\<lambda> v . (write_to   ID_PFR1_EL1_ref) v s) ((of_regval   ID_PFR1_EL1_ref) v) else
  if reg_name = (''ID_PFR2_EL1'') then map_option (\<lambda> v . (write_to   ID_PFR2_EL1_ref) v s) ((of_regval   ID_PFR2_EL1_ref) v) else
  if reg_name = (''ISR_EL1'') then map_option (\<lambda> v . (write_to   ISR_EL1_ref) v s) ((of_regval   ISR_EL1_ref) v) else
  if reg_name = (''LORC_EL1'') then map_option (\<lambda> v . (write_to   LORC_EL1_ref) v s) ((of_regval   LORC_EL1_ref) v) else
  if reg_name = (''LOREA_EL1'') then map_option (\<lambda> v . (write_to   LOREA_EL1_ref) v s) ((of_regval   LOREA_EL1_ref) v) else
  if reg_name = (''LORID_EL1'') then map_option (\<lambda> v . (write_to   LORID_EL1_ref) v s) ((of_regval   LORID_EL1_ref) v) else
  if reg_name = (''LORN_EL1'') then map_option (\<lambda> v . (write_to   LORN_EL1_ref) v s) ((of_regval   LORN_EL1_ref) v) else
  if reg_name = (''LORSA_EL1'') then map_option (\<lambda> v . (write_to   LORSA_EL1_ref) v s) ((of_regval   LORSA_EL1_ref) v) else
  if reg_name = (''MDCCINT_EL1'') then map_option (\<lambda> v . (write_to   MDCCINT_EL1_ref) v s) ((of_regval   MDCCINT_EL1_ref) v) else
  if reg_name = (''MDCCSR_EL0'') then map_option (\<lambda> v . (write_to   MDCCSR_EL0_ref) v s) ((of_regval   MDCCSR_EL0_ref) v) else
  if reg_name = (''MDRAR_EL1'') then map_option (\<lambda> v . (write_to   MDRAR_EL1_ref) v s) ((of_regval   MDRAR_EL1_ref) v) else
  if reg_name = (''MIDR_EL1'') then map_option (\<lambda> v . (write_to   MIDR_EL1_ref) v s) ((of_regval   MIDR_EL1_ref) v) else
  if reg_name = (''MVFR0_EL1'') then map_option (\<lambda> v . (write_to   MVFR0_EL1_ref) v s) ((of_regval   MVFR0_EL1_ref) v) else
  if reg_name = (''MVFR1_EL1'') then map_option (\<lambda> v . (write_to   MVFR1_EL1_ref) v s) ((of_regval   MVFR1_EL1_ref) v) else
  if reg_name = (''MVFR2_EL1'') then map_option (\<lambda> v . (write_to   MVFR2_EL1_ref) v s) ((of_regval   MVFR2_EL1_ref) v) else
  if reg_name = (''NSACR'') then map_option (\<lambda> v . (write_to   NSACR_ref) v s) ((of_regval   NSACR_ref) v) else
  if reg_name = (''OSDTRRX_EL1'') then map_option (\<lambda> v . (write_to   OSDTRRX_EL1_ref) v s) ((of_regval   OSDTRRX_EL1_ref) v) else
  if reg_name = (''OSDTRTX_EL1'') then map_option (\<lambda> v . (write_to   OSDTRTX_EL1_ref) v s) ((of_regval   OSDTRTX_EL1_ref) v) else
  if reg_name = (''OSECCR_EL1'') then map_option (\<lambda> v . (write_to   OSECCR_EL1_ref) v s) ((of_regval   OSECCR_EL1_ref) v) else
  if reg_name = (''OSLAR_EL1'') then map_option (\<lambda> v . (write_to   OSLAR_EL1_ref) v s) ((of_regval   OSLAR_EL1_ref) v) else
  if reg_name = (''PAR_EL1'') then map_option (\<lambda> v . (write_to   PAR_EL1_ref) v s) ((of_regval   PAR_EL1_ref) v) else
  if reg_name = (''PAR_S'') then map_option (\<lambda> v . (write_to   PAR_S_ref) v s) ((of_regval   PAR_S_ref) v) else
  if reg_name = (''PMCCFILTR_EL0'') then map_option (\<lambda> v . (write_to   PMCCFILTR_EL0_ref) v s) ((of_regval   PMCCFILTR_EL0_ref) v) else
  if reg_name = (''PMCCNTR_EL0'') then map_option (\<lambda> v . (write_to   PMCCNTR_EL0_ref) v s) ((of_regval   PMCCNTR_EL0_ref) v) else
  if reg_name = (''PMCEID0_EL0'') then map_option (\<lambda> v . (write_to   PMCEID0_EL0_ref) v s) ((of_regval   PMCEID0_EL0_ref) v) else
  if reg_name = (''PMCEID1_EL0'') then map_option (\<lambda> v . (write_to   PMCEID1_EL0_ref) v s) ((of_regval   PMCEID1_EL0_ref) v) else
  if reg_name = (''PMCNTENCLR_EL0'') then map_option (\<lambda> v . (write_to   PMCNTENCLR_EL0_ref) v s) ((of_regval   PMCNTENCLR_EL0_ref) v) else
  if reg_name = (''PMCNTENSET_EL0'') then map_option (\<lambda> v . (write_to   PMCNTENSET_EL0_ref) v s) ((of_regval   PMCNTENSET_EL0_ref) v) else
  if reg_name = (''PMCR_EL0'') then map_option (\<lambda> v . (write_to   PMCR_EL0_ref) v s) ((of_regval   PMCR_EL0_ref) v) else
  if reg_name = (''PMEVCNTR_EL0'') then map_option (\<lambda> v . (write_to   PMEVCNTR_EL0_ref) v s) ((of_regval   PMEVCNTR_EL0_ref) v) else
  if reg_name = (''PMEVTYPER_EL0'') then map_option (\<lambda> v . (write_to   PMEVTYPER_EL0_ref) v s) ((of_regval   PMEVTYPER_EL0_ref) v) else
  if reg_name = (''PMINTENCLR_EL1'') then map_option (\<lambda> v . (write_to   PMINTENCLR_EL1_ref) v s) ((of_regval   PMINTENCLR_EL1_ref) v) else
  if reg_name = (''PMINTENSET_EL1'') then map_option (\<lambda> v . (write_to   PMINTENSET_EL1_ref) v s) ((of_regval   PMINTENSET_EL1_ref) v) else
  if reg_name = (''PMLSR'') then map_option (\<lambda> v . (write_to   PMLSR_ref) v s) ((of_regval   PMLSR_ref) v) else
  if reg_name = (''PMMIR'') then map_option (\<lambda> v . (write_to   PMMIR_ref) v s) ((of_regval   PMMIR_ref) v) else
  if reg_name = (''PMMIR_EL1'') then map_option (\<lambda> v . (write_to   PMMIR_EL1_ref) v s) ((of_regval   PMMIR_EL1_ref) v) else
  if reg_name = (''PMOVSCLR_EL0'') then map_option (\<lambda> v . (write_to   PMOVSCLR_EL0_ref) v s) ((of_regval   PMOVSCLR_EL0_ref) v) else
  if reg_name = (''PMOVSSET_EL0'') then map_option (\<lambda> v . (write_to   PMOVSSET_EL0_ref) v s) ((of_regval   PMOVSSET_EL0_ref) v) else
  if reg_name = (''PMPCSR'') then map_option (\<lambda> v . (write_to   PMPCSR_ref) v s) ((of_regval   PMPCSR_ref) v) else
  if reg_name = (''PMSELR_EL0'') then map_option (\<lambda> v . (write_to   PMSELR_EL0_ref) v s) ((of_regval   PMSELR_EL0_ref) v) else
  if reg_name = (''PMSWINC_EL0'') then map_option (\<lambda> v . (write_to   PMSWINC_EL0_ref) v s) ((of_regval   PMSWINC_EL0_ref) v) else
  if reg_name = (''PMUSERENR_EL0'') then map_option (\<lambda> v . (write_to   PMUSERENR_EL0_ref) v s) ((of_regval   PMUSERENR_EL0_ref) v) else
  if reg_name = (''PMVIDSR'') then map_option (\<lambda> v . (write_to   PMVIDSR_ref) v s) ((of_regval   PMVIDSR_ref) v) else
  if reg_name = (''PMXEVCNTR_EL0'') then map_option (\<lambda> v . (write_to   PMXEVCNTR_EL0_ref) v s) ((of_regval   PMXEVCNTR_EL0_ref) v) else
  if reg_name = (''PMXEVTYPER_EL0'') then map_option (\<lambda> v . (write_to   PMXEVTYPER_EL0_ref) v s) ((of_regval   PMXEVTYPER_EL0_ref) v) else
  if reg_name = (''RC'') then map_option (\<lambda> v . (write_to   RC_ref) v s) ((of_regval   RC_ref) v) else
  if reg_name = (''RD_EL0'') then map_option (\<lambda> v . (write_to   RD_EL0_ref) v s) ((of_regval   RD_EL0_ref) v) else
  if reg_name = (''REVIDR_EL1'') then map_option (\<lambda> v . (write_to   REVIDR_EL1_ref) v s) ((of_regval   REVIDR_EL1_ref) v) else
  if reg_name = (''RGSR_EL1'') then map_option (\<lambda> v . (write_to   RGSR_EL1_ref) v s) ((of_regval   RGSR_EL1_ref) v) else
  if reg_name = (''RMR_EL1'') then map_option (\<lambda> v . (write_to   RMR_EL1_ref) v s) ((of_regval   RMR_EL1_ref) v) else
  if reg_name = (''RMR_EL2'') then map_option (\<lambda> v . (write_to   RMR_EL2_ref) v s) ((of_regval   RMR_EL2_ref) v) else
  if reg_name = (''RMR_EL3'') then map_option (\<lambda> v . (write_to   RMR_EL3_ref) v s) ((of_regval   RMR_EL3_ref) v) else
  if reg_name = (''RMUID_EL0'') then map_option (\<lambda> v . (write_to   RMUID_EL0_ref) v s) ((of_regval   RMUID_EL0_ref) v) else
  if reg_name = (''RNDR'') then map_option (\<lambda> v . (write_to   RNDR_ref) v s) ((of_regval   RNDR_ref) v) else
  if reg_name = (''RNDRRS'') then map_option (\<lambda> v . (write_to   RNDRRS_ref) v s) ((of_regval   RNDRRS_ref) v) else
  if reg_name = (''RVBAR'') then map_option (\<lambda> v . (write_to   RVBAR_ref) v s) ((of_regval   RVBAR_ref) v) else
  if reg_name = (''RVBAR_EL1'') then map_option (\<lambda> v . (write_to   RVBAR_EL1_ref) v s) ((of_regval   RVBAR_EL1_ref) v) else
  if reg_name = (''RVBAR_EL2'') then map_option (\<lambda> v . (write_to   RVBAR_EL2_ref) v s) ((of_regval   RVBAR_EL2_ref) v) else
  if reg_name = (''RVBAR_EL3'') then map_option (\<lambda> v . (write_to   RVBAR_EL3_ref) v s) ((of_regval   RVBAR_EL3_ref) v) else
  if reg_name = (''SCXTNUM_EL0'') then map_option (\<lambda> v . (write_to   SCXTNUM_EL0_ref) v s) ((of_regval   SCXTNUM_EL0_ref) v) else
  if reg_name = (''SCXTNUM_EL1'') then map_option (\<lambda> v . (write_to   SCXTNUM_EL1_ref) v s) ((of_regval   SCXTNUM_EL1_ref) v) else
  if reg_name = (''SCXTNUM_EL2'') then map_option (\<lambda> v . (write_to   SCXTNUM_EL2_ref) v s) ((of_regval   SCXTNUM_EL2_ref) v) else
  if reg_name = (''SCXTNUM_EL3'') then map_option (\<lambda> v . (write_to   SCXTNUM_EL3_ref) v s) ((of_regval   SCXTNUM_EL3_ref) v) else
  if reg_name = (''SDER32_EL2'') then map_option (\<lambda> v . (write_to   SDER32_EL2_ref) v s) ((of_regval   SDER32_EL2_ref) v) else
  if reg_name = (''SPSR_EL0'') then map_option (\<lambda> v . (write_to   SPSR_EL0_ref) v s) ((of_regval   SPSR_EL0_ref) v) else
  if reg_name = (''SP_EL0'') then map_option (\<lambda> v . (write_to   SP_EL0_ref) v s) ((of_regval   SP_EL0_ref) v) else
  if reg_name = (''SP_EL1'') then map_option (\<lambda> v . (write_to   SP_EL1_ref) v s) ((of_regval   SP_EL1_ref) v) else
  if reg_name = (''SP_EL2'') then map_option (\<lambda> v . (write_to   SP_EL2_ref) v s) ((of_regval   SP_EL2_ref) v) else
  if reg_name = (''SP_EL3'') then map_option (\<lambda> v . (write_to   SP_EL3_ref) v s) ((of_regval   SP_EL3_ref) v) else
  if reg_name = (''ShouldAdvanceIT'') then map_option (\<lambda> v . (write_to   ShouldAdvanceIT_ref) v s) ((of_regval   ShouldAdvanceIT_ref) v) else
  if reg_name = (''TLBTR'') then map_option (\<lambda> v . (write_to   TLBTR_ref) v s) ((of_regval   TLBTR_ref) v) else
  if reg_name = (''TPIDRRO_EL0'') then map_option (\<lambda> v . (write_to   TPIDRRO_EL0_ref) v s) ((of_regval   TPIDRRO_EL0_ref) v) else
  if reg_name = (''TPIDR_EL0'') then map_option (\<lambda> v . (write_to   TPIDR_EL0_ref) v s) ((of_regval   TPIDR_EL0_ref) v) else
  if reg_name = (''TPIDR_EL1'') then map_option (\<lambda> v . (write_to   TPIDR_EL1_ref) v s) ((of_regval   TPIDR_EL1_ref) v) else
  if reg_name = (''TPIDR_EL2'') then map_option (\<lambda> v . (write_to   TPIDR_EL2_ref) v s) ((of_regval   TPIDR_EL2_ref) v) else
  if reg_name = (''TPIDR_EL3'') then map_option (\<lambda> v . (write_to   TPIDR_EL3_ref) v s) ((of_regval   TPIDR_EL3_ref) v) else
  if reg_name = (''TRFCR_EL1'') then map_option (\<lambda> v . (write_to   TRFCR_EL1_ref) v s) ((of_regval   TRFCR_EL1_ref) v) else
  if reg_name = (''TRFCR_EL2'') then map_option (\<lambda> v . (write_to   TRFCR_EL2_ref) v s) ((of_regval   TRFCR_EL2_ref) v) else
  if reg_name = (''VBAR_EL0'') then map_option (\<lambda> v . (write_to   VBAR_EL0_ref) v s) ((of_regval   VBAR_EL0_ref) v) else
  if reg_name = (''VDISR_EL2'') then map_option (\<lambda> v . (write_to   VDISR_EL2_ref) v s) ((of_regval   VDISR_EL2_ref) v) else
  if reg_name = (''VMPIDR_EL2'') then map_option (\<lambda> v . (write_to   VMPIDR_EL2_ref) v s) ((of_regval   VMPIDR_EL2_ref) v) else
  if reg_name = (''VNCR_EL2'') then map_option (\<lambda> v . (write_to   VNCR_EL2_ref) v s) ((of_regval   VNCR_EL2_ref) v) else
  if reg_name = (''VPIDR_EL2'') then map_option (\<lambda> v . (write_to   VPIDR_EL2_ref) v s) ((of_regval   VPIDR_EL2_ref) v) else
  if reg_name = (''_V'') then map_option (\<lambda> v . (write_to   V_ref) v s) ((of_regval   V_ref) v) else
  if reg_name = (''__currentCond'') then map_option (\<lambda> v . (write_to   currentCond_ref) v s) ((of_regval   currentCond_ref) v) else
  if reg_name = (''__exclusive_block_address'') then map_option (\<lambda> v . (write_to   exclusive_block_address_ref) v s) ((of_regval   exclusive_block_address_ref) v) else
  if reg_name = (''__saved_exception_level'') then map_option (\<lambda> v . (write_to   saved_exception_level_ref) v s) ((of_regval   saved_exception_level_ref) v) else
  if reg_name = (''__unconditional'') then map_option (\<lambda> v . (write_to   unconditional_ref) v s) ((of_regval   unconditional_ref) v) else
  if reg_name = (''CONTEXTIDR_S'') then map_option (\<lambda> v . (write_to   CONTEXTIDR_S_ref) v s) ((of_regval   CONTEXTIDR_S_ref) v) else
  if reg_name = (''_GTEExtObsAccess'') then map_option (\<lambda> v . (write_to   GTEExtObsAccess_ref) v s) ((of_regval   GTEExtObsAccess_ref) v) else
  if reg_name = (''_GTEExtObsAddress'') then map_option (\<lambda> v . (write_to   GTEExtObsAddress_ref) v s) ((of_regval   GTEExtObsAddress_ref) v) else
  if reg_name = (''_GTEExtObsData'') then map_option (\<lambda> v . (write_to   GTEExtObsData_ref) v s) ((of_regval   GTEExtObsData_ref) v) else
  if reg_name = (''_GTEExtObsResult'') then map_option (\<lambda> v . (write_to   GTEExtObsResult_ref) v s) ((of_regval   GTEExtObsResult_ref) v) else
  if reg_name = (''_GTEExtObsActive'') then map_option (\<lambda> v . (write_to   GTEExtObsActive_ref) v s) ((of_regval   GTEExtObsActive_ref) v) else
  if reg_name = (''_GTEExtObsCount'') then map_option (\<lambda> v . (write_to   GTEExtObsCount_ref) v s) ((of_regval   GTEExtObsCount_ref) v) else
  if reg_name = (''_GTEExtObsIndex'') then map_option (\<lambda> v . (write_to   GTEExtObsIndex_ref) v s) ((of_regval   GTEExtObsIndex_ref) v) else
  if reg_name = (''_GTEExtObsResultIndex'') then map_option (\<lambda> v . (write_to   GTEExtObsResultIndex_ref) v s) ((of_regval   GTEExtObsResultIndex_ref) v) else
  if reg_name = (''_GTEExtObsResultIsAddress'') then map_option (\<lambda> v . (write_to   GTEExtObsResultIsAddress_ref) v s) ((of_regval   GTEExtObsResultIsAddress_ref) v) else
  if reg_name = (''_GTEListParam0'') then map_option (\<lambda> v . (write_to   GTEListParam0_ref) v s) ((of_regval   GTEListParam0_ref) v) else
  if reg_name = (''_GTEListParam1'') then map_option (\<lambda> v . (write_to   GTEListParam1_ref) v s) ((of_regval   GTEListParam1_ref) v) else
  if reg_name = (''_GTEParam'') then map_option (\<lambda> v . (write_to   GTEParam_ref) v s) ((of_regval   GTEParam_ref) v) else
  if reg_name = (''_GTE_AS_RecordedAccess'') then map_option (\<lambda> v . (write_to   GTE_AS_RecordedAccess_ref) v s) ((of_regval   GTE_AS_RecordedAccess_ref) v) else
  if reg_name = (''_GTE_AS_RecordedAddress'') then map_option (\<lambda> v . (write_to   GTE_AS_RecordedAddress_ref) v s) ((of_regval   GTE_AS_RecordedAddress_ref) v) else
  if reg_name = (''_GTE_AS_RecordedData'') then map_option (\<lambda> v . (write_to   GTE_AS_RecordedData_ref) v s) ((of_regval   GTE_AS_RecordedData_ref) v) else
  if reg_name = (''_GTE_PPU_Access'') then map_option (\<lambda> v . (write_to   GTE_PPU_Access_ref) v s) ((of_regval   GTE_PPU_Access_ref) v) else
  if reg_name = (''_GTE_PPU_Address'') then map_option (\<lambda> v . (write_to   GTE_PPU_Address_ref) v s) ((of_regval   GTE_PPU_Address_ref) v) else
  if reg_name = (''_GTE_PPU_SizeEn'') then map_option (\<lambda> v . (write_to   GTE_PPU_SizeEn_ref) v s) ((of_regval   GTE_PPU_SizeEn_ref) v) else
  if reg_name = (''AbortRgn64Hi1'') then map_option (\<lambda> v . (write_to   AbortRgn64Hi1_ref) v s) ((of_regval   AbortRgn64Hi1_ref) v) else
  if reg_name = (''AbortRgn64Hi1_Hi'') then map_option (\<lambda> v . (write_to   AbortRgn64Hi1_Hi_ref) v s) ((of_regval   AbortRgn64Hi1_Hi_ref) v) else
  if reg_name = (''AbortRgn64Hi2'') then map_option (\<lambda> v . (write_to   AbortRgn64Hi2_ref) v s) ((of_regval   AbortRgn64Hi2_ref) v) else
  if reg_name = (''AbortRgn64Hi2_Hi'') then map_option (\<lambda> v . (write_to   AbortRgn64Hi2_Hi_ref) v s) ((of_regval   AbortRgn64Hi2_Hi_ref) v) else
  if reg_name = (''AbortRgn64Lo1'') then map_option (\<lambda> v . (write_to   AbortRgn64Lo1_ref) v s) ((of_regval   AbortRgn64Lo1_ref) v) else
  if reg_name = (''AbortRgn64Lo1_Hi'') then map_option (\<lambda> v . (write_to   AbortRgn64Lo1_Hi_ref) v s) ((of_regval   AbortRgn64Lo1_Hi_ref) v) else
  if reg_name = (''AbortRgn64Lo2'') then map_option (\<lambda> v . (write_to   AbortRgn64Lo2_ref) v s) ((of_regval   AbortRgn64Lo2_ref) v) else
  if reg_name = (''AbortRgn64Lo2_Hi'') then map_option (\<lambda> v . (write_to   AbortRgn64Lo2_Hi_ref) v s) ((of_regval   AbortRgn64Lo2_Hi_ref) v) else
  if reg_name = (''CNTCR'') then map_option (\<lambda> v . (write_to   CNTCR_ref) v s) ((of_regval   CNTCR_ref) v) else
  if reg_name = (''CNTCV'') then map_option (\<lambda> v . (write_to   CNTCV_ref) v s) ((of_regval   CNTCV_ref) v) else
  if reg_name = (''CNTFID0'') then map_option (\<lambda> v . (write_to   CNTFID0_ref) v s) ((of_regval   CNTFID0_ref) v) else
  if reg_name = (''CNTSR'') then map_option (\<lambda> v . (write_to   CNTSR_ref) v s) ((of_regval   CNTSR_ref) v) else
  if reg_name = (''CONTEXTIDR_EL1'') then map_option (\<lambda> v . (write_to   CONTEXTIDR_EL1_ref) v s) ((of_regval   CONTEXTIDR_EL1_ref) v) else
  if reg_name = (''CONTEXTIDR_EL2'') then map_option (\<lambda> v . (write_to   CONTEXTIDR_EL2_ref) v s) ((of_regval   CONTEXTIDR_EL2_ref) v) else
  if reg_name = (''DACR32_EL2'') then map_option (\<lambda> v . (write_to   DACR32_EL2_ref) v s) ((of_regval   DACR32_EL2_ref) v) else
  if reg_name = (''DACR_S'') then map_option (\<lambda> v . (write_to   DACR_S_ref) v s) ((of_regval   DACR_S_ref) v) else
  if reg_name = (''DBGBCR'') then map_option (\<lambda> v . (write_to   DBGBCR_ref) v s) ((of_regval   DBGBCR_ref) v) else
  if reg_name = (''DBGBCR_EL1'') then map_option (\<lambda> v . (write_to   DBGBCR_EL1_ref) v s) ((of_regval   DBGBCR_EL1_ref) v) else
  if reg_name = (''DBGBVR'') then map_option (\<lambda> v . (write_to   DBGBVR_ref) v s) ((of_regval   DBGBVR_ref) v) else
  if reg_name = (''DBGBVR_EL1'') then map_option (\<lambda> v . (write_to   DBGBVR_EL1_ref) v s) ((of_regval   DBGBVR_EL1_ref) v) else
  if reg_name = (''DBGBXVR'') then map_option (\<lambda> v . (write_to   DBGBXVR_ref) v s) ((of_regval   DBGBXVR_ref) v) else
  if reg_name = (''DBGDIDR'') then map_option (\<lambda> v . (write_to   DBGDIDR_ref) v s) ((of_regval   DBGDIDR_ref) v) else
  if reg_name = (''DBGEN'') then map_option (\<lambda> v . (write_to   DBGEN_ref) v s) ((of_regval   DBGEN_ref) v) else
  if reg_name = (''DBGPRCR_EL1'') then map_option (\<lambda> v . (write_to   DBGPRCR_EL1_ref) v s) ((of_regval   DBGPRCR_EL1_ref) v) else
  if reg_name = (''DBGVCR32_EL2'') then map_option (\<lambda> v . (write_to   DBGVCR32_EL2_ref) v s) ((of_regval   DBGVCR32_EL2_ref) v) else
  if reg_name = (''DBGWCR'') then map_option (\<lambda> v . (write_to   DBGWCR_ref) v s) ((of_regval   DBGWCR_ref) v) else
  if reg_name = (''DBGWCR_EL1'') then map_option (\<lambda> v . (write_to   DBGWCR_EL1_ref) v s) ((of_regval   DBGWCR_EL1_ref) v) else
  if reg_name = (''DBGWVR'') then map_option (\<lambda> v . (write_to   DBGWVR_ref) v s) ((of_regval   DBGWVR_ref) v) else
  if reg_name = (''DBGWVR_EL1'') then map_option (\<lambda> v . (write_to   DBGWVR_EL1_ref) v s) ((of_regval   DBGWVR_EL1_ref) v) else
  if reg_name = (''DLR_EL0'') then map_option (\<lambda> v . (write_to   DLR_EL0_ref) v s) ((of_regval   DLR_EL0_ref) v) else
  if reg_name = (''DSPSR_EL0'') then map_option (\<lambda> v . (write_to   DSPSR_EL0_ref) v s) ((of_regval   DSPSR_EL0_ref) v) else
  if reg_name = (''EDSCR'') then map_option (\<lambda> v . (write_to   EDSCR_ref) v s) ((of_regval   EDSCR_ref) v) else
  if reg_name = (''DFSR_S'') then map_option (\<lambda> v . (write_to   DFSR_S_ref) v s) ((of_regval   DFSR_S_ref) v) else
  if reg_name = (''ELR_EL3'') then map_option (\<lambda> v . (write_to   ELR_EL3_ref) v s) ((of_regval   ELR_EL3_ref) v) else
  if reg_name = (''ELR_EL1'') then map_option (\<lambda> v . (write_to   ELR_EL1_ref) v s) ((of_regval   ELR_EL1_ref) v) else
  if reg_name = (''ESR_EL3'') then map_option (\<lambda> v . (write_to   ESR_EL3_ref) v s) ((of_regval   ESR_EL3_ref) v) else
  if reg_name = (''ESR_EL1'') then map_option (\<lambda> v . (write_to   ESR_EL1_ref) v s) ((of_regval   ESR_EL1_ref) v) else
  if reg_name = (''ELR_EL2'') then map_option (\<lambda> v . (write_to   ELR_EL2_ref) v s) ((of_regval   ELR_EL2_ref) v) else
  if reg_name = (''TCR_EL2'') then map_option (\<lambda> v . (write_to   TCR_EL2_ref) v s) ((of_regval   TCR_EL2_ref) v) else
  if reg_name = (''ESR_EL2'') then map_option (\<lambda> v . (write_to   ESR_EL2_ref) v s) ((of_regval   ESR_EL2_ref) v) else
  if reg_name = (''FAR_EL1'') then map_option (\<lambda> v . (write_to   FAR_EL1_ref) v s) ((of_regval   FAR_EL1_ref) v) else
  if reg_name = (''FAR_EL2'') then map_option (\<lambda> v . (write_to   FAR_EL2_ref) v s) ((of_regval   FAR_EL2_ref) v) else
  if reg_name = (''FAR_EL3'') then map_option (\<lambda> v . (write_to   FAR_EL3_ref) v s) ((of_regval   FAR_EL3_ref) v) else
  if reg_name = (''HCR_EL2'') then map_option (\<lambda> v . (write_to   HCR_EL2_ref) v s) ((of_regval   HCR_EL2_ref) v) else
  if reg_name = (''HPFAR_EL2'') then map_option (\<lambda> v . (write_to   HPFAR_EL2_ref) v s) ((of_regval   HPFAR_EL2_ref) v) else
  if reg_name = (''ID_AA64DFR0_EL1'') then map_option (\<lambda> v . (write_to   ID_AA64DFR0_EL1_ref) v s) ((of_regval   ID_AA64DFR0_EL1_ref) v) else
  if reg_name = (''IFSR32_EL2'') then map_option (\<lambda> v . (write_to   IFSR32_EL2_ref) v s) ((of_regval   IFSR32_EL2_ref) v) else
  if reg_name = (''IFSR_S'') then map_option (\<lambda> v . (write_to   IFSR_S_ref) v s) ((of_regval   IFSR_S_ref) v) else
  if reg_name = (''InGuardedPage'') then map_option (\<lambda> v . (write_to   InGuardedPage_ref) v s) ((of_regval   InGuardedPage_ref) v) else
  if reg_name = (''LR_mon'') then map_option (\<lambda> v . (write_to   LR_mon_ref) v s) ((of_regval   LR_mon_ref) v) else
  if reg_name = (''MAIR0_S'') then map_option (\<lambda> v . (write_to   MAIR0_S_ref) v s) ((of_regval   MAIR0_S_ref) v) else
  if reg_name = (''MAIR1_S'') then map_option (\<lambda> v . (write_to   MAIR1_S_ref) v s) ((of_regval   MAIR1_S_ref) v) else
  if reg_name = (''MAIR_EL1'') then map_option (\<lambda> v . (write_to   MAIR_EL1_ref) v s) ((of_regval   MAIR_EL1_ref) v) else
  if reg_name = (''MAIR_EL2'') then map_option (\<lambda> v . (write_to   MAIR_EL2_ref) v s) ((of_regval   MAIR_EL2_ref) v) else
  if reg_name = (''MAIR_EL3'') then map_option (\<lambda> v . (write_to   MAIR_EL3_ref) v s) ((of_regval   MAIR_EL3_ref) v) else
  if reg_name = (''MDCR_EL2'') then map_option (\<lambda> v . (write_to   MDCR_EL2_ref) v s) ((of_regval   MDCR_EL2_ref) v) else
  if reg_name = (''MDCR_EL3'') then map_option (\<lambda> v . (write_to   MDCR_EL3_ref) v s) ((of_regval   MDCR_EL3_ref) v) else
  if reg_name = (''MDSCR_EL1'') then map_option (\<lambda> v . (write_to   MDSCR_EL1_ref) v s) ((of_regval   MDSCR_EL1_ref) v) else
  if reg_name = (''MPAM0_EL1'') then map_option (\<lambda> v . (write_to   MPAM0_EL1_ref) v s) ((of_regval   MPAM0_EL1_ref) v) else
  if reg_name = (''MPAM1_EL1'') then map_option (\<lambda> v . (write_to   MPAM1_EL1_ref) v s) ((of_regval   MPAM1_EL1_ref) v) else
  if reg_name = (''MPAM2_EL2'') then map_option (\<lambda> v . (write_to   MPAM2_EL2_ref) v s) ((of_regval   MPAM2_EL2_ref) v) else
  if reg_name = (''MPAM3_EL3'') then map_option (\<lambda> v . (write_to   MPAM3_EL3_ref) v s) ((of_regval   MPAM3_EL3_ref) v) else
  if reg_name = (''MPAMHCR_EL2'') then map_option (\<lambda> v . (write_to   MPAMHCR_EL2_ref) v s) ((of_regval   MPAMHCR_EL2_ref) v) else
  if reg_name = (''MPAMIDR_EL1'') then map_option (\<lambda> v . (write_to   MPAMIDR_EL1_ref) v s) ((of_regval   MPAMIDR_EL1_ref) v) else
  if reg_name = (''MPAMVPM0_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM0_EL2_ref) v s) ((of_regval   MPAMVPM0_EL2_ref) v) else
  if reg_name = (''MPAMVPM1_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM1_EL2_ref) v s) ((of_regval   MPAMVPM1_EL2_ref) v) else
  if reg_name = (''MPAMVPM2_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM2_EL2_ref) v s) ((of_regval   MPAMVPM2_EL2_ref) v) else
  if reg_name = (''MPAMVPM3_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM3_EL2_ref) v s) ((of_regval   MPAMVPM3_EL2_ref) v) else
  if reg_name = (''MPAMVPM4_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM4_EL2_ref) v s) ((of_regval   MPAMVPM4_EL2_ref) v) else
  if reg_name = (''MPAMVPM5_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM5_EL2_ref) v s) ((of_regval   MPAMVPM5_EL2_ref) v) else
  if reg_name = (''MPAMVPM6_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM6_EL2_ref) v s) ((of_regval   MPAMVPM6_EL2_ref) v) else
  if reg_name = (''MPAMVPM7_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPM7_EL2_ref) v s) ((of_regval   MPAMVPM7_EL2_ref) v) else
  if reg_name = (''MPAMVPMV_EL2'') then map_option (\<lambda> v . (write_to   MPAMVPMV_EL2_ref) v s) ((of_regval   MPAMVPMV_EL2_ref) v) else
  if reg_name = (''MPIDR_EL1'') then map_option (\<lambda> v . (write_to   MPIDR_EL1_ref) v s) ((of_regval   MPIDR_EL1_ref) v) else
  if reg_name = (''MVBAR'') then map_option (\<lambda> v . (write_to   MVBAR_ref) v s) ((of_regval   MVBAR_ref) v) else
  if reg_name = (''NMRR_S'') then map_option (\<lambda> v . (write_to   NMRR_S_ref) v s) ((of_regval   NMRR_S_ref) v) else
  if reg_name = (''OSDLR_EL1'') then map_option (\<lambda> v . (write_to   OSDLR_EL1_ref) v s) ((of_regval   OSDLR_EL1_ref) v) else
  if reg_name = (''OSLSR_EL1'') then map_option (\<lambda> v . (write_to   OSLSR_EL1_ref) v s) ((of_regval   OSLSR_EL1_ref) v) else
  if reg_name = (''PRRR_S'') then map_option (\<lambda> v . (write_to   PRRR_S_ref) v s) ((of_regval   PRRR_S_ref) v) else
  if reg_name = (''PSTATE'') then map_option (\<lambda> v . (write_to   PSTATE_ref) v s) ((of_regval   PSTATE_ref) v) else
  if reg_name = (''SCR_EL3'') then map_option (\<lambda> v . (write_to   SCR_EL3_ref) v s) ((of_regval   SCR_EL3_ref) v) else
  if reg_name = (''SCTLR_EL1'') then map_option (\<lambda> v . (write_to   SCTLR_EL1_ref) v s) ((of_regval   SCTLR_EL1_ref) v) else
  if reg_name = (''SCTLR_EL2'') then map_option (\<lambda> v . (write_to   SCTLR_EL2_ref) v s) ((of_regval   SCTLR_EL2_ref) v) else
  if reg_name = (''SCTLR_EL3'') then map_option (\<lambda> v . (write_to   SCTLR_EL3_ref) v s) ((of_regval   SCTLR_EL3_ref) v) else
  if reg_name = (''SCTLR_S'') then map_option (\<lambda> v . (write_to   SCTLR_S_ref) v s) ((of_regval   SCTLR_S_ref) v) else
  if reg_name = (''SDER32_EL3'') then map_option (\<lambda> v . (write_to   SDER32_EL3_ref) v s) ((of_regval   SDER32_EL3_ref) v) else
  if reg_name = (''SPIDEN'') then map_option (\<lambda> v . (write_to   SPIDEN_ref) v s) ((of_regval   SPIDEN_ref) v) else
  if reg_name = (''SPSR_EL1'') then map_option (\<lambda> v . (write_to   SPSR_EL1_ref) v s) ((of_regval   SPSR_EL1_ref) v) else
  if reg_name = (''SPSR_EL2'') then map_option (\<lambda> v . (write_to   SPSR_EL2_ref) v s) ((of_regval   SPSR_EL2_ref) v) else
  if reg_name = (''SPSR_EL3'') then map_option (\<lambda> v . (write_to   SPSR_EL3_ref) v s) ((of_regval   SPSR_EL3_ref) v) else
  if reg_name = (''SPSR_abt'') then map_option (\<lambda> v . (write_to   SPSR_abt_ref) v s) ((of_regval   SPSR_abt_ref) v) else
  if reg_name = (''SPSR_fiq'') then map_option (\<lambda> v . (write_to   SPSR_fiq_ref) v s) ((of_regval   SPSR_fiq_ref) v) else
  if reg_name = (''SPSR_irq'') then map_option (\<lambda> v . (write_to   SPSR_irq_ref) v s) ((of_regval   SPSR_irq_ref) v) else
  if reg_name = (''SPSR_und'') then map_option (\<lambda> v . (write_to   SPSR_und_ref) v s) ((of_regval   SPSR_und_ref) v) else
  if reg_name = (''SP_mon'') then map_option (\<lambda> v . (write_to   SP_mon_ref) v s) ((of_regval   SP_mon_ref) v) else
  if reg_name = (''ScheduledFIQ'') then map_option (\<lambda> v . (write_to   ScheduledFIQ_ref) v s) ((of_regval   ScheduledFIQ_ref) v) else
  if reg_name = (''ScheduledIRQ'') then map_option (\<lambda> v . (write_to   ScheduledIRQ_ref) v s) ((of_regval   ScheduledIRQ_ref) v) else
  if reg_name = (''TCR_EL1'') then map_option (\<lambda> v . (write_to   TCR_EL1_ref) v s) ((of_regval   TCR_EL1_ref) v) else
  if reg_name = (''TCR_EL3'') then map_option (\<lambda> v . (write_to   TCR_EL3_ref) v s) ((of_regval   TCR_EL3_ref) v) else
  if reg_name = (''TFSRE0_EL1'') then map_option (\<lambda> v . (write_to   TFSRE0_EL1_ref) v s) ((of_regval   TFSRE0_EL1_ref) v) else
  if reg_name = (''TFSR_EL1'') then map_option (\<lambda> v . (write_to   TFSR_EL1_ref) v s) ((of_regval   TFSR_EL1_ref) v) else
  if reg_name = (''TFSR_EL2'') then map_option (\<lambda> v . (write_to   TFSR_EL2_ref) v s) ((of_regval   TFSR_EL2_ref) v) else
  if reg_name = (''TFSR_EL3'') then map_option (\<lambda> v . (write_to   TFSR_EL3_ref) v s) ((of_regval   TFSR_EL3_ref) v) else
  if reg_name = (''TLBHits'') then map_option (\<lambda> v . (write_to   TLBHits_ref) v s) ((of_regval   TLBHits_ref) v) else
  if reg_name = (''TLBMisses'') then map_option (\<lambda> v . (write_to   TLBMisses_ref) v s) ((of_regval   TLBMisses_ref) v) else
  if reg_name = (''TTBCR2_S'') then map_option (\<lambda> v . (write_to   TTBCR2_S_ref) v s) ((of_regval   TTBCR2_S_ref) v) else
  if reg_name = (''TTBCR_S'') then map_option (\<lambda> v . (write_to   TTBCR_S_ref) v s) ((of_regval   TTBCR_S_ref) v) else
  if reg_name = (''TTBR0_EL1'') then map_option (\<lambda> v . (write_to   TTBR0_EL1_ref) v s) ((of_regval   TTBR0_EL1_ref) v) else
  if reg_name = (''TTBR0_EL2'') then map_option (\<lambda> v . (write_to   TTBR0_EL2_ref) v s) ((of_regval   TTBR0_EL2_ref) v) else
  if reg_name = (''TTBR0_EL3'') then map_option (\<lambda> v . (write_to   TTBR0_EL3_ref) v s) ((of_regval   TTBR0_EL3_ref) v) else
  if reg_name = (''TTBR0_S'') then map_option (\<lambda> v . (write_to   TTBR0_S_ref) v s) ((of_regval   TTBR0_S_ref) v) else
  if reg_name = (''TTBR1_EL1'') then map_option (\<lambda> v . (write_to   TTBR1_EL1_ref) v s) ((of_regval   TTBR1_EL1_ref) v) else
  if reg_name = (''TTBR1_EL2'') then map_option (\<lambda> v . (write_to   TTBR1_EL2_ref) v s) ((of_regval   TTBR1_EL2_ref) v) else
  if reg_name = (''TTBR1_S'') then map_option (\<lambda> v . (write_to   TTBR1_S_ref) v s) ((of_regval   TTBR1_S_ref) v) else
  if reg_name = (''VBAR_EL1'') then map_option (\<lambda> v . (write_to   VBAR_EL1_ref) v s) ((of_regval   VBAR_EL1_ref) v) else
  if reg_name = (''VBAR_EL2'') then map_option (\<lambda> v . (write_to   VBAR_EL2_ref) v s) ((of_regval   VBAR_EL2_ref) v) else
  if reg_name = (''VBAR_EL3'') then map_option (\<lambda> v . (write_to   VBAR_EL3_ref) v s) ((of_regval   VBAR_EL3_ref) v) else
  if reg_name = (''VBAR_S'') then map_option (\<lambda> v . (write_to   VBAR_S_ref) v s) ((of_regval   VBAR_S_ref) v) else
  if reg_name = (''VSESR_EL2'') then map_option (\<lambda> v . (write_to   VSESR_EL2_ref) v s) ((of_regval   VSESR_EL2_ref) v) else
  if reg_name = (''VSTCR_EL2'') then map_option (\<lambda> v . (write_to   VSTCR_EL2_ref) v s) ((of_regval   VSTCR_EL2_ref) v) else
  if reg_name = (''VSTTBR_EL2'') then map_option (\<lambda> v . (write_to   VSTTBR_EL2_ref) v s) ((of_regval   VSTTBR_EL2_ref) v) else
  if reg_name = (''VTCR_EL2'') then map_option (\<lambda> v . (write_to   VTCR_EL2_ref) v s) ((of_regval   VTCR_EL2_ref) v) else
  if reg_name = (''VTTBR_EL2'') then map_option (\<lambda> v . (write_to   VTTBR_EL2_ref) v s) ((of_regval   VTTBR_EL2_ref) v) else
  if reg_name = (''_AXIAbortCtl'') then map_option (\<lambda> v . (write_to   AXIAbortCtl_ref) v s) ((of_regval   AXIAbortCtl_ref) v) else
  if reg_name = (''_ClearFIQ'') then map_option (\<lambda> v . (write_to   ClearFIQ_ref) v s) ((of_regval   ClearFIQ_ref) v) else
  if reg_name = (''_ClearIRQ'') then map_option (\<lambda> v . (write_to   ClearIRQ_ref) v s) ((of_regval   ClearIRQ_ref) v) else
  if reg_name = (''_FIQPending'') then map_option (\<lambda> v . (write_to   FIQPending_ref) v s) ((of_regval   FIQPending_ref) v) else
  if reg_name = (''_GTEActive'') then map_option (\<lambda> v . (write_to   GTEActive_ref) v s) ((of_regval   GTEActive_ref) v) else
  if reg_name = (''_GTECurrentAPI'') then map_option (\<lambda> v . (write_to   GTECurrentAPI_ref) v s) ((of_regval   GTECurrentAPI_ref) v) else
  if reg_name = (''_GTEHaveParamLo'') then map_option (\<lambda> v . (write_to   GTEHaveParamLo_ref) v s) ((of_regval   GTEHaveParamLo_ref) v) else
  if reg_name = (''_GTEListParam'') then map_option (\<lambda> v . (write_to   GTEListParam_ref) v s) ((of_regval   GTEListParam_ref) v) else
  if reg_name = (''_GTEListParamIndex'') then map_option (\<lambda> v . (write_to   GTEListParamIndex_ref) v s) ((of_regval   GTEListParamIndex_ref) v) else
  if reg_name = (''_GTEListParamTerminator'') then map_option (\<lambda> v . (write_to   GTEListParamTerminator_ref) v s) ((of_regval   GTEListParamTerminator_ref) v) else
  if reg_name = (''_GTEListParamTerminatorCount'') then map_option (\<lambda> v . (write_to   GTEListParamTerminatorCount_ref) v s) ((of_regval   GTEListParamTerminatorCount_ref) v) else
  if reg_name = (''_GTEListParamTerminators'') then map_option (\<lambda> v . (write_to   GTEListParamTerminators_ref) v s) ((of_regval   GTEListParamTerminators_ref) v) else
  if reg_name = (''_GTEParamCount'') then map_option (\<lambda> v . (write_to   GTEParamCount_ref) v s) ((of_regval   GTEParamCount_ref) v) else
  if reg_name = (''_GTEParamLo'') then map_option (\<lambda> v . (write_to   GTEParamLo_ref) v s) ((of_regval   GTEParamLo_ref) v) else
  if reg_name = (''_GTEParamType'') then map_option (\<lambda> v . (write_to   GTEParamType_ref) v s) ((of_regval   GTEParamType_ref) v) else
  if reg_name = (''_GTEParamsComplete'') then map_option (\<lambda> v . (write_to   GTEParamsComplete_ref) v s) ((of_regval   GTEParamsComplete_ref) v) else
  if reg_name = (''_GTEStatus'') then map_option (\<lambda> v . (write_to   GTEStatus_ref) v s) ((of_regval   GTEStatus_ref) v) else
  if reg_name = (''_GTE_AS_Access'') then map_option (\<lambda> v . (write_to   GTE_AS_Access_ref) v s) ((of_regval   GTE_AS_Access_ref) v) else
  if reg_name = (''_GTE_AS_AccessCount'') then map_option (\<lambda> v . (write_to   GTE_AS_AccessCount_ref) v s) ((of_regval   GTE_AS_AccessCount_ref) v) else
  if reg_name = (''_GTE_AS_Address'') then map_option (\<lambda> v . (write_to   GTE_AS_Address_ref) v s) ((of_regval   GTE_AS_Address_ref) v) else
  if reg_name = (''_GTE_AS_Size'') then map_option (\<lambda> v . (write_to   GTE_AS_Size_ref) v s) ((of_regval   GTE_AS_Size_ref) v) else
  if reg_name = (''_IRQPending'') then map_option (\<lambda> v . (write_to   IRQPending_ref) v s) ((of_regval   IRQPending_ref) v) else
  if reg_name = (''_PC'') then map_option (\<lambda> v . (write_to   PC_ref) v s) ((of_regval   PC_ref) v) else
  if reg_name = (''_PPURACR'') then map_option (\<lambda> v . (write_to   PPURACR_ref) v s) ((of_regval   PPURACR_ref) v) else
  if reg_name = (''_PPURBAR'') then map_option (\<lambda> v . (write_to   PPURBAR_ref) v s) ((of_regval   PPURBAR_ref) v) else
  if reg_name = (''_PPURSER'') then map_option (\<lambda> v . (write_to   PPURSER_ref) v s) ((of_regval   PPURSER_ref) v) else
  if reg_name = (''_PendingPhysicalSE'') then map_option (\<lambda> v . (write_to   PendingPhysicalSE_ref) v s) ((of_regval   PendingPhysicalSE_ref) v) else
  if reg_name = (''_R'') then map_option (\<lambda> v . (write_to   R_ref) v s) ((of_regval   R_ref) v) else
  if reg_name = (''_ScheduleFIQ'') then map_option (\<lambda> v . (write_to   ScheduleFIQ_ref) v s) ((of_regval   ScheduleFIQ_ref) v) else
  if reg_name = (''_ScheduleIRQ'') then map_option (\<lambda> v . (write_to   ScheduleIRQ_ref) v s) ((of_regval   ScheduleIRQ_ref) v) else
  if reg_name = (''_TLB'') then map_option (\<lambda> v . (write_to   TLB_ref) v s) ((of_regval   TLB_ref) v) else
  if reg_name = (''_TargetCPU'') then map_option (\<lambda> v . (write_to   TargetCPU_ref) v s) ((of_regval   TargetCPU_ref) v) else
  if reg_name = (''__CNTControlBase'') then map_option (\<lambda> v . (write_to   CNTControlBase_ref) v s) ((of_regval   CNTControlBase_ref) v) else
  if reg_name = (''__LSISyndrome'') then map_option (\<lambda> v . (write_to   LSISyndrome_ref) v s) ((of_regval   LSISyndrome_ref) v) else
  if reg_name = (''__PC_changed'') then map_option (\<lambda> v . (write_to   PC_changed_ref) v s) ((of_regval   PC_changed_ref) v) else
  if reg_name = (''__currentInstr'') then map_option (\<lambda> v . (write_to   currentInstr_ref) v s) ((of_regval   currentInstr_ref) v) else
  if reg_name = (''__currentInstrLength'') then map_option (\<lambda> v . (write_to   currentInstrLength_ref) v s) ((of_regval   currentInstrLength_ref) v) else
  if reg_name = (''__defaultRAM'') then map_option (\<lambda> v . (write_to   defaultRAM_ref) v s) ((of_regval   defaultRAM_ref) v) else
  if reg_name = (''__highest_el_aarch32'') then map_option (\<lambda> v . (write_to   highest_el_aarch32_ref) v s) ((of_regval   highest_el_aarch32_ref) v) else
  None )"


definition register_accessors  :: "(string \<Rightarrow> regstate \<Rightarrow>(register_value)option)*(string \<Rightarrow> register_value \<Rightarrow> regstate \<Rightarrow>(regstate)option)"  where 
     " register_accessors = ( (get_regval, set_regval))"



type_synonym( 'a, 'r) MR =" (register_value, regstate, 'a, 'r, exception) base_monadR "
type_synonym 'a M =" (register_value, regstate, 'a, exception) base_monad "
end
