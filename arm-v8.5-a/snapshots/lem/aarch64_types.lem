(*Generated by Sail from aarch64.*)
open import Pervasives_extra
open import Sail2_instr_kinds
open import Sail2_values
open import Sail2_string
open import Sail2_operators_bitlists
open import Sail2_prompt_monad
open import Sail2_prompt




type bits 'n = list bitU

type exception  =
  | Error_Undefined of (unit)
  | Error_See of (string)
  | Error_Implementation_Defined of (string)
  | Error_ReservedEncoding of (unit)
  | Error_ExceptionTaken of (unit)
  | Error_Unpredictable of (unit)



type boolean = FALSE | TRUE



type signal = LOW | HIGH



type __RetCode =
  __RC_OK
  | __RC_UNDEFINED
  | __RC_UNPREDICTABLE
  | __RC_SEE
  | __RC_IMPLEMENTATION_DEFINED
  | __RC_EXCEPTION_TAKEN
  | __RC_ASSERT_FAILED
  | __RC_UNMATCHED_CASE



type TUBE_Type  = list bitU

type ScheduleIRQ_Type  = list bitU

type ClearIRQ_Type  = list bitU

type ScheduleFIQ_Type  = list bitU

type ClearFIQ_Type  = list bitU

type TargetCPU_Type  = list bitU

type AbortRgn64Lo1_Type  = list bitU

type AbortRgn64Lo1_Hi_Type  = list bitU

type AbortRgn64Hi1_Type  = list bitU

type AbortRgn64Hi1_Hi_Type  = list bitU

type AbortRgn64Lo2_Type  = list bitU

type AbortRgn64Lo2_Hi_Type  = list bitU

type AbortRgn64Hi2_Type  = list bitU

type AbortRgn64Hi2_Hi_Type  = list bitU

type AXIAbortCtl_Type  = list bitU

type GTE_API_Type  = list bitU

type GTE_API_PARAM_Type  = list bitU

type GTE_API_STATUS_Type  = list bitU

type PPURBAR_Type  = list bitU

type PPURSER_Type  = list bitU

type PPURACR_Type  = list bitU

type GTE_API_STATUS_64_Type  = list bitU

type GTE_API_STATUS_64_HI_Type  = list bitU

type GTE_API_PARAM_64_Type  = list bitU

type GTE_API_PARAM_64_HI_Type  = list bitU

type SCRType  = list bitU

type SCTLRType  = list bitU

type MAIRType  = list bitU

type ESRType  = list bitU

type FPCRType  = list bitU

type FPSRType  = list bitU

type FPSCRType  = list bitU

type CPSRType  = list bitU

type APSRType  = list bitU

type ITSTATEType  = list bitU

type CPACRType  = list bitU

type CNTKCTLType  = list bitU

type GTEParamType = GTEParam_WORD | GTEParam_LIST | GTEParam_EOACCESS



type GTE_PPU_SizeEn_Type  = list bitU

type GTEExtObsAccess_Type  = list bitU

type GTEASAccess_Type  = list bitU

type GTEASRecordedAccess_Type  = list bitU

type AccType =
  AccType_NORMAL
  | AccType_VEC
  | AccType_STREAM
  | AccType_VECSTREAM
  | AccType_ATOMIC
  | AccType_ATOMICRW
  | AccType_ORDERED
  | AccType_ORDEREDRW
  | AccType_ORDEREDATOMIC
  | AccType_ORDEREDATOMICRW
  | AccType_LIMITEDORDERED
  | AccType_UNPRIV
  | AccType_IFETCH
  | AccType_PTW
  | AccType_NV2REGISTER
  | AccType_DC
  | AccType_DC_UNPRIV
  | AccType_IC
  | AccType_DCZVA
  | AccType_AT



type MemType = MemType_Normal | MemType_Device



type DeviceType = DeviceType_GRE | DeviceType_nGRE | DeviceType_nGnRE | DeviceType_nGnRnE



type MemAttrHints  =
  <| MemAttrHints_attrs : list bitU; MemAttrHints_hints : list bitU; MemAttrHints_transient : bool; |>


type MemoryAttributes  =
  <| MemoryAttributes_typ : MemType;
     MemoryAttributes_device : DeviceType;
     MemoryAttributes_inner : MemAttrHints;
     MemoryAttributes_outer : MemAttrHints;
     MemoryAttributes_tagged : bool;
     MemoryAttributes_shareable : bool;
     MemoryAttributes_outershareable : bool; |>


type FullAddress  = <| FullAddress_address : list bitU; FullAddress_NS : list bitU; |>


type Fault =
  Fault_None
  | Fault_AccessFlag
  | Fault_Alignment
  | Fault_Background
  | Fault_Domain
  | Fault_Permission
  | Fault_Translation
  | Fault_AddressSize
  | Fault_SyncExternal
  | Fault_SyncExternalOnWalk
  | Fault_SyncParity
  | Fault_SyncParityOnWalk
  | Fault_AsyncParity
  | Fault_AsyncExternal
  | Fault_Debug
  | Fault_TLBConflict
  | Fault_BranchTarget
  | Fault_HWUpdateAccessFlag
  | Fault_Lockdown
  | Fault_Exclusive
  | Fault_ICacheMaint



type FaultRecord  =
  <| FaultRecord_typ : Fault;
     FaultRecord_acctype : AccType;
     FaultRecord_ipaddress : FullAddress;
     FaultRecord_s2fs1walk : bool;
     FaultRecord_write : bool;
     FaultRecord_level : ii;
     FaultRecord_extflag : list bitU;
     FaultRecord_secondstage : bool;
     FaultRecord_domain : list bitU;
     FaultRecord_errortype : list bitU;
     FaultRecord_debugmoe : list bitU; |>


type PARTIDtype  = list bitU

type PMGtype  = list bitU

type MPAMinfo  =
  <| MPAMinfo_mpam_ns : list bitU; MPAMinfo_partid : list bitU; MPAMinfo_pmg : list bitU; |>


type AddressDescriptor  =
  <| AddressDescriptor_fault : FaultRecord;
     AddressDescriptor_memattrs : MemoryAttributes;
     AddressDescriptor_paddress : FullAddress;
     AddressDescriptor_vaddress : list bitU; |>


type AccessDescriptor  =
  <| AccessDescriptor_acctype : AccType;
     AccessDescriptor_mpam : MPAMinfo;
     AccessDescriptor_page_table_walk : bool;
     AccessDescriptor_secondstage : bool;
     AccessDescriptor_s2fs1walk : bool;
     AccessDescriptor_level : ii; |>


type Permissions  =
  <| Permissions_ap : list bitU;
     Permissions_xn : list bitU;
     Permissions_xxn : list bitU;
     Permissions_pxn : list bitU; |>


type DescriptorUpdate  =
  <| DescriptorUpdate_AF : bool;
     DescriptorUpdate_AP : bool;
     DescriptorUpdate_descaddr : AddressDescriptor; |>


type TLBRecord  =
  <| TLBRecord_perms : Permissions;
     TLBRecord_nG : list bitU;
     TLBRecord_domain : list bitU;
     TLBRecord_GP : list bitU;
     TLBRecord_contiguous : bool;
     TLBRecord_level : ii;
     TLBRecord_blocksize : ii;
     TLBRecord_descupdate : DescriptorUpdate;
     TLBRecord_CnP : list bitU;
     TLBRecord_addrdesc : AddressDescriptor; |>


type MBReqDomain =
  MBReqDomain_Nonshareable
  | MBReqDomain_InnerShareable
  | MBReqDomain_OuterShareable
  | MBReqDomain_FullSystem



type MBReqTypes = MBReqTypes_Reads | MBReqTypes_Writes | MBReqTypes_All



type PrefetchHint = Prefetch_READ | Prefetch_WRITE | Prefetch_EXEC



type ProcState  =
  <| ProcState_N : list bitU;
     ProcState_Z : list bitU;
     ProcState_C : list bitU;
     ProcState_V : list bitU;
     ProcState_D : list bitU;
     ProcState_A : list bitU;
     ProcState_I : list bitU;
     ProcState_F : list bitU;
     ProcState_PAN : list bitU;
     ProcState_UAO : list bitU;
     ProcState_DIT : list bitU;
     ProcState_TCO : list bitU;
     ProcState_BTYPE : list bitU;
     ProcState_SS : list bitU;
     ProcState_IL : list bitU;
     ProcState_EL : list bitU;
     ProcState_nRW : list bitU;
     ProcState_SP : list bitU;
     ProcState_Q : list bitU;
     ProcState_GE : list bitU;
     ProcState_SSBS : list bitU;
     ProcState_IT : list bitU;
     ProcState_J : list bitU;
     ProcState_T : list bitU;
     ProcState_E : list bitU;
     ProcState_M : list bitU; |>


type PrivilegeLevel = PL3 | PL2 | PL1 | PL0



type InstrSet = InstrSet_A64 | InstrSet_A32 | InstrSet_T32



type ArchVersion = ARMv8p0 | ARMv8p1 | ARMv8p2 | ARMv8p3 | ARMv8p4 | ARMv8p5



type Unpredictable =
  Unpredictable_WBOVERLAPLD
  | Unpredictable_WBOVERLAPST
  | Unpredictable_LDPOVERLAP
  | Unpredictable_BASEOVERLAP
  | Unpredictable_DATAOVERLAP
  | Unpredictable_DEVPAGE2
  | Unpredictable_INSTRDEVICE
  | Unpredictable_RESCPACR
  | Unpredictable_RESMAIR
  | Unpredictable_RESTEXCB
  | Unpredictable_RESPRRR
  | Unpredictable_RESDACR
  | Unpredictable_RESVTCRS
  | Unpredictable_RESTnSZ
  | Unpredictable_OORTnSZ
  | Unpredictable_LARGEIPA
  | Unpredictable_ESRCONDPASS
  | Unpredictable_ILZEROIT
  | Unpredictable_ILZEROT
  | Unpredictable_BPVECTORCATCHPRI
  | Unpredictable_VCMATCHHALF
  | Unpredictable_VCMATCHDAPA
  | Unpredictable_WPMASKANDBAS
  | Unpredictable_WPBASCONTIGUOUS
  | Unpredictable_RESWPMASK
  | Unpredictable_WPMASKEDBITS
  | Unpredictable_RESBPWPCTRL
  | Unpredictable_BPNOTIMPL
  | Unpredictable_RESBPTYPE
  | Unpredictable_BPNOTCTXCMP
  | Unpredictable_BPMATCHHALF
  | Unpredictable_BPMISMATCHHALF
  | Unpredictable_RESTARTALIGNPC
  | Unpredictable_RESTARTZEROUPPERPC
  | Unpredictable_ZEROUPPER
  | Unpredictable_ERETZEROUPPERPC
  | Unpredictable_A32FORCEALIGNPC
  | Unpredictable_SMD
  | Unpredictable_AFUPDATE
  | Unpredictable_IESBinDebug
  | Unpredictable_ZEROPMSEVFR
  | Unpredictable_NOOPTYPES
  | Unpredictable_ZEROMINLATENCY
  | Unpredictable_ZEROBTYPE
  | Unpredictable_CLEARERRITEZERO



type Constraint =
  Constraint_NONE
  | Constraint_UNKNOWN
  | Constraint_UNDEF
  | Constraint_UNDEFEL0
  | Constraint_NOP
  | Constraint_TRUE
  | Constraint_FALSE
  | Constraint_DISABLED
  | Constraint_UNCOND
  | Constraint_COND
  | Constraint_ADDITIONAL_DECODE
  | Constraint_WBSUPPRESS
  | Constraint_FAULT
  | Constraint_FORCE
  | Constraint_FORCENOSLCHECK



type FPExc =
  FPExc_InvalidOp
  | FPExc_DivideByZero
  | FPExc_Overflow
  | FPExc_Underflow
  | FPExc_Inexact
  | FPExc_InputDenorm



type FPRounding =
  FPRounding_TIEEVEN
  | FPRounding_POSINF
  | FPRounding_NEGINF
  | FPRounding_ZERO
  | FPRounding_TIEAWAY
  | FPRounding_ODD



type FPType = FPType_Nonzero | FPType_Zero | FPType_Infinity | FPType_QNaN | FPType_SNaN



type BranchType =
  BranchType_DIRCALL
  | BranchType_INDCALL
  | BranchType_ERET
  | BranchType_DBGEXIT
  | BranchType_RET
  | BranchType_DIR
  | BranchType_INDIR
  | BranchType_EXCEPTION
  | BranchType_RESET
  | BranchType_UNKNOWN



type TLBContext  =
  <| TLBContext_twostage : bool;
     TLBContext_secondstage : bool;
     TLBContext_asid : list bitU;
     TLBContext_vmid : list bitU;
     TLBContext_el : list bitU;
     TLBContext_secure : bool;
     TLBContext_t_sz : list bitU;
     TLBContext_granule_size : ii; |>


type TLBLine  =
  <| TLBLine_address : list bitU;
     TLBLine_context : TLBContext;
     TLBLine_data : TLBRecord;
     TLBLine_valid_name : bool; |>


type Exception =
  Exception_Uncategorized
  | Exception_WFxTrap
  | Exception_CP15RTTrap
  | Exception_CP15RRTTrap
  | Exception_CP14RTTrap
  | Exception_CP14DTTrap
  | Exception_AdvSIMDFPAccessTrap
  | Exception_FPIDTrap
  | Exception_PACTrap
  | Exception_CP14RRTTrap
  | Exception_IllegalState
  | Exception_SupervisorCall
  | Exception_HypervisorCall
  | Exception_MonitorCall
  | Exception_SystemRegisterTrap
  | Exception_ERetTrap
  | Exception_InstructionAbort
  | Exception_PCAlignment
  | Exception_DataAbort
  | Exception_NV2DataAbort
  | Exception_SPAlignment
  | Exception_FPTrappedException
  | Exception_SError
  | Exception_Breakpoint
  | Exception_SoftwareStep
  | Exception_Watchpoint
  | Exception_SoftwareBreakpoint
  | Exception_VectorCatch
  | Exception_IRQ
  | Exception_BranchTarget
  | Exception_FIQ



type ExceptionRecord  =
  <| ExceptionRecord_typ : Exception;
     ExceptionRecord_syndrome : list bitU;
     ExceptionRecord_vaddress : list bitU;
     ExceptionRecord_ipavalid : bool;
     ExceptionRecord_NS : list bitU;
     ExceptionRecord_ipaddress : list bitU; |>


type SystemAccessType = SystemAccessType_RT | SystemAccessType_RRT | SystemAccessType_DT



type SysRegAccess =
  SysRegAccess_OK
  | SysRegAccess_UNDEFINED
  | SysRegAccess_TrapToEL1
  | SysRegAccess_TrapToEL2
  | SysRegAccess_TrapToEL3



type OpType = OpType_Load | OpType_Store | OpType_LoadAtomic | OpType_Branch | OpType_Other



type TimeStamp = TimeStamp_None | TimeStamp_Virtual | TimeStamp_Physical



type CountOp = CountOp_CLZ | CountOp_CLS | CountOp_CNT



type ExtendType =
  ExtendType_SXTB
  | ExtendType_SXTH
  | ExtendType_SXTW
  | ExtendType_SXTX
  | ExtendType_UXTB
  | ExtendType_UXTH
  | ExtendType_UXTW
  | ExtendType_UXTX



type FPMaxMinOp = FPMaxMinOp_MAX | FPMaxMinOp_MIN | FPMaxMinOp_MAXNUM | FPMaxMinOp_MINNUM



type FPUnaryOp = FPUnaryOp_ABS | FPUnaryOp_MOV | FPUnaryOp_NEG | FPUnaryOp_SQRT



type FPConvOp =
  FPConvOp_CVT_FtoI
  | FPConvOp_CVT_ItoF
  | FPConvOp_MOV_FtoI
  | FPConvOp_MOV_ItoF
  | FPConvOp_CVT_FtoI_JS



type MoveWideOp = MoveWideOp_N | MoveWideOp_Z | MoveWideOp_K



type ShiftType = ShiftType_LSL | ShiftType_LSR | ShiftType_ASR | ShiftType_ROR



type LogicalOp = LogicalOp_AND | LogicalOp_EOR | LogicalOp_ORR



type MemOp = MemOp_LOAD | MemOp_STORE | MemOp_PREFETCH



type MemAtomicOp =
  MemAtomicOp_ADD
  | MemAtomicOp_BIC
  | MemAtomicOp_EOR
  | MemAtomicOp_ORR
  | MemAtomicOp_SMAX
  | MemAtomicOp_SMIN
  | MemAtomicOp_UMAX
  | MemAtomicOp_UMIN
  | MemAtomicOp_SWP



type MemBarrierOp =
  MemBarrierOp_DSB
  | MemBarrierOp_DMB
  | MemBarrierOp_ISB
  | MemBarrierOp_SSBB
  | MemBarrierOp_PSSBB
  | MemBarrierOp_SB



type SystemHintOp =
  SystemHintOp_NOP
  | SystemHintOp_YIELD
  | SystemHintOp_WFE
  | SystemHintOp_WFI
  | SystemHintOp_SEV
  | SystemHintOp_SEVL
  | SystemHintOp_ESB
  | SystemHintOp_PSB
  | SystemHintOp_TSB
  | SystemHintOp_BTI
  | SystemHintOp_CSDB



type PSTATEField =
  PSTATEField_DAIFSet
  | PSTATEField_DAIFClr
  | PSTATEField_PAN
  | PSTATEField_UAO
  | PSTATEField_DIT
  | PSTATEField_SP



type SystemOp = Sys_AT | Sys_DC | Sys_IC | Sys_TLBI | Sys_SYS



type VBitOp = VBitOp_VBIF | VBitOp_VBIT | VBitOp_VBSL | VBitOp_VEOR



type CompareOp = CompareOp_GT | CompareOp_GE | CompareOp_EQ | CompareOp_LE | CompareOp_LT



type ImmediateOp = ImmediateOp_MOVI | ImmediateOp_MVNI | ImmediateOp_ORR | ImmediateOp_BIC



type ReduceOp =
  ReduceOp_FMINNUM | ReduceOp_FMAXNUM | ReduceOp_FMIN | ReduceOp_FMAX | ReduceOp_FADD | ReduceOp_ADD



type SRType = SRType_LSL | SRType_LSR | SRType_ASR | SRType_ROR | SRType_RRX



type AArch32_SErrorSyndrome  =
  <| AArch32_SErrorSyndrome_AET : list bitU; AArch32_SErrorSyndrome_ExT : list bitU; |>


type CrossTriggerOut =
  CrossTriggerOut_DebugRequest
  | CrossTriggerOut_RestartRequest
  | CrossTriggerOut_IRQ
  | CrossTriggerOut_RSVD3
  | CrossTriggerOut_TraceExtIn0
  | CrossTriggerOut_TraceExtIn1
  | CrossTriggerOut_TraceExtIn2
  | CrossTriggerOut_TraceExtIn3



type CrossTriggerIn =
  CrossTriggerIn_CrossHalt
  | CrossTriggerIn_PMUOverflow
  | CrossTriggerIn_RSVD2
  | CrossTriggerIn_RSVD3
  | CrossTriggerIn_TraceExtOut0
  | CrossTriggerIn_TraceExtOut1
  | CrossTriggerIn_TraceExtOut2
  | CrossTriggerIn_TraceExtOut3



type InterruptID =
  InterruptID_PMUIRQ
  | InterruptID_COMMIRQ
  | InterruptID_CTIIRQ
  | InterruptID_COMMRX
  | InterruptID_COMMTX



type PCSample  =
  <| PCSample_valid_name : bool;
     PCSample_pc : list bitU;
     PCSample_el : list bitU;
     PCSample_rw : list bitU;
     PCSample_ns : list bitU;
     PCSample_has_el2 : bool;
     PCSample_contextidr : list bitU;
     PCSample_contextidr_el2 : list bitU;
     PCSample_el0h : bool;
     PCSample_vmid : list bitU; |>


type VCGEtype = VCGEtype_signed | VCGEtype_unsigned | VCGEtype_fp



type VCGTtype = VCGTtype_signed | VCGTtype_unsigned | VCGTtype_fp



type VFPNegMul = VFPNegMul_VNMLA | VFPNegMul_VNMLS | VFPNegMul_VNMUL



type InterruptReq  =
  <| InterruptReq_take_SE : bool;
     InterruptReq_take_vSE : bool;
     InterruptReq_take_IRQ : bool;
     InterruptReq_take_vIRQ : bool;
     InterruptReq_take_FIQ : bool;
     InterruptReq_take_vFIQ : bool;
     InterruptReq_iesb_req : bool; |>


type AsyncErrorType =
  AsyncErrorType_UC
  | AsyncErrorType_UEU
  | AsyncErrorType_UEO
  | AsyncErrorType_UER
  | AsyncErrorType_CE





type register_value  =
  | Regval_vector of ((ii * bool * list register_value))
  | Regval_list of (list register_value)
  | Regval_option of (maybe register_value)
  | Regval_GTEParamType of (GTEParamType)
  | Regval_ProcState of (ProcState)
  | Regval_TLBLine of (TLBLine)
  | Regval_bit of (bitU)
  | Regval_bool of (bool)
  | Regval_int of (ii)
  | Regval_signal of (signal)



type regstate  =
  <| CNTHCTL_EL2 : list bitU;
     CPTR_EL2 : list bitU;
     CCSIDR_EL1 : list bitU;
     ACTLR_EL1 : list bitU;
     ACTLR_EL2 : list bitU;
     ACTLR_EL3 : list bitU;
     AFSR0_EL1 : list bitU;
     AFSR0_EL2 : list bitU;
     AFSR0_EL3 : list bitU;
     AFSR1_EL1 : list bitU;
     AFSR1_EL2 : list bitU;
     AFSR1_EL3 : list bitU;
     AIDR_EL1 : list bitU;
     AMAIR_EL1 : list bitU;
     AMAIR_EL2 : list bitU;
     AMAIR_EL3 : list bitU;
     APDAKeyHi_EL1 : list bitU;
     APDAKeyLo_EL1 : list bitU;
     APDBKeyHi_EL1 : list bitU;
     APDBKeyLo_EL1 : list bitU;
     APGAKeyHi_EL1 : list bitU;
     APGAKeyLo_EL1 : list bitU;
     APIAKeyHi_EL1 : list bitU;
     APIAKeyLo_EL1 : list bitU;
     APIBKeyHi_EL1 : list bitU;
     APIBKeyLo_EL1 : list bitU;
     BTypeCompatible : bool;
     BTypeNext : list bitU;
     CCSIDR2_EL1 : list bitU;
     CLIDR_EL1 : list bitU;
     CNTFRQ_EL0 : list bitU;
     CNTHPS_CTL_EL2 : list bitU;
     CNTHPS_CVAL_EL2 : list bitU;
     CNTHPS_TVAL_EL2 : list bitU;
     CNTHP_CTL_EL2 : list bitU;
     CNTHP_CVAL_EL2 : list bitU;
     CNTHP_TVAL_EL2 : list bitU;
     CNTHVS_CTL_EL2 : list bitU;
     CNTHVS_CVAL_EL2 : list bitU;
     CNTHVS_TVAL_EL2 : list bitU;
     CNTHV_CTL_EL2 : list bitU;
     CNTHV_CVAL_EL2 : list bitU;
     CNTHV_TVAL_EL2 : list bitU;
     CNTKCTL_EL1 : list bitU;
     CNTPCT_EL0 : list bitU;
     CNTPS_CTL_EL1 : list bitU;
     CNTPS_CVAL_EL1 : list bitU;
     CNTPS_TVAL_EL1 : list bitU;
     CNTP_CTL_EL0 : list bitU;
     CNTP_CTL_S : list bitU;
     CNTP_CVAL_EL0 : list bitU;
     CNTP_TVAL_EL0 : list bitU;
     CNTVCT_EL0 : list bitU;
     CNTVOFF_EL2 : list bitU;
     CNTV_CTL_EL0 : list bitU;
     CNTV_CVAL_EL0 : list bitU;
     CNTV_TVAL_EL0 : list bitU;
     CPACR_EL1 : list bitU;
     CPTR_EL3 : list bitU;
     CSSELR_EL1 : list bitU;
     CSSELR_S : list bitU;
     CTR_EL0 : list bitU;
     DBGAUTHSTATUS_EL1 : list bitU;
     DBGCLAIMCLR_EL1 : list bitU;
     DBGCLAIMSET_EL1 : list bitU;
     DBGDEVID1 : list bitU;
     DBGDEVID2 : list bitU;
     DBGDSCRint : list bitU;
     DBGDTRRX_EL0 : list bitU;
     DBGDTRTX_EL0 : list bitU;
     DBGDTR_EL0 : list bitU;
     DBGWFAR : list bitU;
     DCZID_EL0 : list bitU;
     DISR_EL1 : list bitU;
     EDECCR : list bitU;
     EDECR : list bitU;
     EDESR : list bitU;
     EDLSR : list bitU;
     EDPCSR : list bitU;
     EDPFR : list bitU;
     EDPRCR : list bitU;
     EDPRSR : list bitU;
     EDVIDSR : list bitU;
     ELR_EL0 : list bitU;
     ESP_EL0 : list bitU;
     ESR_EL0 : list bitU;
     EventRegister : list bitU;
     FAR_EL0 : list bitU;
     FCSEIDR : list bitU;
     FPCR : list bitU;
     FPEXC32_EL2 : list bitU;
     FPSCR : list bitU;
     FPSID : list bitU;
     FPSR : list bitU;
     GCR_EL1 : list bitU;
     HACR_EL2 : list bitU;
     HSTR_EL2 : list bitU;
     ICC_AP0R_EL1 : list (list bitU);
     ICC_AP1R_EL1 : list (list bitU);
     ICC_ASGI1R_EL1 : list bitU;
     ICC_BPR0_EL1 : list bitU;
     ICC_BPR1_EL1_NS : list bitU;
     ICC_BPR1_EL1_S : list bitU;
     ICC_CTLR_EL1_NS : list bitU;
     ICC_CTLR_EL1_S : list bitU;
     ICC_CTLR_EL3 : list bitU;
     ICC_DIR_EL1 : list bitU;
     ICC_EOIR0_EL1 : list bitU;
     ICC_EOIR1_EL1 : list bitU;
     ICC_HPPIR0_EL1 : list bitU;
     ICC_HPPIR1_EL1 : list bitU;
     ICC_IAR0_EL1 : list bitU;
     ICC_IAR1_EL1 : list bitU;
     ICC_IGRPEN0_EL1 : list bitU;
     ICC_IGRPEN1_EL1_NS : list bitU;
     ICC_IGRPEN1_EL1_S : list bitU;
     ICC_IGRPEN1_EL3 : list bitU;
     ICC_PMR_EL1 : list bitU;
     ICC_RPR_EL1 : list bitU;
     ICC_SGI0R_EL1 : list bitU;
     ICC_SGI1R_EL1 : list bitU;
     ICC_SRE_EL1_NS : list bitU;
     ICC_SRE_EL1_S : list bitU;
     ICC_SRE_EL2 : list bitU;
     ICC_SRE_EL3 : list bitU;
     ICH_AP0R_EL2 : list (list bitU);
     ICH_AP1R_EL2 : list (list bitU);
     ICH_EISR_EL2 : list bitU;
     ICH_ELRSR_EL2 : list bitU;
     ICH_HCR_EL2 : list bitU;
     ICH_MISR_EL2 : list bitU;
     ICH_VMCR_EL2 : list bitU;
     ICH_VTR_EL2 : list bitU;
     ICV_AP0R_EL1 : list (list bitU);
     ICV_AP1R_EL1 : list (list bitU);
     ICV_BPR0_EL1 : list bitU;
     ICV_BPR1_EL1 : list bitU;
     ICV_CTLR_EL1 : list bitU;
     ICV_DIR_EL1 : list bitU;
     ICV_EOIR0_EL1 : list bitU;
     ICV_EOIR1_EL1 : list bitU;
     ICV_HPPIR0_EL1 : list bitU;
     ICV_HPPIR1_EL1 : list bitU;
     ICV_IAR0_EL1 : list bitU;
     ICV_IAR1_EL1 : list bitU;
     ICV_IGRPEN0_EL1 : list bitU;
     ICV_IGRPEN1_EL1 : list bitU;
     ICV_PMR_EL1 : list bitU;
     ICV_RPR_EL1 : list bitU;
     ID_AA64AFR0_EL1 : list bitU;
     ID_AA64AFR1_EL1 : list bitU;
     ID_AA64DFR1_EL1 : list bitU;
     ID_AA64ISAR0_EL1 : list bitU;
     ID_AA64ISAR1_EL1 : list bitU;
     ID_AA64MMFR0_EL1 : list bitU;
     ID_AA64MMFR1_EL1 : list bitU;
     ID_AA64MMFR2_EL1 : list bitU;
     ID_AA64PFR0_EL1 : list bitU;
     ID_AA64PFR1_EL1 : list bitU;
     ID_AFR0_EL1 : list bitU;
     ID_DFR0_EL1 : list bitU;
     ID_ISAR0_EL1 : list bitU;
     ID_ISAR1_EL1 : list bitU;
     ID_ISAR2_EL1 : list bitU;
     ID_ISAR3_EL1 : list bitU;
     ID_ISAR4_EL1 : list bitU;
     ID_ISAR5_EL1 : list bitU;
     ID_ISAR6_EL1 : list bitU;
     ID_MMFR0_EL1 : list bitU;
     ID_MMFR1_EL1 : list bitU;
     ID_MMFR2_EL1 : list bitU;
     ID_MMFR3_EL1 : list bitU;
     ID_MMFR4_EL1 : list bitU;
     ID_PFR0_EL1 : list bitU;
     ID_PFR1_EL1 : list bitU;
     ID_PFR2_EL1 : list bitU;
     ISR_EL1 : list bitU;
     LORC_EL1 : list bitU;
     LOREA_EL1 : list bitU;
     LORID_EL1 : list bitU;
     LORN_EL1 : list bitU;
     LORSA_EL1 : list bitU;
     MDCCINT_EL1 : list bitU;
     MDCCSR_EL0 : list bitU;
     MDRAR_EL1 : list bitU;
     MIDR_EL1 : list bitU;
     MVFR0_EL1 : list bitU;
     MVFR1_EL1 : list bitU;
     MVFR2_EL1 : list bitU;
     NSACR : list bitU;
     OSDTRRX_EL1 : list bitU;
     OSDTRTX_EL1 : list bitU;
     OSECCR_EL1 : list bitU;
     OSLAR_EL1 : list bitU;
     PAR_EL1 : list bitU;
     PAR_S : list bitU;
     PMCCFILTR_EL0 : list bitU;
     PMCCNTR_EL0 : list bitU;
     PMCEID0_EL0 : list bitU;
     PMCEID1_EL0 : list bitU;
     PMCNTENCLR_EL0 : list bitU;
     PMCNTENSET_EL0 : list bitU;
     PMCR_EL0 : list bitU;
     PMEVCNTR_EL0 : list (list bitU);
     PMEVTYPER_EL0 : list (list bitU);
     PMINTENCLR_EL1 : list bitU;
     PMINTENSET_EL1 : list bitU;
     PMLSR : list bitU;
     PMMIR : list bitU;
     PMMIR_EL1 : list bitU;
     PMOVSCLR_EL0 : list bitU;
     PMOVSSET_EL0 : list bitU;
     PMPCSR : list bitU;
     PMSELR_EL0 : list bitU;
     PMSWINC_EL0 : list bitU;
     PMUSERENR_EL0 : list bitU;
     PMVIDSR : list bitU;
     PMXEVCNTR_EL0 : list bitU;
     PMXEVTYPER_EL0 : list bitU;
     RC : list (list bitU);
     RD_EL0 : list bitU;
     REVIDR_EL1 : list bitU;
     RGSR_EL1 : list bitU;
     RMR_EL1 : list bitU;
     RMR_EL2 : list bitU;
     RMR_EL3 : list bitU;
     RMUID_EL0 : list bitU;
     RNDR : list bitU;
     RNDRRS : list bitU;
     RVBAR : list bitU;
     RVBAR_EL1 : list bitU;
     RVBAR_EL2 : list bitU;
     RVBAR_EL3 : list bitU;
     SCXTNUM_EL0 : list bitU;
     SCXTNUM_EL1 : list bitU;
     SCXTNUM_EL2 : list bitU;
     SCXTNUM_EL3 : list bitU;
     SDER32_EL2 : list bitU;
     SPSR_EL0 : list bitU;
     SP_EL0 : list bitU;
     SP_EL1 : list bitU;
     SP_EL2 : list bitU;
     SP_EL3 : list bitU;
     ShouldAdvanceIT : bool;
     TLBTR : list bitU;
     TPIDRRO_EL0 : list bitU;
     TPIDR_EL0 : list bitU;
     TPIDR_EL1 : list bitU;
     TPIDR_EL2 : list bitU;
     TPIDR_EL3 : list bitU;
     TRFCR_EL1 : list bitU;
     TRFCR_EL2 : list bitU;
     VBAR_EL0 : list bitU;
     VDISR_EL2 : list bitU;
     VMPIDR_EL2 : list bitU;
     VNCR_EL2 : list bitU;
     VPIDR_EL2 : list bitU;
     _V : list (list bitU);
     __currentCond : list bitU;
     __exclusive_block_address : list bitU;
     __saved_exception_level : list bitU;
     __unconditional : bool;
     CONTEXTIDR_S : list bitU;
     _GTEExtObsAccess : list (list bitU);
     _GTEExtObsAddress : list (list bitU);
     _GTEExtObsData : list (list bitU);
     _GTEExtObsResult : list (list bitU);
     _GTEExtObsActive : list bool;
     _GTEExtObsCount : list ii;
     _GTEExtObsIndex : list ii;
     _GTEExtObsResultIndex : list ii;
     _GTEExtObsResultIsAddress : list bool;
     _GTEListParam0 : list (list bitU);
     _GTEListParam1 : list (list bitU);
     _GTEParam : list (list bitU);
     _GTE_AS_RecordedAccess : list (list bitU);
     _GTE_AS_RecordedAddress : list (list bitU);
     _GTE_AS_RecordedData : list (list bitU);
     _GTE_PPU_Access : list (list bitU);
     _GTE_PPU_Address : list (list bitU);
     _GTE_PPU_SizeEn : list (list bitU);
     TCR_EL2 : list bitU;
     AbortRgn64Hi1 : list bitU;
     AbortRgn64Hi1_Hi : list bitU;
     AbortRgn64Hi2 : list bitU;
     AbortRgn64Hi2_Hi : list bitU;
     AbortRgn64Lo1 : list bitU;
     AbortRgn64Lo1_Hi : list bitU;
     AbortRgn64Lo2 : list bitU;
     AbortRgn64Lo2_Hi : list bitU;
     CNTCR : list bitU;
     CNTCV : list bitU;
     CNTFID0 : list bitU;
     CNTSR : list bitU;
     CONTEXTIDR_EL1 : list bitU;
     CONTEXTIDR_EL2 : list bitU;
     DACR32_EL2 : list bitU;
     DACR_S : list bitU;
     DBGBCR : list (list bitU);
     DBGBCR_EL1 : list (list bitU);
     DBGBVR : list (list bitU);
     DBGBVR_EL1 : list (list bitU);
     DBGBXVR : list (list bitU);
     DBGDIDR : list bitU;
     DBGEN : signal;
     DBGPRCR_EL1 : list bitU;
     DBGVCR32_EL2 : list bitU;
     DBGWCR : list (list bitU);
     DBGWCR_EL1 : list (list bitU);
     DBGWVR : list (list bitU);
     DBGWVR_EL1 : list (list bitU);
     DFSR_S : list bitU;
     DLR_EL0 : list bitU;
     DSPSR_EL0 : list bitU;
     EDSCR : list bitU;
     ELR_EL1 : list bitU;
     ELR_EL2 : list bitU;
     ELR_EL3 : list bitU;
     ESR_EL1 : list bitU;
     ESR_EL2 : list bitU;
     ESR_EL3 : list bitU;
     FAR_EL1 : list bitU;
     FAR_EL2 : list bitU;
     FAR_EL3 : list bitU;
     HCR_EL2 : list bitU;
     HPFAR_EL2 : list bitU;
     ID_AA64DFR0_EL1 : list bitU;
     IFSR32_EL2 : list bitU;
     IFSR_S : list bitU;
     InGuardedPage : bool;
     LR_mon : list bitU;
     MAIR0_S : list bitU;
     MAIR1_S : list bitU;
     MAIR_EL1 : list bitU;
     MAIR_EL2 : list bitU;
     MAIR_EL3 : list bitU;
     MDCR_EL2 : list bitU;
     MDCR_EL3 : list bitU;
     MDSCR_EL1 : list bitU;
     MPAM0_EL1 : list bitU;
     MPAM1_EL1 : list bitU;
     MPAM2_EL2 : list bitU;
     MPAM3_EL3 : list bitU;
     MPAMHCR_EL2 : list bitU;
     MPAMIDR_EL1 : list bitU;
     MPAMVPM0_EL2 : list bitU;
     MPAMVPM1_EL2 : list bitU;
     MPAMVPM2_EL2 : list bitU;
     MPAMVPM3_EL2 : list bitU;
     MPAMVPM4_EL2 : list bitU;
     MPAMVPM5_EL2 : list bitU;
     MPAMVPM6_EL2 : list bitU;
     MPAMVPM7_EL2 : list bitU;
     MPAMVPMV_EL2 : list bitU;
     MPIDR_EL1 : list bitU;
     MVBAR : list bitU;
     NMRR_S : list bitU;
     OSDLR_EL1 : list bitU;
     OSLSR_EL1 : list bitU;
     PRRR_S : list bitU;
     PSTATE : ProcState;
     SCR_EL3 : list bitU;
     SCTLR_EL1 : list bitU;
     SCTLR_EL2 : list bitU;
     SCTLR_EL3 : list bitU;
     SCTLR_S : list bitU;
     SDER32_EL3 : list bitU;
     SPIDEN : signal;
     SPSR_EL1 : list bitU;
     SPSR_EL2 : list bitU;
     SPSR_EL3 : list bitU;
     SPSR_abt : list bitU;
     SPSR_fiq : list bitU;
     SPSR_irq : list bitU;
     SPSR_und : list bitU;
     SP_mon : list bitU;
     ScheduledFIQ : bool;
     ScheduledIRQ : bool;
     TCR_EL1 : list bitU;
     TCR_EL3 : list bitU;
     TFSRE0_EL1 : list bitU;
     TFSR_EL1 : list bitU;
     TFSR_EL2 : list bitU;
     TFSR_EL3 : list bitU;
     TLBHits : ii;
     TLBMisses : ii;
     TTBCR2_S : list bitU;
     TTBCR_S : list bitU;
     TTBR0_EL1 : list bitU;
     TTBR0_EL2 : list bitU;
     TTBR0_EL3 : list bitU;
     TTBR0_S : list bitU;
     TTBR1_EL1 : list bitU;
     TTBR1_EL2 : list bitU;
     TTBR1_S : list bitU;
     VBAR_EL1 : list bitU;
     VBAR_EL2 : list bitU;
     VBAR_EL3 : list bitU;
     VBAR_S : list bitU;
     VSESR_EL2 : list bitU;
     VSTCR_EL2 : list bitU;
     VSTTBR_EL2 : list bitU;
     VTCR_EL2 : list bitU;
     VTTBR_EL2 : list bitU;
     _AXIAbortCtl : list bitU;
     _ClearFIQ : list bitU;
     _ClearIRQ : list bitU;
     _FIQPending : bool;
     _GTEActive : bool;
     _GTECurrentAPI : list bitU;
     _GTEHaveParamLo : bool;
     _GTEListParam : ii;
     _GTEListParamIndex : ii;
     _GTEListParamTerminator : list bitU;
     _GTEListParamTerminatorCount : ii;
     _GTEListParamTerminators : ii;
     _GTEParamCount : ii;
     _GTEParamLo : list bitU;
     _GTEParamType : GTEParamType;
     _GTEParamsComplete : bool;
     _GTEStatus : list bitU;
     _GTE_AS_Access : list bitU;
     _GTE_AS_AccessCount : ii;
     _GTE_AS_Address : list bitU;
     _GTE_AS_Size : list bitU;
     _IRQPending : bool;
     _PC : list bitU;
     _PPURACR : list bitU;
     _PPURBAR : list bitU;
     _PPURSER : list bitU;
     _PendingPhysicalSE : bool;
     _R : list (list bitU);
     _ScheduleFIQ : list bitU;
     _ScheduleIRQ : list bitU;
     _TLB : list TLBLine;
     _TargetCPU : list bitU;
     __CNTControlBase : list bitU;
     __LSISyndrome : list bitU;
     __PC_changed : bool;
     __currentInstr : list bitU;
     __currentInstrLength : ii;
     __defaultRAM : list bitU;
     __highest_el_aarch32 : bool; |>




val GTEParamType_of_regval : register_value -> maybe GTEParamType

let GTEParamType_of_regval merge_var =
   match merge_var with | Regval_GTEParamType (v) -> Just v | g__6 -> Nothing end

val regval_of_GTEParamType : GTEParamType -> register_value

let regval_of_GTEParamType v = Regval_GTEParamType v

val ProcState_of_regval : register_value -> maybe ProcState

let ProcState_of_regval merge_var =
   match merge_var with | Regval_ProcState (v) -> Just v | g__5 -> Nothing end

val regval_of_ProcState : ProcState -> register_value

let regval_of_ProcState v = Regval_ProcState v

val TLBLine_of_regval : register_value -> maybe TLBLine

let TLBLine_of_regval merge_var =
   match merge_var with | Regval_TLBLine (v) -> Just v | g__4 -> Nothing end

val regval_of_TLBLine : TLBLine -> register_value

let regval_of_TLBLine v = Regval_TLBLine v

val bit_of_regval : register_value -> maybe bitU

let bit_of_regval merge_var = match merge_var with | Regval_bit (v) -> Just v | g__3 -> Nothing end

val regval_of_bit : bitU -> register_value

let regval_of_bit v = Regval_bit v

val bool_of_regval : register_value -> maybe bool

let bool_of_regval merge_var =
   match merge_var with | Regval_bool (v) -> Just v | g__2 -> Nothing end

val regval_of_bool : bool -> register_value

let regval_of_bool v = Regval_bool v

val int_of_regval : register_value -> maybe ii

let int_of_regval merge_var = match merge_var with | Regval_int (v) -> Just v | g__1 -> Nothing end

val regval_of_int : ii -> register_value

let regval_of_int v = Regval_int v

val signal_of_regval : register_value -> maybe signal

let signal_of_regval merge_var =
   match merge_var with | Regval_signal (v) -> Just v | g__0 -> Nothing end

val regval_of_signal : signal -> register_value

let regval_of_signal v = Regval_signal v



val vector_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)
let vector_of_regval of_regval = function
  | Regval_vector (_, _, v) -> just_list (List.map of_regval v)
  | _ -> Nothing
end

val regval_of_vector : forall 'a. ('a -> register_value) -> integer -> bool -> list 'a -> register_value
let regval_of_vector regval_of size is_inc xs = Regval_vector (size, is_inc, List.map regval_of xs)

val list_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (list 'a)
let list_of_regval of_regval = function
  | Regval_list v -> just_list (List.map of_regval v)
  | _ -> Nothing
end

val regval_of_list : forall 'a. ('a -> register_value) -> list 'a -> register_value
let regval_of_list regval_of xs = Regval_list (List.map regval_of xs)

val option_of_regval : forall 'a. (register_value -> maybe 'a) -> register_value -> maybe (maybe 'a)
let option_of_regval of_regval = function
  | Regval_option v -> Just (Maybe.bind v of_regval)
  | _ -> Nothing
end

val regval_of_option : forall 'a. ('a -> register_value) -> maybe 'a -> register_value
let regval_of_option regval_of v = Regval_option (Maybe.map regval_of v)


let CNTHCTL_EL2_ref = <|
  name = "CNTHCTL_EL2";
  read_from = (fun s -> s.CNTHCTL_EL2);
  write_to = (fun v s -> (<| s with CNTHCTL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CPTR_EL2_ref = <|
  name = "CPTR_EL2";
  read_from = (fun s -> s.CPTR_EL2);
  write_to = (fun v s -> (<| s with CPTR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CCSIDR_EL1_ref = <|
  name = "CCSIDR_EL1";
  read_from = (fun s -> s.CCSIDR_EL1);
  write_to = (fun v s -> (<| s with CCSIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ACTLR_EL1_ref = <|
  name = "ACTLR_EL1";
  read_from = (fun s -> s.ACTLR_EL1);
  write_to = (fun v s -> (<| s with ACTLR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ACTLR_EL2_ref = <|
  name = "ACTLR_EL2";
  read_from = (fun s -> s.ACTLR_EL2);
  write_to = (fun v s -> (<| s with ACTLR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ACTLR_EL3_ref = <|
  name = "ACTLR_EL3";
  read_from = (fun s -> s.ACTLR_EL3);
  write_to = (fun v s -> (<| s with ACTLR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let AFSR0_EL1_ref = <|
  name = "AFSR0_EL1";
  read_from = (fun s -> s.AFSR0_EL1);
  write_to = (fun v s -> (<| s with AFSR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AFSR0_EL2_ref = <|
  name = "AFSR0_EL2";
  read_from = (fun s -> s.AFSR0_EL2);
  write_to = (fun v s -> (<| s with AFSR0_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AFSR0_EL3_ref = <|
  name = "AFSR0_EL3";
  read_from = (fun s -> s.AFSR0_EL3);
  write_to = (fun v s -> (<| s with AFSR0_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AFSR1_EL1_ref = <|
  name = "AFSR1_EL1";
  read_from = (fun s -> s.AFSR1_EL1);
  write_to = (fun v s -> (<| s with AFSR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AFSR1_EL2_ref = <|
  name = "AFSR1_EL2";
  read_from = (fun s -> s.AFSR1_EL2);
  write_to = (fun v s -> (<| s with AFSR1_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AFSR1_EL3_ref = <|
  name = "AFSR1_EL3";
  read_from = (fun s -> s.AFSR1_EL3);
  write_to = (fun v s -> (<| s with AFSR1_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AIDR_EL1_ref = <|
  name = "AIDR_EL1";
  read_from = (fun s -> s.AIDR_EL1);
  write_to = (fun v s -> (<| s with AIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AMAIR_EL1_ref = <|
  name = "AMAIR_EL1";
  read_from = (fun s -> s.AMAIR_EL1);
  write_to = (fun v s -> (<| s with AMAIR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let AMAIR_EL2_ref = <|
  name = "AMAIR_EL2";
  read_from = (fun s -> s.AMAIR_EL2);
  write_to = (fun v s -> (<| s with AMAIR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let AMAIR_EL3_ref = <|
  name = "AMAIR_EL3";
  read_from = (fun s -> s.AMAIR_EL3);
  write_to = (fun v s -> (<| s with AMAIR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APDAKeyHi_EL1_ref = <|
  name = "APDAKeyHi_EL1";
  read_from = (fun s -> s.APDAKeyHi_EL1);
  write_to = (fun v s -> (<| s with APDAKeyHi_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APDAKeyLo_EL1_ref = <|
  name = "APDAKeyLo_EL1";
  read_from = (fun s -> s.APDAKeyLo_EL1);
  write_to = (fun v s -> (<| s with APDAKeyLo_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APDBKeyHi_EL1_ref = <|
  name = "APDBKeyHi_EL1";
  read_from = (fun s -> s.APDBKeyHi_EL1);
  write_to = (fun v s -> (<| s with APDBKeyHi_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APDBKeyLo_EL1_ref = <|
  name = "APDBKeyLo_EL1";
  read_from = (fun s -> s.APDBKeyLo_EL1);
  write_to = (fun v s -> (<| s with APDBKeyLo_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APGAKeyHi_EL1_ref = <|
  name = "APGAKeyHi_EL1";
  read_from = (fun s -> s.APGAKeyHi_EL1);
  write_to = (fun v s -> (<| s with APGAKeyHi_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APGAKeyLo_EL1_ref = <|
  name = "APGAKeyLo_EL1";
  read_from = (fun s -> s.APGAKeyLo_EL1);
  write_to = (fun v s -> (<| s with APGAKeyLo_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APIAKeyHi_EL1_ref = <|
  name = "APIAKeyHi_EL1";
  read_from = (fun s -> s.APIAKeyHi_EL1);
  write_to = (fun v s -> (<| s with APIAKeyHi_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APIAKeyLo_EL1_ref = <|
  name = "APIAKeyLo_EL1";
  read_from = (fun s -> s.APIAKeyLo_EL1);
  write_to = (fun v s -> (<| s with APIAKeyLo_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APIBKeyHi_EL1_ref = <|
  name = "APIBKeyHi_EL1";
  read_from = (fun s -> s.APIBKeyHi_EL1);
  write_to = (fun v s -> (<| s with APIBKeyHi_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let APIBKeyLo_EL1_ref = <|
  name = "APIBKeyLo_EL1";
  read_from = (fun s -> s.APIBKeyLo_EL1);
  write_to = (fun v s -> (<| s with APIBKeyLo_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let BTypeCompatible_ref = <|
  name = "BTypeCompatible";
  read_from = (fun s -> s.BTypeCompatible);
  write_to = (fun v s -> (<| s with BTypeCompatible = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let BTypeNext_ref = <|
  name = "BTypeNext";
  read_from = (fun s -> s.BTypeNext);
  write_to = (fun v s -> (<| s with BTypeNext = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 2 false v) |>

let CCSIDR2_EL1_ref = <|
  name = "CCSIDR2_EL1";
  read_from = (fun s -> s.CCSIDR2_EL1);
  write_to = (fun v s -> (<| s with CCSIDR2_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CLIDR_EL1_ref = <|
  name = "CLIDR_EL1";
  read_from = (fun s -> s.CLIDR_EL1);
  write_to = (fun v s -> (<| s with CLIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTFRQ_EL0_ref = <|
  name = "CNTFRQ_EL0";
  read_from = (fun s -> s.CNTFRQ_EL0);
  write_to = (fun v s -> (<| s with CNTFRQ_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHPS_CTL_EL2_ref = <|
  name = "CNTHPS_CTL_EL2";
  read_from = (fun s -> s.CNTHPS_CTL_EL2);
  write_to = (fun v s -> (<| s with CNTHPS_CTL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHPS_CVAL_EL2_ref = <|
  name = "CNTHPS_CVAL_EL2";
  read_from = (fun s -> s.CNTHPS_CVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHPS_CVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTHPS_TVAL_EL2_ref = <|
  name = "CNTHPS_TVAL_EL2";
  read_from = (fun s -> s.CNTHPS_TVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHPS_TVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHP_CTL_EL2_ref = <|
  name = "CNTHP_CTL_EL2";
  read_from = (fun s -> s.CNTHP_CTL_EL2);
  write_to = (fun v s -> (<| s with CNTHP_CTL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHP_CVAL_EL2_ref = <|
  name = "CNTHP_CVAL_EL2";
  read_from = (fun s -> s.CNTHP_CVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHP_CVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTHP_TVAL_EL2_ref = <|
  name = "CNTHP_TVAL_EL2";
  read_from = (fun s -> s.CNTHP_TVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHP_TVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHVS_CTL_EL2_ref = <|
  name = "CNTHVS_CTL_EL2";
  read_from = (fun s -> s.CNTHVS_CTL_EL2);
  write_to = (fun v s -> (<| s with CNTHVS_CTL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHVS_CVAL_EL2_ref = <|
  name = "CNTHVS_CVAL_EL2";
  read_from = (fun s -> s.CNTHVS_CVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHVS_CVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTHVS_TVAL_EL2_ref = <|
  name = "CNTHVS_TVAL_EL2";
  read_from = (fun s -> s.CNTHVS_TVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHVS_TVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHV_CTL_EL2_ref = <|
  name = "CNTHV_CTL_EL2";
  read_from = (fun s -> s.CNTHV_CTL_EL2);
  write_to = (fun v s -> (<| s with CNTHV_CTL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTHV_CVAL_EL2_ref = <|
  name = "CNTHV_CVAL_EL2";
  read_from = (fun s -> s.CNTHV_CVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHV_CVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTHV_TVAL_EL2_ref = <|
  name = "CNTHV_TVAL_EL2";
  read_from = (fun s -> s.CNTHV_TVAL_EL2);
  write_to = (fun v s -> (<| s with CNTHV_TVAL_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTKCTL_EL1_ref = <|
  name = "CNTKCTL_EL1";
  read_from = (fun s -> s.CNTKCTL_EL1);
  write_to = (fun v s -> (<| s with CNTKCTL_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTPCT_EL0_ref = <|
  name = "CNTPCT_EL0";
  read_from = (fun s -> s.CNTPCT_EL0);
  write_to = (fun v s -> (<| s with CNTPCT_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTPS_CTL_EL1_ref = <|
  name = "CNTPS_CTL_EL1";
  read_from = (fun s -> s.CNTPS_CTL_EL1);
  write_to = (fun v s -> (<| s with CNTPS_CTL_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTPS_CVAL_EL1_ref = <|
  name = "CNTPS_CVAL_EL1";
  read_from = (fun s -> s.CNTPS_CVAL_EL1);
  write_to = (fun v s -> (<| s with CNTPS_CVAL_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTPS_TVAL_EL1_ref = <|
  name = "CNTPS_TVAL_EL1";
  read_from = (fun s -> s.CNTPS_TVAL_EL1);
  write_to = (fun v s -> (<| s with CNTPS_TVAL_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTP_CTL_EL0_ref = <|
  name = "CNTP_CTL_EL0";
  read_from = (fun s -> s.CNTP_CTL_EL0);
  write_to = (fun v s -> (<| s with CNTP_CTL_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTP_CTL_S_ref = <|
  name = "CNTP_CTL_S";
  read_from = (fun s -> s.CNTP_CTL_S);
  write_to = (fun v s -> (<| s with CNTP_CTL_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTP_CVAL_EL0_ref = <|
  name = "CNTP_CVAL_EL0";
  read_from = (fun s -> s.CNTP_CVAL_EL0);
  write_to = (fun v s -> (<| s with CNTP_CVAL_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTP_TVAL_EL0_ref = <|
  name = "CNTP_TVAL_EL0";
  read_from = (fun s -> s.CNTP_TVAL_EL0);
  write_to = (fun v s -> (<| s with CNTP_TVAL_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTVCT_EL0_ref = <|
  name = "CNTVCT_EL0";
  read_from = (fun s -> s.CNTVCT_EL0);
  write_to = (fun v s -> (<| s with CNTVCT_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTVOFF_EL2_ref = <|
  name = "CNTVOFF_EL2";
  read_from = (fun s -> s.CNTVOFF_EL2);
  write_to = (fun v s -> (<| s with CNTVOFF_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTV_CTL_EL0_ref = <|
  name = "CNTV_CTL_EL0";
  read_from = (fun s -> s.CNTV_CTL_EL0);
  write_to = (fun v s -> (<| s with CNTV_CTL_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTV_CVAL_EL0_ref = <|
  name = "CNTV_CVAL_EL0";
  read_from = (fun s -> s.CNTV_CVAL_EL0);
  write_to = (fun v s -> (<| s with CNTV_CVAL_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTV_TVAL_EL0_ref = <|
  name = "CNTV_TVAL_EL0";
  read_from = (fun s -> s.CNTV_TVAL_EL0);
  write_to = (fun v s -> (<| s with CNTV_TVAL_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CPACR_EL1_ref = <|
  name = "CPACR_EL1";
  read_from = (fun s -> s.CPACR_EL1);
  write_to = (fun v s -> (<| s with CPACR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CPTR_EL3_ref = <|
  name = "CPTR_EL3";
  read_from = (fun s -> s.CPTR_EL3);
  write_to = (fun v s -> (<| s with CPTR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CSSELR_EL1_ref = <|
  name = "CSSELR_EL1";
  read_from = (fun s -> s.CSSELR_EL1);
  write_to = (fun v s -> (<| s with CSSELR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CSSELR_S_ref = <|
  name = "CSSELR_S";
  read_from = (fun s -> s.CSSELR_S);
  write_to = (fun v s -> (<| s with CSSELR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CTR_EL0_ref = <|
  name = "CTR_EL0";
  read_from = (fun s -> s.CTR_EL0);
  write_to = (fun v s -> (<| s with CTR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let DBGAUTHSTATUS_EL1_ref = <|
  name = "DBGAUTHSTATUS_EL1";
  read_from = (fun s -> s.DBGAUTHSTATUS_EL1);
  write_to = (fun v s -> (<| s with DBGAUTHSTATUS_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGCLAIMCLR_EL1_ref = <|
  name = "DBGCLAIMCLR_EL1";
  read_from = (fun s -> s.DBGCLAIMCLR_EL1);
  write_to = (fun v s -> (<| s with DBGCLAIMCLR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGCLAIMSET_EL1_ref = <|
  name = "DBGCLAIMSET_EL1";
  read_from = (fun s -> s.DBGCLAIMSET_EL1);
  write_to = (fun v s -> (<| s with DBGCLAIMSET_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGDEVID1_ref = <|
  name = "DBGDEVID1";
  read_from = (fun s -> s.DBGDEVID1);
  write_to = (fun v s -> (<| s with DBGDEVID1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGDEVID2_ref = <|
  name = "DBGDEVID2";
  read_from = (fun s -> s.DBGDEVID2);
  write_to = (fun v s -> (<| s with DBGDEVID2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGDSCRint_ref = <|
  name = "DBGDSCRint";
  read_from = (fun s -> s.DBGDSCRint);
  write_to = (fun v s -> (<| s with DBGDSCRint = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGDTRRX_EL0_ref = <|
  name = "DBGDTRRX_EL0";
  read_from = (fun s -> s.DBGDTRRX_EL0);
  write_to = (fun v s -> (<| s with DBGDTRRX_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGDTRTX_EL0_ref = <|
  name = "DBGDTRTX_EL0";
  read_from = (fun s -> s.DBGDTRTX_EL0);
  write_to = (fun v s -> (<| s with DBGDTRTX_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGDTR_EL0_ref = <|
  name = "DBGDTR_EL0";
  read_from = (fun s -> s.DBGDTR_EL0);
  write_to = (fun v s -> (<| s with DBGDTR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let DBGWFAR_ref = <|
  name = "DBGWFAR";
  read_from = (fun s -> s.DBGWFAR);
  write_to = (fun v s -> (<| s with DBGWFAR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DCZID_EL0_ref = <|
  name = "DCZID_EL0";
  read_from = (fun s -> s.DCZID_EL0);
  write_to = (fun v s -> (<| s with DCZID_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DISR_EL1_ref = <|
  name = "DISR_EL1";
  read_from = (fun s -> s.DISR_EL1);
  write_to = (fun v s -> (<| s with DISR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let EDECCR_ref = <|
  name = "EDECCR";
  read_from = (fun s -> s.EDECCR);
  write_to = (fun v s -> (<| s with EDECCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDECR_ref = <|
  name = "EDECR";
  read_from = (fun s -> s.EDECR);
  write_to = (fun v s -> (<| s with EDECR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDESR_ref = <|
  name = "EDESR";
  read_from = (fun s -> s.EDESR);
  write_to = (fun v s -> (<| s with EDESR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDLSR_ref = <|
  name = "EDLSR";
  read_from = (fun s -> s.EDLSR);
  write_to = (fun v s -> (<| s with EDLSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDPCSR_ref = <|
  name = "EDPCSR";
  read_from = (fun s -> s.EDPCSR);
  write_to = (fun v s -> (<| s with EDPCSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let EDPFR_ref = <|
  name = "EDPFR";
  read_from = (fun s -> s.EDPFR);
  write_to = (fun v s -> (<| s with EDPFR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let EDPRCR_ref = <|
  name = "EDPRCR";
  read_from = (fun s -> s.EDPRCR);
  write_to = (fun v s -> (<| s with EDPRCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDPRSR_ref = <|
  name = "EDPRSR";
  read_from = (fun s -> s.EDPRSR);
  write_to = (fun v s -> (<| s with EDPRSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDVIDSR_ref = <|
  name = "EDVIDSR";
  read_from = (fun s -> s.EDVIDSR);
  write_to = (fun v s -> (<| s with EDVIDSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ELR_EL0_ref = <|
  name = "ELR_EL0";
  read_from = (fun s -> s.ELR_EL0);
  write_to = (fun v s -> (<| s with ELR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ESP_EL0_ref = <|
  name = "ESP_EL0";
  read_from = (fun s -> s.ESP_EL0);
  write_to = (fun v s -> (<| s with ESP_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ESR_EL0_ref = <|
  name = "ESR_EL0";
  read_from = (fun s -> s.ESR_EL0);
  write_to = (fun v s -> (<| s with ESR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EventRegister_ref = <|
  name = "EventRegister";
  read_from = (fun s -> s.EventRegister);
  write_to = (fun v s -> (<| s with EventRegister = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 1 false v) |>

let FAR_EL0_ref = <|
  name = "FAR_EL0";
  read_from = (fun s -> s.FAR_EL0);
  write_to = (fun v s -> (<| s with FAR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let FCSEIDR_ref = <|
  name = "FCSEIDR";
  read_from = (fun s -> s.FCSEIDR);
  write_to = (fun v s -> (<| s with FCSEIDR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let FPCR_ref = <|
  name = "FPCR";
  read_from = (fun s -> s.FPCR);
  write_to = (fun v s -> (<| s with FPCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let FPEXC32_EL2_ref = <|
  name = "FPEXC32_EL2";
  read_from = (fun s -> s.FPEXC32_EL2);
  write_to = (fun v s -> (<| s with FPEXC32_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let FPSCR_ref = <|
  name = "FPSCR";
  read_from = (fun s -> s.FPSCR);
  write_to = (fun v s -> (<| s with FPSCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let FPSID_ref = <|
  name = "FPSID";
  read_from = (fun s -> s.FPSID);
  write_to = (fun v s -> (<| s with FPSID = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let FPSR_ref = <|
  name = "FPSR";
  read_from = (fun s -> s.FPSR);
  write_to = (fun v s -> (<| s with FPSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let GCR_EL1_ref = <|
  name = "GCR_EL1";
  read_from = (fun s -> s.GCR_EL1);
  write_to = (fun v s -> (<| s with GCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let HACR_EL2_ref = <|
  name = "HACR_EL2";
  read_from = (fun s -> s.HACR_EL2);
  write_to = (fun v s -> (<| s with HACR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let HSTR_EL2_ref = <|
  name = "HSTR_EL2";
  read_from = (fun s -> s.HSTR_EL2);
  write_to = (fun v s -> (<| s with HSTR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_AP0R_EL1_ref = <|
  name = "ICC_AP0R_EL1";
  read_from = (fun s -> s.ICC_AP0R_EL1);
  write_to = (fun v s -> (<| s with ICC_AP0R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 5 false v) |>

let ICC_AP1R_EL1_ref = <|
  name = "ICC_AP1R_EL1";
  read_from = (fun s -> s.ICC_AP1R_EL1);
  write_to = (fun v s -> (<| s with ICC_AP1R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 5 false v) |>

let ICC_ASGI1R_EL1_ref = <|
  name = "ICC_ASGI1R_EL1";
  read_from = (fun s -> s.ICC_ASGI1R_EL1);
  write_to = (fun v s -> (<| s with ICC_ASGI1R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ICC_BPR0_EL1_ref = <|
  name = "ICC_BPR0_EL1";
  read_from = (fun s -> s.ICC_BPR0_EL1);
  write_to = (fun v s -> (<| s with ICC_BPR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_BPR1_EL1_NS_ref = <|
  name = "ICC_BPR1_EL1_NS";
  read_from = (fun s -> s.ICC_BPR1_EL1_NS);
  write_to = (fun v s -> (<| s with ICC_BPR1_EL1_NS = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_BPR1_EL1_S_ref = <|
  name = "ICC_BPR1_EL1_S";
  read_from = (fun s -> s.ICC_BPR1_EL1_S);
  write_to = (fun v s -> (<| s with ICC_BPR1_EL1_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_CTLR_EL1_NS_ref = <|
  name = "ICC_CTLR_EL1_NS";
  read_from = (fun s -> s.ICC_CTLR_EL1_NS);
  write_to = (fun v s -> (<| s with ICC_CTLR_EL1_NS = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_CTLR_EL1_S_ref = <|
  name = "ICC_CTLR_EL1_S";
  read_from = (fun s -> s.ICC_CTLR_EL1_S);
  write_to = (fun v s -> (<| s with ICC_CTLR_EL1_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_CTLR_EL3_ref = <|
  name = "ICC_CTLR_EL3";
  read_from = (fun s -> s.ICC_CTLR_EL3);
  write_to = (fun v s -> (<| s with ICC_CTLR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_DIR_EL1_ref = <|
  name = "ICC_DIR_EL1";
  read_from = (fun s -> s.ICC_DIR_EL1);
  write_to = (fun v s -> (<| s with ICC_DIR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_EOIR0_EL1_ref = <|
  name = "ICC_EOIR0_EL1";
  read_from = (fun s -> s.ICC_EOIR0_EL1);
  write_to = (fun v s -> (<| s with ICC_EOIR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_EOIR1_EL1_ref = <|
  name = "ICC_EOIR1_EL1";
  read_from = (fun s -> s.ICC_EOIR1_EL1);
  write_to = (fun v s -> (<| s with ICC_EOIR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_HPPIR0_EL1_ref = <|
  name = "ICC_HPPIR0_EL1";
  read_from = (fun s -> s.ICC_HPPIR0_EL1);
  write_to = (fun v s -> (<| s with ICC_HPPIR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_HPPIR1_EL1_ref = <|
  name = "ICC_HPPIR1_EL1";
  read_from = (fun s -> s.ICC_HPPIR1_EL1);
  write_to = (fun v s -> (<| s with ICC_HPPIR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_IAR0_EL1_ref = <|
  name = "ICC_IAR0_EL1";
  read_from = (fun s -> s.ICC_IAR0_EL1);
  write_to = (fun v s -> (<| s with ICC_IAR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_IAR1_EL1_ref = <|
  name = "ICC_IAR1_EL1";
  read_from = (fun s -> s.ICC_IAR1_EL1);
  write_to = (fun v s -> (<| s with ICC_IAR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_IGRPEN0_EL1_ref = <|
  name = "ICC_IGRPEN0_EL1";
  read_from = (fun s -> s.ICC_IGRPEN0_EL1);
  write_to = (fun v s -> (<| s with ICC_IGRPEN0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_IGRPEN1_EL1_NS_ref = <|
  name = "ICC_IGRPEN1_EL1_NS";
  read_from = (fun s -> s.ICC_IGRPEN1_EL1_NS);
  write_to = (fun v s -> (<| s with ICC_IGRPEN1_EL1_NS = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_IGRPEN1_EL1_S_ref = <|
  name = "ICC_IGRPEN1_EL1_S";
  read_from = (fun s -> s.ICC_IGRPEN1_EL1_S);
  write_to = (fun v s -> (<| s with ICC_IGRPEN1_EL1_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_IGRPEN1_EL3_ref = <|
  name = "ICC_IGRPEN1_EL3";
  read_from = (fun s -> s.ICC_IGRPEN1_EL3);
  write_to = (fun v s -> (<| s with ICC_IGRPEN1_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_PMR_EL1_ref = <|
  name = "ICC_PMR_EL1";
  read_from = (fun s -> s.ICC_PMR_EL1);
  write_to = (fun v s -> (<| s with ICC_PMR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_RPR_EL1_ref = <|
  name = "ICC_RPR_EL1";
  read_from = (fun s -> s.ICC_RPR_EL1);
  write_to = (fun v s -> (<| s with ICC_RPR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_SGI0R_EL1_ref = <|
  name = "ICC_SGI0R_EL1";
  read_from = (fun s -> s.ICC_SGI0R_EL1);
  write_to = (fun v s -> (<| s with ICC_SGI0R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ICC_SGI1R_EL1_ref = <|
  name = "ICC_SGI1R_EL1";
  read_from = (fun s -> s.ICC_SGI1R_EL1);
  write_to = (fun v s -> (<| s with ICC_SGI1R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ICC_SRE_EL1_NS_ref = <|
  name = "ICC_SRE_EL1_NS";
  read_from = (fun s -> s.ICC_SRE_EL1_NS);
  write_to = (fun v s -> (<| s with ICC_SRE_EL1_NS = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_SRE_EL1_S_ref = <|
  name = "ICC_SRE_EL1_S";
  read_from = (fun s -> s.ICC_SRE_EL1_S);
  write_to = (fun v s -> (<| s with ICC_SRE_EL1_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_SRE_EL2_ref = <|
  name = "ICC_SRE_EL2";
  read_from = (fun s -> s.ICC_SRE_EL2);
  write_to = (fun v s -> (<| s with ICC_SRE_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICC_SRE_EL3_ref = <|
  name = "ICC_SRE_EL3";
  read_from = (fun s -> s.ICC_SRE_EL3);
  write_to = (fun v s -> (<| s with ICC_SRE_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICH_AP0R_EL2_ref = <|
  name = "ICH_AP0R_EL2";
  read_from = (fun s -> s.ICH_AP0R_EL2);
  write_to = (fun v s -> (<| s with ICH_AP0R_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 5 false v) |>

let ICH_AP1R_EL2_ref = <|
  name = "ICH_AP1R_EL2";
  read_from = (fun s -> s.ICH_AP1R_EL2);
  write_to = (fun v s -> (<| s with ICH_AP1R_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 5 false v) |>

let ICH_EISR_EL2_ref = <|
  name = "ICH_EISR_EL2";
  read_from = (fun s -> s.ICH_EISR_EL2);
  write_to = (fun v s -> (<| s with ICH_EISR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICH_ELRSR_EL2_ref = <|
  name = "ICH_ELRSR_EL2";
  read_from = (fun s -> s.ICH_ELRSR_EL2);
  write_to = (fun v s -> (<| s with ICH_ELRSR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICH_HCR_EL2_ref = <|
  name = "ICH_HCR_EL2";
  read_from = (fun s -> s.ICH_HCR_EL2);
  write_to = (fun v s -> (<| s with ICH_HCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICH_MISR_EL2_ref = <|
  name = "ICH_MISR_EL2";
  read_from = (fun s -> s.ICH_MISR_EL2);
  write_to = (fun v s -> (<| s with ICH_MISR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICH_VMCR_EL2_ref = <|
  name = "ICH_VMCR_EL2";
  read_from = (fun s -> s.ICH_VMCR_EL2);
  write_to = (fun v s -> (<| s with ICH_VMCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICH_VTR_EL2_ref = <|
  name = "ICH_VTR_EL2";
  read_from = (fun s -> s.ICH_VTR_EL2);
  write_to = (fun v s -> (<| s with ICH_VTR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_AP0R_EL1_ref = <|
  name = "ICV_AP0R_EL1";
  read_from = (fun s -> s.ICV_AP0R_EL1);
  write_to = (fun v s -> (<| s with ICV_AP0R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 5 false v) |>

let ICV_AP1R_EL1_ref = <|
  name = "ICV_AP1R_EL1";
  read_from = (fun s -> s.ICV_AP1R_EL1);
  write_to = (fun v s -> (<| s with ICV_AP1R_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 5 false v) |>

let ICV_BPR0_EL1_ref = <|
  name = "ICV_BPR0_EL1";
  read_from = (fun s -> s.ICV_BPR0_EL1);
  write_to = (fun v s -> (<| s with ICV_BPR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_BPR1_EL1_ref = <|
  name = "ICV_BPR1_EL1";
  read_from = (fun s -> s.ICV_BPR1_EL1);
  write_to = (fun v s -> (<| s with ICV_BPR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_CTLR_EL1_ref = <|
  name = "ICV_CTLR_EL1";
  read_from = (fun s -> s.ICV_CTLR_EL1);
  write_to = (fun v s -> (<| s with ICV_CTLR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_DIR_EL1_ref = <|
  name = "ICV_DIR_EL1";
  read_from = (fun s -> s.ICV_DIR_EL1);
  write_to = (fun v s -> (<| s with ICV_DIR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_EOIR0_EL1_ref = <|
  name = "ICV_EOIR0_EL1";
  read_from = (fun s -> s.ICV_EOIR0_EL1);
  write_to = (fun v s -> (<| s with ICV_EOIR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_EOIR1_EL1_ref = <|
  name = "ICV_EOIR1_EL1";
  read_from = (fun s -> s.ICV_EOIR1_EL1);
  write_to = (fun v s -> (<| s with ICV_EOIR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_HPPIR0_EL1_ref = <|
  name = "ICV_HPPIR0_EL1";
  read_from = (fun s -> s.ICV_HPPIR0_EL1);
  write_to = (fun v s -> (<| s with ICV_HPPIR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_HPPIR1_EL1_ref = <|
  name = "ICV_HPPIR1_EL1";
  read_from = (fun s -> s.ICV_HPPIR1_EL1);
  write_to = (fun v s -> (<| s with ICV_HPPIR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_IAR0_EL1_ref = <|
  name = "ICV_IAR0_EL1";
  read_from = (fun s -> s.ICV_IAR0_EL1);
  write_to = (fun v s -> (<| s with ICV_IAR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_IAR1_EL1_ref = <|
  name = "ICV_IAR1_EL1";
  read_from = (fun s -> s.ICV_IAR1_EL1);
  write_to = (fun v s -> (<| s with ICV_IAR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_IGRPEN0_EL1_ref = <|
  name = "ICV_IGRPEN0_EL1";
  read_from = (fun s -> s.ICV_IGRPEN0_EL1);
  write_to = (fun v s -> (<| s with ICV_IGRPEN0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_IGRPEN1_EL1_ref = <|
  name = "ICV_IGRPEN1_EL1";
  read_from = (fun s -> s.ICV_IGRPEN1_EL1);
  write_to = (fun v s -> (<| s with ICV_IGRPEN1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_PMR_EL1_ref = <|
  name = "ICV_PMR_EL1";
  read_from = (fun s -> s.ICV_PMR_EL1);
  write_to = (fun v s -> (<| s with ICV_PMR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ICV_RPR_EL1_ref = <|
  name = "ICV_RPR_EL1";
  read_from = (fun s -> s.ICV_RPR_EL1);
  write_to = (fun v s -> (<| s with ICV_RPR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_AA64AFR0_EL1_ref = <|
  name = "ID_AA64AFR0_EL1";
  read_from = (fun s -> s.ID_AA64AFR0_EL1);
  write_to = (fun v s -> (<| s with ID_AA64AFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_AA64AFR1_EL1_ref = <|
  name = "ID_AA64AFR1_EL1";
  read_from = (fun s -> s.ID_AA64AFR1_EL1);
  write_to = (fun v s -> (<| s with ID_AA64AFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_AA64DFR1_EL1_ref = <|
  name = "ID_AA64DFR1_EL1";
  read_from = (fun s -> s.ID_AA64DFR1_EL1);
  write_to = (fun v s -> (<| s with ID_AA64DFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_AA64ISAR0_EL1_ref = <|
  name = "ID_AA64ISAR0_EL1";
  read_from = (fun s -> s.ID_AA64ISAR0_EL1);
  write_to = (fun v s -> (<| s with ID_AA64ISAR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ID_AA64ISAR1_EL1_ref = <|
  name = "ID_AA64ISAR1_EL1";
  read_from = (fun s -> s.ID_AA64ISAR1_EL1);
  write_to = (fun v s -> (<| s with ID_AA64ISAR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ID_AA64MMFR0_EL1_ref = <|
  name = "ID_AA64MMFR0_EL1";
  read_from = (fun s -> s.ID_AA64MMFR0_EL1);
  write_to = (fun v s -> (<| s with ID_AA64MMFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ID_AA64MMFR1_EL1_ref = <|
  name = "ID_AA64MMFR1_EL1";
  read_from = (fun s -> s.ID_AA64MMFR1_EL1);
  write_to = (fun v s -> (<| s with ID_AA64MMFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_AA64MMFR2_EL1_ref = <|
  name = "ID_AA64MMFR2_EL1";
  read_from = (fun s -> s.ID_AA64MMFR2_EL1);
  write_to = (fun v s -> (<| s with ID_AA64MMFR2_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ID_AA64PFR0_EL1_ref = <|
  name = "ID_AA64PFR0_EL1";
  read_from = (fun s -> s.ID_AA64PFR0_EL1);
  write_to = (fun v s -> (<| s with ID_AA64PFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ID_AA64PFR1_EL1_ref = <|
  name = "ID_AA64PFR1_EL1";
  read_from = (fun s -> s.ID_AA64PFR1_EL1);
  write_to = (fun v s -> (<| s with ID_AA64PFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_AFR0_EL1_ref = <|
  name = "ID_AFR0_EL1";
  read_from = (fun s -> s.ID_AFR0_EL1);
  write_to = (fun v s -> (<| s with ID_AFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_DFR0_EL1_ref = <|
  name = "ID_DFR0_EL1";
  read_from = (fun s -> s.ID_DFR0_EL1);
  write_to = (fun v s -> (<| s with ID_DFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR0_EL1_ref = <|
  name = "ID_ISAR0_EL1";
  read_from = (fun s -> s.ID_ISAR0_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR1_EL1_ref = <|
  name = "ID_ISAR1_EL1";
  read_from = (fun s -> s.ID_ISAR1_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR2_EL1_ref = <|
  name = "ID_ISAR2_EL1";
  read_from = (fun s -> s.ID_ISAR2_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR2_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR3_EL1_ref = <|
  name = "ID_ISAR3_EL1";
  read_from = (fun s -> s.ID_ISAR3_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR3_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR4_EL1_ref = <|
  name = "ID_ISAR4_EL1";
  read_from = (fun s -> s.ID_ISAR4_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR4_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR5_EL1_ref = <|
  name = "ID_ISAR5_EL1";
  read_from = (fun s -> s.ID_ISAR5_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR5_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_ISAR6_EL1_ref = <|
  name = "ID_ISAR6_EL1";
  read_from = (fun s -> s.ID_ISAR6_EL1);
  write_to = (fun v s -> (<| s with ID_ISAR6_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_MMFR0_EL1_ref = <|
  name = "ID_MMFR0_EL1";
  read_from = (fun s -> s.ID_MMFR0_EL1);
  write_to = (fun v s -> (<| s with ID_MMFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_MMFR1_EL1_ref = <|
  name = "ID_MMFR1_EL1";
  read_from = (fun s -> s.ID_MMFR1_EL1);
  write_to = (fun v s -> (<| s with ID_MMFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_MMFR2_EL1_ref = <|
  name = "ID_MMFR2_EL1";
  read_from = (fun s -> s.ID_MMFR2_EL1);
  write_to = (fun v s -> (<| s with ID_MMFR2_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_MMFR3_EL1_ref = <|
  name = "ID_MMFR3_EL1";
  read_from = (fun s -> s.ID_MMFR3_EL1);
  write_to = (fun v s -> (<| s with ID_MMFR3_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_MMFR4_EL1_ref = <|
  name = "ID_MMFR4_EL1";
  read_from = (fun s -> s.ID_MMFR4_EL1);
  write_to = (fun v s -> (<| s with ID_MMFR4_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_PFR0_EL1_ref = <|
  name = "ID_PFR0_EL1";
  read_from = (fun s -> s.ID_PFR0_EL1);
  write_to = (fun v s -> (<| s with ID_PFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_PFR1_EL1_ref = <|
  name = "ID_PFR1_EL1";
  read_from = (fun s -> s.ID_PFR1_EL1);
  write_to = (fun v s -> (<| s with ID_PFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ID_PFR2_EL1_ref = <|
  name = "ID_PFR2_EL1";
  read_from = (fun s -> s.ID_PFR2_EL1);
  write_to = (fun v s -> (<| s with ID_PFR2_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ISR_EL1_ref = <|
  name = "ISR_EL1";
  read_from = (fun s -> s.ISR_EL1);
  write_to = (fun v s -> (<| s with ISR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let LORC_EL1_ref = <|
  name = "LORC_EL1";
  read_from = (fun s -> s.LORC_EL1);
  write_to = (fun v s -> (<| s with LORC_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let LOREA_EL1_ref = <|
  name = "LOREA_EL1";
  read_from = (fun s -> s.LOREA_EL1);
  write_to = (fun v s -> (<| s with LOREA_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let LORID_EL1_ref = <|
  name = "LORID_EL1";
  read_from = (fun s -> s.LORID_EL1);
  write_to = (fun v s -> (<| s with LORID_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let LORN_EL1_ref = <|
  name = "LORN_EL1";
  read_from = (fun s -> s.LORN_EL1);
  write_to = (fun v s -> (<| s with LORN_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let LORSA_EL1_ref = <|
  name = "LORSA_EL1";
  read_from = (fun s -> s.LORSA_EL1);
  write_to = (fun v s -> (<| s with LORSA_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MDCCINT_EL1_ref = <|
  name = "MDCCINT_EL1";
  read_from = (fun s -> s.MDCCINT_EL1);
  write_to = (fun v s -> (<| s with MDCCINT_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MDCCSR_EL0_ref = <|
  name = "MDCCSR_EL0";
  read_from = (fun s -> s.MDCCSR_EL0);
  write_to = (fun v s -> (<| s with MDCCSR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MDRAR_EL1_ref = <|
  name = "MDRAR_EL1";
  read_from = (fun s -> s.MDRAR_EL1);
  write_to = (fun v s -> (<| s with MDRAR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MIDR_EL1_ref = <|
  name = "MIDR_EL1";
  read_from = (fun s -> s.MIDR_EL1);
  write_to = (fun v s -> (<| s with MIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MVFR0_EL1_ref = <|
  name = "MVFR0_EL1";
  read_from = (fun s -> s.MVFR0_EL1);
  write_to = (fun v s -> (<| s with MVFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MVFR1_EL1_ref = <|
  name = "MVFR1_EL1";
  read_from = (fun s -> s.MVFR1_EL1);
  write_to = (fun v s -> (<| s with MVFR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MVFR2_EL1_ref = <|
  name = "MVFR2_EL1";
  read_from = (fun s -> s.MVFR2_EL1);
  write_to = (fun v s -> (<| s with MVFR2_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let NSACR_ref = <|
  name = "NSACR";
  read_from = (fun s -> s.NSACR);
  write_to = (fun v s -> (<| s with NSACR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let OSDTRRX_EL1_ref = <|
  name = "OSDTRRX_EL1";
  read_from = (fun s -> s.OSDTRRX_EL1);
  write_to = (fun v s -> (<| s with OSDTRRX_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let OSDTRTX_EL1_ref = <|
  name = "OSDTRTX_EL1";
  read_from = (fun s -> s.OSDTRTX_EL1);
  write_to = (fun v s -> (<| s with OSDTRTX_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let OSECCR_EL1_ref = <|
  name = "OSECCR_EL1";
  read_from = (fun s -> s.OSECCR_EL1);
  write_to = (fun v s -> (<| s with OSECCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let OSLAR_EL1_ref = <|
  name = "OSLAR_EL1";
  read_from = (fun s -> s.OSLAR_EL1);
  write_to = (fun v s -> (<| s with OSLAR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PAR_EL1_ref = <|
  name = "PAR_EL1";
  read_from = (fun s -> s.PAR_EL1);
  write_to = (fun v s -> (<| s with PAR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let PAR_S_ref = <|
  name = "PAR_S";
  read_from = (fun s -> s.PAR_S);
  write_to = (fun v s -> (<| s with PAR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let PMCCFILTR_EL0_ref = <|
  name = "PMCCFILTR_EL0";
  read_from = (fun s -> s.PMCCFILTR_EL0);
  write_to = (fun v s -> (<| s with PMCCFILTR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMCCNTR_EL0_ref = <|
  name = "PMCCNTR_EL0";
  read_from = (fun s -> s.PMCCNTR_EL0);
  write_to = (fun v s -> (<| s with PMCCNTR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let PMCEID0_EL0_ref = <|
  name = "PMCEID0_EL0";
  read_from = (fun s -> s.PMCEID0_EL0);
  write_to = (fun v s -> (<| s with PMCEID0_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let PMCEID1_EL0_ref = <|
  name = "PMCEID1_EL0";
  read_from = (fun s -> s.PMCEID1_EL0);
  write_to = (fun v s -> (<| s with PMCEID1_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let PMCNTENCLR_EL0_ref = <|
  name = "PMCNTENCLR_EL0";
  read_from = (fun s -> s.PMCNTENCLR_EL0);
  write_to = (fun v s -> (<| s with PMCNTENCLR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMCNTENSET_EL0_ref = <|
  name = "PMCNTENSET_EL0";
  read_from = (fun s -> s.PMCNTENSET_EL0);
  write_to = (fun v s -> (<| s with PMCNTENSET_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMCR_EL0_ref = <|
  name = "PMCR_EL0";
  read_from = (fun s -> s.PMCR_EL0);
  write_to = (fun v s -> (<| s with PMCR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMEVCNTR_EL0_ref = <|
  name = "PMEVCNTR_EL0";
  read_from = (fun s -> s.PMEVCNTR_EL0);
  write_to = (fun v s -> (<| s with PMEVCNTR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 33 false v) |>

let PMEVTYPER_EL0_ref = <|
  name = "PMEVTYPER_EL0";
  read_from = (fun s -> s.PMEVTYPER_EL0);
  write_to = (fun v s -> (<| s with PMEVTYPER_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 33 false v) |>

let PMINTENCLR_EL1_ref = <|
  name = "PMINTENCLR_EL1";
  read_from = (fun s -> s.PMINTENCLR_EL1);
  write_to = (fun v s -> (<| s with PMINTENCLR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMINTENSET_EL1_ref = <|
  name = "PMINTENSET_EL1";
  read_from = (fun s -> s.PMINTENSET_EL1);
  write_to = (fun v s -> (<| s with PMINTENSET_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMLSR_ref = <|
  name = "PMLSR";
  read_from = (fun s -> s.PMLSR);
  write_to = (fun v s -> (<| s with PMLSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMMIR_ref = <|
  name = "PMMIR";
  read_from = (fun s -> s.PMMIR);
  write_to = (fun v s -> (<| s with PMMIR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMMIR_EL1_ref = <|
  name = "PMMIR_EL1";
  read_from = (fun s -> s.PMMIR_EL1);
  write_to = (fun v s -> (<| s with PMMIR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMOVSCLR_EL0_ref = <|
  name = "PMOVSCLR_EL0";
  read_from = (fun s -> s.PMOVSCLR_EL0);
  write_to = (fun v s -> (<| s with PMOVSCLR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMOVSSET_EL0_ref = <|
  name = "PMOVSSET_EL0";
  read_from = (fun s -> s.PMOVSSET_EL0);
  write_to = (fun v s -> (<| s with PMOVSSET_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMPCSR_ref = <|
  name = "PMPCSR";
  read_from = (fun s -> s.PMPCSR);
  write_to = (fun v s -> (<| s with PMPCSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let PMSELR_EL0_ref = <|
  name = "PMSELR_EL0";
  read_from = (fun s -> s.PMSELR_EL0);
  write_to = (fun v s -> (<| s with PMSELR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMSWINC_EL0_ref = <|
  name = "PMSWINC_EL0";
  read_from = (fun s -> s.PMSWINC_EL0);
  write_to = (fun v s -> (<| s with PMSWINC_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMUSERENR_EL0_ref = <|
  name = "PMUSERENR_EL0";
  read_from = (fun s -> s.PMUSERENR_EL0);
  write_to = (fun v s -> (<| s with PMUSERENR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMVIDSR_ref = <|
  name = "PMVIDSR";
  read_from = (fun s -> s.PMVIDSR);
  write_to = (fun v s -> (<| s with PMVIDSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMXEVCNTR_EL0_ref = <|
  name = "PMXEVCNTR_EL0";
  read_from = (fun s -> s.PMXEVCNTR_EL0);
  write_to = (fun v s -> (<| s with PMXEVCNTR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PMXEVTYPER_EL0_ref = <|
  name = "PMXEVTYPER_EL0";
  read_from = (fun s -> s.PMXEVTYPER_EL0);
  write_to = (fun v s -> (<| s with PMXEVTYPER_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RC_ref = <|
  name = "RC";
  read_from = (fun s -> s.RC);
  write_to = (fun v s -> (<| s with RC = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 5 false v) |>

let RD_EL0_ref = <|
  name = "RD_EL0";
  read_from = (fun s -> s.RD_EL0);
  write_to = (fun v s -> (<| s with RD_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let REVIDR_EL1_ref = <|
  name = "REVIDR_EL1";
  read_from = (fun s -> s.REVIDR_EL1);
  write_to = (fun v s -> (<| s with REVIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RGSR_EL1_ref = <|
  name = "RGSR_EL1";
  read_from = (fun s -> s.RGSR_EL1);
  write_to = (fun v s -> (<| s with RGSR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RMR_EL1_ref = <|
  name = "RMR_EL1";
  read_from = (fun s -> s.RMR_EL1);
  write_to = (fun v s -> (<| s with RMR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RMR_EL2_ref = <|
  name = "RMR_EL2";
  read_from = (fun s -> s.RMR_EL2);
  write_to = (fun v s -> (<| s with RMR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RMR_EL3_ref = <|
  name = "RMR_EL3";
  read_from = (fun s -> s.RMR_EL3);
  write_to = (fun v s -> (<| s with RMR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RMUID_EL0_ref = <|
  name = "RMUID_EL0";
  read_from = (fun s -> s.RMUID_EL0);
  write_to = (fun v s -> (<| s with RMUID_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RNDR_ref = <|
  name = "RNDR";
  read_from = (fun s -> s.RNDR);
  write_to = (fun v s -> (<| s with RNDR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let RNDRRS_ref = <|
  name = "RNDRRS";
  read_from = (fun s -> s.RNDRRS);
  write_to = (fun v s -> (<| s with RNDRRS = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let RVBAR_ref = <|
  name = "RVBAR";
  read_from = (fun s -> s.RVBAR);
  write_to = (fun v s -> (<| s with RVBAR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let RVBAR_EL1_ref = <|
  name = "RVBAR_EL1";
  read_from = (fun s -> s.RVBAR_EL1);
  write_to = (fun v s -> (<| s with RVBAR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let RVBAR_EL2_ref = <|
  name = "RVBAR_EL2";
  read_from = (fun s -> s.RVBAR_EL2);
  write_to = (fun v s -> (<| s with RVBAR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let RVBAR_EL3_ref = <|
  name = "RVBAR_EL3";
  read_from = (fun s -> s.RVBAR_EL3);
  write_to = (fun v s -> (<| s with RVBAR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCXTNUM_EL0_ref = <|
  name = "SCXTNUM_EL0";
  read_from = (fun s -> s.SCXTNUM_EL0);
  write_to = (fun v s -> (<| s with SCXTNUM_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCXTNUM_EL1_ref = <|
  name = "SCXTNUM_EL1";
  read_from = (fun s -> s.SCXTNUM_EL1);
  write_to = (fun v s -> (<| s with SCXTNUM_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCXTNUM_EL2_ref = <|
  name = "SCXTNUM_EL2";
  read_from = (fun s -> s.SCXTNUM_EL2);
  write_to = (fun v s -> (<| s with SCXTNUM_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCXTNUM_EL3_ref = <|
  name = "SCXTNUM_EL3";
  read_from = (fun s -> s.SCXTNUM_EL3);
  write_to = (fun v s -> (<| s with SCXTNUM_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SDER32_EL2_ref = <|
  name = "SDER32_EL2";
  read_from = (fun s -> s.SDER32_EL2);
  write_to = (fun v s -> (<| s with SDER32_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_EL0_ref = <|
  name = "SPSR_EL0";
  read_from = (fun s -> s.SPSR_EL0);
  write_to = (fun v s -> (<| s with SPSR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SP_EL0_ref = <|
  name = "SP_EL0";
  read_from = (fun s -> s.SP_EL0);
  write_to = (fun v s -> (<| s with SP_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SP_EL1_ref = <|
  name = "SP_EL1";
  read_from = (fun s -> s.SP_EL1);
  write_to = (fun v s -> (<| s with SP_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SP_EL2_ref = <|
  name = "SP_EL2";
  read_from = (fun s -> s.SP_EL2);
  write_to = (fun v s -> (<| s with SP_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SP_EL3_ref = <|
  name = "SP_EL3";
  read_from = (fun s -> s.SP_EL3);
  write_to = (fun v s -> (<| s with SP_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ShouldAdvanceIT_ref = <|
  name = "ShouldAdvanceIT";
  read_from = (fun s -> s.ShouldAdvanceIT);
  write_to = (fun v s -> (<| s with ShouldAdvanceIT = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let TLBTR_ref = <|
  name = "TLBTR";
  read_from = (fun s -> s.TLBTR);
  write_to = (fun v s -> (<| s with TLBTR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TPIDRRO_EL0_ref = <|
  name = "TPIDRRO_EL0";
  read_from = (fun s -> s.TPIDRRO_EL0);
  write_to = (fun v s -> (<| s with TPIDRRO_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TPIDR_EL0_ref = <|
  name = "TPIDR_EL0";
  read_from = (fun s -> s.TPIDR_EL0);
  write_to = (fun v s -> (<| s with TPIDR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TPIDR_EL1_ref = <|
  name = "TPIDR_EL1";
  read_from = (fun s -> s.TPIDR_EL1);
  write_to = (fun v s -> (<| s with TPIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TPIDR_EL2_ref = <|
  name = "TPIDR_EL2";
  read_from = (fun s -> s.TPIDR_EL2);
  write_to = (fun v s -> (<| s with TPIDR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TPIDR_EL3_ref = <|
  name = "TPIDR_EL3";
  read_from = (fun s -> s.TPIDR_EL3);
  write_to = (fun v s -> (<| s with TPIDR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TRFCR_EL1_ref = <|
  name = "TRFCR_EL1";
  read_from = (fun s -> s.TRFCR_EL1);
  write_to = (fun v s -> (<| s with TRFCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TRFCR_EL2_ref = <|
  name = "TRFCR_EL2";
  read_from = (fun s -> s.TRFCR_EL2);
  write_to = (fun v s -> (<| s with TRFCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let VBAR_EL0_ref = <|
  name = "VBAR_EL0";
  read_from = (fun s -> s.VBAR_EL0);
  write_to = (fun v s -> (<| s with VBAR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VDISR_EL2_ref = <|
  name = "VDISR_EL2";
  read_from = (fun s -> s.VDISR_EL2);
  write_to = (fun v s -> (<| s with VDISR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VMPIDR_EL2_ref = <|
  name = "VMPIDR_EL2";
  read_from = (fun s -> s.VMPIDR_EL2);
  write_to = (fun v s -> (<| s with VMPIDR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VNCR_EL2_ref = <|
  name = "VNCR_EL2";
  read_from = (fun s -> s.VNCR_EL2);
  write_to = (fun v s -> (<| s with VNCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VPIDR_EL2_ref = <|
  name = "VPIDR_EL2";
  read_from = (fun s -> s.VPIDR_EL2);
  write_to = (fun v s -> (<| s with VPIDR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _V_ref = <|
  name = "_V";
  read_from = (fun s -> s._V);
  write_to = (fun v s -> (<| s with _V = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 128 false v) 32 false v) |>

let __currentCond_ref = <|
  name = "__currentCond";
  read_from = (fun s -> s.__currentCond);
  write_to = (fun v s -> (<| s with __currentCond = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 4 false v) |>

let __exclusive_block_address_ref = <|
  name = "__exclusive_block_address";
  read_from = (fun s -> s.__exclusive_block_address);
  write_to = (fun v s -> (<| s with __exclusive_block_address = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 52 false v) |>

let __saved_exception_level_ref = <|
  name = "__saved_exception_level";
  read_from = (fun s -> s.__saved_exception_level);
  write_to = (fun v s -> (<| s with __saved_exception_level = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 2 false v) |>

let __unconditional_ref = <|
  name = "__unconditional";
  read_from = (fun s -> s.__unconditional);
  write_to = (fun v s -> (<| s with __unconditional = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let CONTEXTIDR_S_ref = <|
  name = "CONTEXTIDR_S";
  read_from = (fun s -> s.CONTEXTIDR_S);
  write_to = (fun v s -> (<| s with CONTEXTIDR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _GTEExtObsAccess_ref = <|
  name = "_GTEExtObsAccess";
  read_from = (fun s -> s._GTEExtObsAccess);
  write_to = (fun v s -> (<| s with _GTEExtObsAccess = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 16 false v) 256 false v) |>

let _GTEExtObsAddress_ref = <|
  name = "_GTEExtObsAddress";
  read_from = (fun s -> s._GTEExtObsAddress);
  write_to = (fun v s -> (<| s with _GTEExtObsAddress = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 256 false v) |>

let _GTEExtObsData_ref = <|
  name = "_GTEExtObsData";
  read_from = (fun s -> s._GTEExtObsData);
  write_to = (fun v s -> (<| s with _GTEExtObsData = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 256 false v) |>

let _GTEExtObsResult_ref = <|
  name = "_GTEExtObsResult";
  read_from = (fun s -> s._GTEExtObsResult);
  write_to = (fun v s -> (<| s with _GTEExtObsResult = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 256 false v) |>

let _GTEExtObsActive_ref = <|
  name = "_GTEExtObsActive";
  read_from = (fun s -> s._GTEExtObsActive);
  write_to = (fun v s -> (<| s with _GTEExtObsActive = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bool_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bool v) 4 false v) |>

let _GTEExtObsCount_ref = <|
  name = "_GTEExtObsCount";
  read_from = (fun s -> s._GTEExtObsCount);
  write_to = (fun v s -> (<| s with _GTEExtObsCount = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> int_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_int v) 4 false v) |>

let _GTEExtObsIndex_ref = <|
  name = "_GTEExtObsIndex";
  read_from = (fun s -> s._GTEExtObsIndex);
  write_to = (fun v s -> (<| s with _GTEExtObsIndex = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> int_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_int v) 4 false v) |>

let _GTEExtObsResultIndex_ref = <|
  name = "_GTEExtObsResultIndex";
  read_from = (fun s -> s._GTEExtObsResultIndex);
  write_to = (fun v s -> (<| s with _GTEExtObsResultIndex = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> int_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_int v) 4 false v) |>

let _GTEExtObsResultIsAddress_ref = <|
  name = "_GTEExtObsResultIsAddress";
  read_from = (fun s -> s._GTEExtObsResultIsAddress);
  write_to = (fun v s -> (<| s with _GTEExtObsResultIsAddress = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bool_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bool v) 4 false v) |>

let _GTEListParam0_ref = <|
  name = "_GTEListParam0";
  read_from = (fun s -> s._GTEListParam0);
  write_to = (fun v s -> (<| s with _GTEListParam0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 64 false v) |>

let _GTEListParam1_ref = <|
  name = "_GTEListParam1";
  read_from = (fun s -> s._GTEListParam1);
  write_to = (fun v s -> (<| s with _GTEListParam1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 64 false v) |>

let _GTEParam_ref = <|
  name = "_GTEParam";
  read_from = (fun s -> s._GTEParam);
  write_to = (fun v s -> (<| s with _GTEParam = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 8 false v) |>

let _GTE_AS_RecordedAccess_ref = <|
  name = "_GTE_AS_RecordedAccess";
  read_from = (fun s -> s._GTE_AS_RecordedAccess);
  write_to = (fun v s -> (<| s with _GTE_AS_RecordedAccess = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 8 false v) |>

let _GTE_AS_RecordedAddress_ref = <|
  name = "_GTE_AS_RecordedAddress";
  read_from = (fun s -> s._GTE_AS_RecordedAddress);
  write_to = (fun v s -> (<| s with _GTE_AS_RecordedAddress = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 8 false v) |>

let _GTE_AS_RecordedData_ref = <|
  name = "_GTE_AS_RecordedData";
  read_from = (fun s -> s._GTE_AS_RecordedData);
  write_to = (fun v s -> (<| s with _GTE_AS_RecordedData = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 8 false v) |>

let _GTE_PPU_Access_ref = <|
  name = "_GTE_PPU_Access";
  read_from = (fun s -> s._GTE_PPU_Access);
  write_to = (fun v s -> (<| s with _GTE_PPU_Access = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 6 false v) |>

let _GTE_PPU_Address_ref = <|
  name = "_GTE_PPU_Address";
  read_from = (fun s -> s._GTE_PPU_Address);
  write_to = (fun v s -> (<| s with _GTE_PPU_Address = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 6 false v) |>

let _GTE_PPU_SizeEn_ref = <|
  name = "_GTE_PPU_SizeEn";
  read_from = (fun s -> s._GTE_PPU_SizeEn);
  write_to = (fun v s -> (<| s with _GTE_PPU_SizeEn = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 6 false v) |>

let AbortRgn64Hi1_ref = <|
  name = "AbortRgn64Hi1";
  read_from = (fun s -> s.AbortRgn64Hi1);
  write_to = (fun v s -> (<| s with AbortRgn64Hi1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Hi1_Hi_ref = <|
  name = "AbortRgn64Hi1_Hi";
  read_from = (fun s -> s.AbortRgn64Hi1_Hi);
  write_to = (fun v s -> (<| s with AbortRgn64Hi1_Hi = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Hi2_ref = <|
  name = "AbortRgn64Hi2";
  read_from = (fun s -> s.AbortRgn64Hi2);
  write_to = (fun v s -> (<| s with AbortRgn64Hi2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Hi2_Hi_ref = <|
  name = "AbortRgn64Hi2_Hi";
  read_from = (fun s -> s.AbortRgn64Hi2_Hi);
  write_to = (fun v s -> (<| s with AbortRgn64Hi2_Hi = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Lo1_ref = <|
  name = "AbortRgn64Lo1";
  read_from = (fun s -> s.AbortRgn64Lo1);
  write_to = (fun v s -> (<| s with AbortRgn64Lo1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Lo1_Hi_ref = <|
  name = "AbortRgn64Lo1_Hi";
  read_from = (fun s -> s.AbortRgn64Lo1_Hi);
  write_to = (fun v s -> (<| s with AbortRgn64Lo1_Hi = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Lo2_ref = <|
  name = "AbortRgn64Lo2";
  read_from = (fun s -> s.AbortRgn64Lo2);
  write_to = (fun v s -> (<| s with AbortRgn64Lo2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let AbortRgn64Lo2_Hi_ref = <|
  name = "AbortRgn64Lo2_Hi";
  read_from = (fun s -> s.AbortRgn64Lo2_Hi);
  write_to = (fun v s -> (<| s with AbortRgn64Lo2_Hi = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTCR_ref = <|
  name = "CNTCR";
  read_from = (fun s -> s.CNTCR);
  write_to = (fun v s -> (<| s with CNTCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTCV_ref = <|
  name = "CNTCV";
  read_from = (fun s -> s.CNTCV);
  write_to = (fun v s -> (<| s with CNTCV = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let CNTFID0_ref = <|
  name = "CNTFID0";
  read_from = (fun s -> s.CNTFID0);
  write_to = (fun v s -> (<| s with CNTFID0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CNTSR_ref = <|
  name = "CNTSR";
  read_from = (fun s -> s.CNTSR);
  write_to = (fun v s -> (<| s with CNTSR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CONTEXTIDR_EL1_ref = <|
  name = "CONTEXTIDR_EL1";
  read_from = (fun s -> s.CONTEXTIDR_EL1);
  write_to = (fun v s -> (<| s with CONTEXTIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let CONTEXTIDR_EL2_ref = <|
  name = "CONTEXTIDR_EL2";
  read_from = (fun s -> s.CONTEXTIDR_EL2);
  write_to = (fun v s -> (<| s with CONTEXTIDR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DACR32_EL2_ref = <|
  name = "DACR32_EL2";
  read_from = (fun s -> s.DACR32_EL2);
  write_to = (fun v s -> (<| s with DACR32_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DACR_S_ref = <|
  name = "DACR_S";
  read_from = (fun s -> s.DACR_S);
  write_to = (fun v s -> (<| s with DACR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGBCR_ref = <|
  name = "DBGBCR";
  read_from = (fun s -> s.DBGBCR);
  write_to = (fun v s -> (<| s with DBGBCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGBCR_EL1_ref = <|
  name = "DBGBCR_EL1";
  read_from = (fun s -> s.DBGBCR_EL1);
  write_to = (fun v s -> (<| s with DBGBCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGBVR_ref = <|
  name = "DBGBVR";
  read_from = (fun s -> s.DBGBVR);
  write_to = (fun v s -> (<| s with DBGBVR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGBVR_EL1_ref = <|
  name = "DBGBVR_EL1";
  read_from = (fun s -> s.DBGBVR_EL1);
  write_to = (fun v s -> (<| s with DBGBVR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 17 false v) |>

let DBGBXVR_ref = <|
  name = "DBGBXVR";
  read_from = (fun s -> s.DBGBXVR);
  write_to = (fun v s -> (<| s with DBGBXVR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGDIDR_ref = <|
  name = "DBGDIDR";
  read_from = (fun s -> s.DBGDIDR);
  write_to = (fun v s -> (<| s with DBGDIDR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGEN_ref = <|
  name = "DBGEN";
  read_from = (fun s -> s.DBGEN);
  write_to = (fun v s -> (<| s with DBGEN = v |>));
  of_regval = (fun v -> signal_of_regval v);
  regval_of = (fun v -> regval_of_signal v) |>

let DBGPRCR_EL1_ref = <|
  name = "DBGPRCR_EL1";
  read_from = (fun s -> s.DBGPRCR_EL1);
  write_to = (fun v s -> (<| s with DBGPRCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGVCR32_EL2_ref = <|
  name = "DBGVCR32_EL2";
  read_from = (fun s -> s.DBGVCR32_EL2);
  write_to = (fun v s -> (<| s with DBGVCR32_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DBGWCR_ref = <|
  name = "DBGWCR";
  read_from = (fun s -> s.DBGWCR);
  write_to = (fun v s -> (<| s with DBGWCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGWCR_EL1_ref = <|
  name = "DBGWCR_EL1";
  read_from = (fun s -> s.DBGWCR_EL1);
  write_to = (fun v s -> (<| s with DBGWCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGWVR_ref = <|
  name = "DBGWVR";
  read_from = (fun s -> s.DBGWVR);
  write_to = (fun v s -> (<| s with DBGWVR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) 17 false v) |>

let DBGWVR_EL1_ref = <|
  name = "DBGWVR_EL1";
  read_from = (fun s -> s.DBGWVR_EL1);
  write_to = (fun v s -> (<| s with DBGWVR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 17 false v) |>

let DLR_EL0_ref = <|
  name = "DLR_EL0";
  read_from = (fun s -> s.DLR_EL0);
  write_to = (fun v s -> (<| s with DLR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let DSPSR_EL0_ref = <|
  name = "DSPSR_EL0";
  read_from = (fun s -> s.DSPSR_EL0);
  write_to = (fun v s -> (<| s with DSPSR_EL0 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let EDSCR_ref = <|
  name = "EDSCR";
  read_from = (fun s -> s.EDSCR);
  write_to = (fun v s -> (<| s with EDSCR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let DFSR_S_ref = <|
  name = "DFSR_S";
  read_from = (fun s -> s.DFSR_S);
  write_to = (fun v s -> (<| s with DFSR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ELR_EL3_ref = <|
  name = "ELR_EL3";
  read_from = (fun s -> s.ELR_EL3);
  write_to = (fun v s -> (<| s with ELR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ELR_EL1_ref = <|
  name = "ELR_EL1";
  read_from = (fun s -> s.ELR_EL1);
  write_to = (fun v s -> (<| s with ELR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ESR_EL3_ref = <|
  name = "ESR_EL3";
  read_from = (fun s -> s.ESR_EL3);
  write_to = (fun v s -> (<| s with ESR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ESR_EL1_ref = <|
  name = "ESR_EL1";
  read_from = (fun s -> s.ESR_EL1);
  write_to = (fun v s -> (<| s with ESR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ELR_EL2_ref = <|
  name = "ELR_EL2";
  read_from = (fun s -> s.ELR_EL2);
  write_to = (fun v s -> (<| s with ELR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TCR_EL2_ref = <|
  name = "TCR_EL2";
  read_from = (fun s -> s.TCR_EL2);
  write_to = (fun v s -> (<| s with TCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ESR_EL2_ref = <|
  name = "ESR_EL2";
  read_from = (fun s -> s.ESR_EL2);
  write_to = (fun v s -> (<| s with ESR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let FAR_EL1_ref = <|
  name = "FAR_EL1";
  read_from = (fun s -> s.FAR_EL1);
  write_to = (fun v s -> (<| s with FAR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let FAR_EL2_ref = <|
  name = "FAR_EL2";
  read_from = (fun s -> s.FAR_EL2);
  write_to = (fun v s -> (<| s with FAR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let FAR_EL3_ref = <|
  name = "FAR_EL3";
  read_from = (fun s -> s.FAR_EL3);
  write_to = (fun v s -> (<| s with FAR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let HCR_EL2_ref = <|
  name = "HCR_EL2";
  read_from = (fun s -> s.HCR_EL2);
  write_to = (fun v s -> (<| s with HCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let HPFAR_EL2_ref = <|
  name = "HPFAR_EL2";
  read_from = (fun s -> s.HPFAR_EL2);
  write_to = (fun v s -> (<| s with HPFAR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let ID_AA64DFR0_EL1_ref = <|
  name = "ID_AA64DFR0_EL1";
  read_from = (fun s -> s.ID_AA64DFR0_EL1);
  write_to = (fun v s -> (<| s with ID_AA64DFR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let IFSR32_EL2_ref = <|
  name = "IFSR32_EL2";
  read_from = (fun s -> s.IFSR32_EL2);
  write_to = (fun v s -> (<| s with IFSR32_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let IFSR_S_ref = <|
  name = "IFSR_S";
  read_from = (fun s -> s.IFSR_S);
  write_to = (fun v s -> (<| s with IFSR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let InGuardedPage_ref = <|
  name = "InGuardedPage";
  read_from = (fun s -> s.InGuardedPage);
  write_to = (fun v s -> (<| s with InGuardedPage = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let LR_mon_ref = <|
  name = "LR_mon";
  read_from = (fun s -> s.LR_mon);
  write_to = (fun v s -> (<| s with LR_mon = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MAIR0_S_ref = <|
  name = "MAIR0_S";
  read_from = (fun s -> s.MAIR0_S);
  write_to = (fun v s -> (<| s with MAIR0_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MAIR1_S_ref = <|
  name = "MAIR1_S";
  read_from = (fun s -> s.MAIR1_S);
  write_to = (fun v s -> (<| s with MAIR1_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MAIR_EL1_ref = <|
  name = "MAIR_EL1";
  read_from = (fun s -> s.MAIR_EL1);
  write_to = (fun v s -> (<| s with MAIR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MAIR_EL2_ref = <|
  name = "MAIR_EL2";
  read_from = (fun s -> s.MAIR_EL2);
  write_to = (fun v s -> (<| s with MAIR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MAIR_EL3_ref = <|
  name = "MAIR_EL3";
  read_from = (fun s -> s.MAIR_EL3);
  write_to = (fun v s -> (<| s with MAIR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MDCR_EL2_ref = <|
  name = "MDCR_EL2";
  read_from = (fun s -> s.MDCR_EL2);
  write_to = (fun v s -> (<| s with MDCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MDCR_EL3_ref = <|
  name = "MDCR_EL3";
  read_from = (fun s -> s.MDCR_EL3);
  write_to = (fun v s -> (<| s with MDCR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MDSCR_EL1_ref = <|
  name = "MDSCR_EL1";
  read_from = (fun s -> s.MDSCR_EL1);
  write_to = (fun v s -> (<| s with MDSCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MPAM0_EL1_ref = <|
  name = "MPAM0_EL1";
  read_from = (fun s -> s.MPAM0_EL1);
  write_to = (fun v s -> (<| s with MPAM0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAM1_EL1_ref = <|
  name = "MPAM1_EL1";
  read_from = (fun s -> s.MPAM1_EL1);
  write_to = (fun v s -> (<| s with MPAM1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAM2_EL2_ref = <|
  name = "MPAM2_EL2";
  read_from = (fun s -> s.MPAM2_EL2);
  write_to = (fun v s -> (<| s with MPAM2_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAM3_EL3_ref = <|
  name = "MPAM3_EL3";
  read_from = (fun s -> s.MPAM3_EL3);
  write_to = (fun v s -> (<| s with MPAM3_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMHCR_EL2_ref = <|
  name = "MPAMHCR_EL2";
  read_from = (fun s -> s.MPAMHCR_EL2);
  write_to = (fun v s -> (<| s with MPAMHCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MPAMIDR_EL1_ref = <|
  name = "MPAMIDR_EL1";
  read_from = (fun s -> s.MPAMIDR_EL1);
  write_to = (fun v s -> (<| s with MPAMIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM0_EL2_ref = <|
  name = "MPAMVPM0_EL2";
  read_from = (fun s -> s.MPAMVPM0_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM0_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM1_EL2_ref = <|
  name = "MPAMVPM1_EL2";
  read_from = (fun s -> s.MPAMVPM1_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM1_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM2_EL2_ref = <|
  name = "MPAMVPM2_EL2";
  read_from = (fun s -> s.MPAMVPM2_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM2_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM3_EL2_ref = <|
  name = "MPAMVPM3_EL2";
  read_from = (fun s -> s.MPAMVPM3_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM3_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM4_EL2_ref = <|
  name = "MPAMVPM4_EL2";
  read_from = (fun s -> s.MPAMVPM4_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM4_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM5_EL2_ref = <|
  name = "MPAMVPM5_EL2";
  read_from = (fun s -> s.MPAMVPM5_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM5_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM6_EL2_ref = <|
  name = "MPAMVPM6_EL2";
  read_from = (fun s -> s.MPAMVPM6_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM6_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPM7_EL2_ref = <|
  name = "MPAMVPM7_EL2";
  read_from = (fun s -> s.MPAMVPM7_EL2);
  write_to = (fun v s -> (<| s with MPAMVPM7_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MPAMVPMV_EL2_ref = <|
  name = "MPAMVPMV_EL2";
  read_from = (fun s -> s.MPAMVPMV_EL2);
  write_to = (fun v s -> (<| s with MPAMVPMV_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let MPIDR_EL1_ref = <|
  name = "MPIDR_EL1";
  read_from = (fun s -> s.MPIDR_EL1);
  write_to = (fun v s -> (<| s with MPIDR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let MVBAR_ref = <|
  name = "MVBAR";
  read_from = (fun s -> s.MVBAR);
  write_to = (fun v s -> (<| s with MVBAR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let NMRR_S_ref = <|
  name = "NMRR_S";
  read_from = (fun s -> s.NMRR_S);
  write_to = (fun v s -> (<| s with NMRR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let OSDLR_EL1_ref = <|
  name = "OSDLR_EL1";
  read_from = (fun s -> s.OSDLR_EL1);
  write_to = (fun v s -> (<| s with OSDLR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let OSLSR_EL1_ref = <|
  name = "OSLSR_EL1";
  read_from = (fun s -> s.OSLSR_EL1);
  write_to = (fun v s -> (<| s with OSLSR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PRRR_S_ref = <|
  name = "PRRR_S";
  read_from = (fun s -> s.PRRR_S);
  write_to = (fun v s -> (<| s with PRRR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let PSTATE_ref = <|
  name = "PSTATE";
  read_from = (fun s -> s.PSTATE);
  write_to = (fun v s -> (<| s with PSTATE = v |>));
  of_regval = (fun v -> ProcState_of_regval v);
  regval_of = (fun v -> regval_of_ProcState v) |>

let SCR_EL3_ref = <|
  name = "SCR_EL3";
  read_from = (fun s -> s.SCR_EL3);
  write_to = (fun v s -> (<| s with SCR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SCTLR_EL1_ref = <|
  name = "SCTLR_EL1";
  read_from = (fun s -> s.SCTLR_EL1);
  write_to = (fun v s -> (<| s with SCTLR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCTLR_EL2_ref = <|
  name = "SCTLR_EL2";
  read_from = (fun s -> s.SCTLR_EL2);
  write_to = (fun v s -> (<| s with SCTLR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCTLR_EL3_ref = <|
  name = "SCTLR_EL3";
  read_from = (fun s -> s.SCTLR_EL3);
  write_to = (fun v s -> (<| s with SCTLR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let SCTLR_S_ref = <|
  name = "SCTLR_S";
  read_from = (fun s -> s.SCTLR_S);
  write_to = (fun v s -> (<| s with SCTLR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SDER32_EL3_ref = <|
  name = "SDER32_EL3";
  read_from = (fun s -> s.SDER32_EL3);
  write_to = (fun v s -> (<| s with SDER32_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPIDEN_ref = <|
  name = "SPIDEN";
  read_from = (fun s -> s.SPIDEN);
  write_to = (fun v s -> (<| s with SPIDEN = v |>));
  of_regval = (fun v -> signal_of_regval v);
  regval_of = (fun v -> regval_of_signal v) |>

let SPSR_EL1_ref = <|
  name = "SPSR_EL1";
  read_from = (fun s -> s.SPSR_EL1);
  write_to = (fun v s -> (<| s with SPSR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_EL2_ref = <|
  name = "SPSR_EL2";
  read_from = (fun s -> s.SPSR_EL2);
  write_to = (fun v s -> (<| s with SPSR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_EL3_ref = <|
  name = "SPSR_EL3";
  read_from = (fun s -> s.SPSR_EL3);
  write_to = (fun v s -> (<| s with SPSR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_abt_ref = <|
  name = "SPSR_abt";
  read_from = (fun s -> s.SPSR_abt);
  write_to = (fun v s -> (<| s with SPSR_abt = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_fiq_ref = <|
  name = "SPSR_fiq";
  read_from = (fun s -> s.SPSR_fiq);
  write_to = (fun v s -> (<| s with SPSR_fiq = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_irq_ref = <|
  name = "SPSR_irq";
  read_from = (fun s -> s.SPSR_irq);
  write_to = (fun v s -> (<| s with SPSR_irq = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SPSR_und_ref = <|
  name = "SPSR_und";
  read_from = (fun s -> s.SPSR_und);
  write_to = (fun v s -> (<| s with SPSR_und = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let SP_mon_ref = <|
  name = "SP_mon";
  read_from = (fun s -> s.SP_mon);
  write_to = (fun v s -> (<| s with SP_mon = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let ScheduledFIQ_ref = <|
  name = "ScheduledFIQ";
  read_from = (fun s -> s.ScheduledFIQ);
  write_to = (fun v s -> (<| s with ScheduledFIQ = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let ScheduledIRQ_ref = <|
  name = "ScheduledIRQ";
  read_from = (fun s -> s.ScheduledIRQ);
  write_to = (fun v s -> (<| s with ScheduledIRQ = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let TCR_EL1_ref = <|
  name = "TCR_EL1";
  read_from = (fun s -> s.TCR_EL1);
  write_to = (fun v s -> (<| s with TCR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TCR_EL3_ref = <|
  name = "TCR_EL3";
  read_from = (fun s -> s.TCR_EL3);
  write_to = (fun v s -> (<| s with TCR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TFSRE0_EL1_ref = <|
  name = "TFSRE0_EL1";
  read_from = (fun s -> s.TFSRE0_EL1);
  write_to = (fun v s -> (<| s with TFSRE0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TFSR_EL1_ref = <|
  name = "TFSR_EL1";
  read_from = (fun s -> s.TFSR_EL1);
  write_to = (fun v s -> (<| s with TFSR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TFSR_EL2_ref = <|
  name = "TFSR_EL2";
  read_from = (fun s -> s.TFSR_EL2);
  write_to = (fun v s -> (<| s with TFSR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TFSR_EL3_ref = <|
  name = "TFSR_EL3";
  read_from = (fun s -> s.TFSR_EL3);
  write_to = (fun v s -> (<| s with TFSR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TLBHits_ref = <|
  name = "TLBHits";
  read_from = (fun s -> s.TLBHits);
  write_to = (fun v s -> (<| s with TLBHits = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let TLBMisses_ref = <|
  name = "TLBMisses";
  read_from = (fun s -> s.TLBMisses);
  write_to = (fun v s -> (<| s with TLBMisses = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let TTBCR2_S_ref = <|
  name = "TTBCR2_S";
  read_from = (fun s -> s.TTBCR2_S);
  write_to = (fun v s -> (<| s with TTBCR2_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TTBCR_S_ref = <|
  name = "TTBCR_S";
  read_from = (fun s -> s.TTBCR_S);
  write_to = (fun v s -> (<| s with TTBCR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let TTBR0_EL1_ref = <|
  name = "TTBR0_EL1";
  read_from = (fun s -> s.TTBR0_EL1);
  write_to = (fun v s -> (<| s with TTBR0_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TTBR0_EL2_ref = <|
  name = "TTBR0_EL2";
  read_from = (fun s -> s.TTBR0_EL2);
  write_to = (fun v s -> (<| s with TTBR0_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TTBR0_EL3_ref = <|
  name = "TTBR0_EL3";
  read_from = (fun s -> s.TTBR0_EL3);
  write_to = (fun v s -> (<| s with TTBR0_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TTBR0_S_ref = <|
  name = "TTBR0_S";
  read_from = (fun s -> s.TTBR0_S);
  write_to = (fun v s -> (<| s with TTBR0_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TTBR1_EL1_ref = <|
  name = "TTBR1_EL1";
  read_from = (fun s -> s.TTBR1_EL1);
  write_to = (fun v s -> (<| s with TTBR1_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TTBR1_EL2_ref = <|
  name = "TTBR1_EL2";
  read_from = (fun s -> s.TTBR1_EL2);
  write_to = (fun v s -> (<| s with TTBR1_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let TTBR1_S_ref = <|
  name = "TTBR1_S";
  read_from = (fun s -> s.TTBR1_S);
  write_to = (fun v s -> (<| s with TTBR1_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VBAR_EL1_ref = <|
  name = "VBAR_EL1";
  read_from = (fun s -> s.VBAR_EL1);
  write_to = (fun v s -> (<| s with VBAR_EL1 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VBAR_EL2_ref = <|
  name = "VBAR_EL2";
  read_from = (fun s -> s.VBAR_EL2);
  write_to = (fun v s -> (<| s with VBAR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VBAR_EL3_ref = <|
  name = "VBAR_EL3";
  read_from = (fun s -> s.VBAR_EL3);
  write_to = (fun v s -> (<| s with VBAR_EL3 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VBAR_S_ref = <|
  name = "VBAR_S";
  read_from = (fun s -> s.VBAR_S);
  write_to = (fun v s -> (<| s with VBAR_S = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let VSESR_EL2_ref = <|
  name = "VSESR_EL2";
  read_from = (fun s -> s.VSESR_EL2);
  write_to = (fun v s -> (<| s with VSESR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VSTCR_EL2_ref = <|
  name = "VSTCR_EL2";
  read_from = (fun s -> s.VSTCR_EL2);
  write_to = (fun v s -> (<| s with VSTCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let VSTTBR_EL2_ref = <|
  name = "VSTTBR_EL2";
  read_from = (fun s -> s.VSTTBR_EL2);
  write_to = (fun v s -> (<| s with VSTTBR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let VTCR_EL2_ref = <|
  name = "VTCR_EL2";
  read_from = (fun s -> s.VTCR_EL2);
  write_to = (fun v s -> (<| s with VTCR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let VTTBR_EL2_ref = <|
  name = "VTTBR_EL2";
  read_from = (fun s -> s.VTTBR_EL2);
  write_to = (fun v s -> (<| s with VTTBR_EL2 = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _AXIAbortCtl_ref = <|
  name = "_AXIAbortCtl";
  read_from = (fun s -> s._AXIAbortCtl);
  write_to = (fun v s -> (<| s with _AXIAbortCtl = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _ClearFIQ_ref = <|
  name = "_ClearFIQ";
  read_from = (fun s -> s._ClearFIQ);
  write_to = (fun v s -> (<| s with _ClearFIQ = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _ClearIRQ_ref = <|
  name = "_ClearIRQ";
  read_from = (fun s -> s._ClearIRQ);
  write_to = (fun v s -> (<| s with _ClearIRQ = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _FIQPending_ref = <|
  name = "_FIQPending";
  read_from = (fun s -> s._FIQPending);
  write_to = (fun v s -> (<| s with _FIQPending = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let _GTEActive_ref = <|
  name = "_GTEActive";
  read_from = (fun s -> s._GTEActive);
  write_to = (fun v s -> (<| s with _GTEActive = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let _GTECurrentAPI_ref = <|
  name = "_GTECurrentAPI";
  read_from = (fun s -> s._GTECurrentAPI);
  write_to = (fun v s -> (<| s with _GTECurrentAPI = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _GTEHaveParamLo_ref = <|
  name = "_GTEHaveParamLo";
  read_from = (fun s -> s._GTEHaveParamLo);
  write_to = (fun v s -> (<| s with _GTEHaveParamLo = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let _GTEListParam_ref = <|
  name = "_GTEListParam";
  read_from = (fun s -> s._GTEListParam);
  write_to = (fun v s -> (<| s with _GTEListParam = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let _GTEListParamIndex_ref = <|
  name = "_GTEListParamIndex";
  read_from = (fun s -> s._GTEListParamIndex);
  write_to = (fun v s -> (<| s with _GTEListParamIndex = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let _GTEListParamTerminator_ref = <|
  name = "_GTEListParamTerminator";
  read_from = (fun s -> s._GTEListParamTerminator);
  write_to = (fun v s -> (<| s with _GTEListParamTerminator = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _GTEListParamTerminatorCount_ref = <|
  name = "_GTEListParamTerminatorCount";
  read_from = (fun s -> s._GTEListParamTerminatorCount);
  write_to = (fun v s -> (<| s with _GTEListParamTerminatorCount = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let _GTEListParamTerminators_ref = <|
  name = "_GTEListParamTerminators";
  read_from = (fun s -> s._GTEListParamTerminators);
  write_to = (fun v s -> (<| s with _GTEListParamTerminators = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let _GTEParamCount_ref = <|
  name = "_GTEParamCount";
  read_from = (fun s -> s._GTEParamCount);
  write_to = (fun v s -> (<| s with _GTEParamCount = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let _GTEParamLo_ref = <|
  name = "_GTEParamLo";
  read_from = (fun s -> s._GTEParamLo);
  write_to = (fun v s -> (<| s with _GTEParamLo = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _GTEParamType_ref = <|
  name = "_GTEParamType";
  read_from = (fun s -> s._GTEParamType);
  write_to = (fun v s -> (<| s with _GTEParamType = v |>));
  of_regval = (fun v -> GTEParamType_of_regval v);
  regval_of = (fun v -> regval_of_GTEParamType v) |>

let _GTEParamsComplete_ref = <|
  name = "_GTEParamsComplete";
  read_from = (fun s -> s._GTEParamsComplete);
  write_to = (fun v s -> (<| s with _GTEParamsComplete = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let _GTEStatus_ref = <|
  name = "_GTEStatus";
  read_from = (fun s -> s._GTEStatus);
  write_to = (fun v s -> (<| s with _GTEStatus = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _GTE_AS_Access_ref = <|
  name = "_GTE_AS_Access";
  read_from = (fun s -> s._GTE_AS_Access);
  write_to = (fun v s -> (<| s with _GTE_AS_Access = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _GTE_AS_AccessCount_ref = <|
  name = "_GTE_AS_AccessCount";
  read_from = (fun s -> s._GTE_AS_AccessCount);
  write_to = (fun v s -> (<| s with _GTE_AS_AccessCount = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let _GTE_AS_Address_ref = <|
  name = "_GTE_AS_Address";
  read_from = (fun s -> s._GTE_AS_Address);
  write_to = (fun v s -> (<| s with _GTE_AS_Address = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _GTE_AS_Size_ref = <|
  name = "_GTE_AS_Size";
  read_from = (fun s -> s._GTE_AS_Size);
  write_to = (fun v s -> (<| s with _GTE_AS_Size = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _IRQPending_ref = <|
  name = "_IRQPending";
  read_from = (fun s -> s._IRQPending);
  write_to = (fun v s -> (<| s with _IRQPending = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let _PC_ref = <|
  name = "_PC";
  read_from = (fun s -> s._PC);
  write_to = (fun v s -> (<| s with _PC = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _PPURACR_ref = <|
  name = "_PPURACR";
  read_from = (fun s -> s._PPURACR);
  write_to = (fun v s -> (<| s with _PPURACR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _PPURBAR_ref = <|
  name = "_PPURBAR";
  read_from = (fun s -> s._PPURBAR);
  write_to = (fun v s -> (<| s with _PPURBAR = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) |>

let _PPURSER_ref = <|
  name = "_PPURSER";
  read_from = (fun s -> s._PPURSER);
  write_to = (fun v s -> (<| s with _PPURSER = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _PendingPhysicalSE_ref = <|
  name = "_PendingPhysicalSE";
  read_from = (fun s -> s._PendingPhysicalSE);
  write_to = (fun v s -> (<| s with _PendingPhysicalSE = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let _R_ref = <|
  name = "_R";
  read_from = (fun s -> s._R);
  write_to = (fun v s -> (<| s with _R = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> vector_of_regval (fun v -> bit_of_regval v) v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_vector (fun v -> regval_of_bit v) 64 false v) 31 false v) |>

let _ScheduleFIQ_ref = <|
  name = "_ScheduleFIQ";
  read_from = (fun s -> s._ScheduleFIQ);
  write_to = (fun v s -> (<| s with _ScheduleFIQ = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _ScheduleIRQ_ref = <|
  name = "_ScheduleIRQ";
  read_from = (fun s -> s._ScheduleIRQ);
  write_to = (fun v s -> (<| s with _ScheduleIRQ = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let _TLB_ref = <|
  name = "_TLB";
  read_from = (fun s -> s._TLB);
  write_to = (fun v s -> (<| s with _TLB = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> TLBLine_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_TLBLine v) 1024 false v) |>

let _TargetCPU_ref = <|
  name = "_TargetCPU";
  read_from = (fun s -> s._TargetCPU);
  write_to = (fun v s -> (<| s with _TargetCPU = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let __CNTControlBase_ref = <|
  name = "__CNTControlBase";
  read_from = (fun s -> s.__CNTControlBase);
  write_to = (fun v s -> (<| s with __CNTControlBase = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 52 false v) |>

let __LSISyndrome_ref = <|
  name = "__LSISyndrome";
  read_from = (fun s -> s.__LSISyndrome);
  write_to = (fun v s -> (<| s with __LSISyndrome = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 11 false v) |>

let __PC_changed_ref = <|
  name = "__PC_changed";
  read_from = (fun s -> s.__PC_changed);
  write_to = (fun v s -> (<| s with __PC_changed = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

let __currentInstr_ref = <|
  name = "__currentInstr";
  read_from = (fun s -> s.__currentInstr);
  write_to = (fun v s -> (<| s with __currentInstr = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 32 false v) |>

let __currentInstrLength_ref = <|
  name = "__currentInstrLength";
  read_from = (fun s -> s.__currentInstrLength);
  write_to = (fun v s -> (<| s with __currentInstrLength = v |>));
  of_regval = (fun v -> int_of_regval v);
  regval_of = (fun v -> regval_of_int v) |>

let __defaultRAM_ref = <|
  name = "__defaultRAM";
  read_from = (fun s -> s.__defaultRAM);
  write_to = (fun v s -> (<| s with __defaultRAM = v |>));
  of_regval = (fun v -> vector_of_regval (fun v -> bit_of_regval v) v);
  regval_of = (fun v -> regval_of_vector (fun v -> regval_of_bit v) 56 false v) |>

let __highest_el_aarch32_ref = <|
  name = "__highest_el_aarch32";
  read_from = (fun s -> s.__highest_el_aarch32);
  write_to = (fun v s -> (<| s with __highest_el_aarch32 = v |>));
  of_regval = (fun v -> bool_of_regval v);
  regval_of = (fun v -> regval_of_bool v) |>

val get_regval : string -> regstate -> maybe register_value
let get_regval reg_name s =
  if reg_name = "CNTHCTL_EL2" then Just (CNTHCTL_EL2_ref.regval_of (CNTHCTL_EL2_ref.read_from s)) else
  if reg_name = "CPTR_EL2" then Just (CPTR_EL2_ref.regval_of (CPTR_EL2_ref.read_from s)) else
  if reg_name = "CCSIDR_EL1" then Just (CCSIDR_EL1_ref.regval_of (CCSIDR_EL1_ref.read_from s)) else
  if reg_name = "ACTLR_EL1" then Just (ACTLR_EL1_ref.regval_of (ACTLR_EL1_ref.read_from s)) else
  if reg_name = "ACTLR_EL2" then Just (ACTLR_EL2_ref.regval_of (ACTLR_EL2_ref.read_from s)) else
  if reg_name = "ACTLR_EL3" then Just (ACTLR_EL3_ref.regval_of (ACTLR_EL3_ref.read_from s)) else
  if reg_name = "AFSR0_EL1" then Just (AFSR0_EL1_ref.regval_of (AFSR0_EL1_ref.read_from s)) else
  if reg_name = "AFSR0_EL2" then Just (AFSR0_EL2_ref.regval_of (AFSR0_EL2_ref.read_from s)) else
  if reg_name = "AFSR0_EL3" then Just (AFSR0_EL3_ref.regval_of (AFSR0_EL3_ref.read_from s)) else
  if reg_name = "AFSR1_EL1" then Just (AFSR1_EL1_ref.regval_of (AFSR1_EL1_ref.read_from s)) else
  if reg_name = "AFSR1_EL2" then Just (AFSR1_EL2_ref.regval_of (AFSR1_EL2_ref.read_from s)) else
  if reg_name = "AFSR1_EL3" then Just (AFSR1_EL3_ref.regval_of (AFSR1_EL3_ref.read_from s)) else
  if reg_name = "AIDR_EL1" then Just (AIDR_EL1_ref.regval_of (AIDR_EL1_ref.read_from s)) else
  if reg_name = "AMAIR_EL1" then Just (AMAIR_EL1_ref.regval_of (AMAIR_EL1_ref.read_from s)) else
  if reg_name = "AMAIR_EL2" then Just (AMAIR_EL2_ref.regval_of (AMAIR_EL2_ref.read_from s)) else
  if reg_name = "AMAIR_EL3" then Just (AMAIR_EL3_ref.regval_of (AMAIR_EL3_ref.read_from s)) else
  if reg_name = "APDAKeyHi_EL1" then Just (APDAKeyHi_EL1_ref.regval_of (APDAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APDAKeyLo_EL1" then Just (APDAKeyLo_EL1_ref.regval_of (APDAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APDBKeyHi_EL1" then Just (APDBKeyHi_EL1_ref.regval_of (APDBKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APDBKeyLo_EL1" then Just (APDBKeyLo_EL1_ref.regval_of (APDBKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APGAKeyHi_EL1" then Just (APGAKeyHi_EL1_ref.regval_of (APGAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APGAKeyLo_EL1" then Just (APGAKeyLo_EL1_ref.regval_of (APGAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APIAKeyHi_EL1" then Just (APIAKeyHi_EL1_ref.regval_of (APIAKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APIAKeyLo_EL1" then Just (APIAKeyLo_EL1_ref.regval_of (APIAKeyLo_EL1_ref.read_from s)) else
  if reg_name = "APIBKeyHi_EL1" then Just (APIBKeyHi_EL1_ref.regval_of (APIBKeyHi_EL1_ref.read_from s)) else
  if reg_name = "APIBKeyLo_EL1" then Just (APIBKeyLo_EL1_ref.regval_of (APIBKeyLo_EL1_ref.read_from s)) else
  if reg_name = "BTypeCompatible" then Just (BTypeCompatible_ref.regval_of (BTypeCompatible_ref.read_from s)) else
  if reg_name = "BTypeNext" then Just (BTypeNext_ref.regval_of (BTypeNext_ref.read_from s)) else
  if reg_name = "CCSIDR2_EL1" then Just (CCSIDR2_EL1_ref.regval_of (CCSIDR2_EL1_ref.read_from s)) else
  if reg_name = "CLIDR_EL1" then Just (CLIDR_EL1_ref.regval_of (CLIDR_EL1_ref.read_from s)) else
  if reg_name = "CNTFRQ_EL0" then Just (CNTFRQ_EL0_ref.regval_of (CNTFRQ_EL0_ref.read_from s)) else
  if reg_name = "CNTHPS_CTL_EL2" then Just (CNTHPS_CTL_EL2_ref.regval_of (CNTHPS_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHPS_CVAL_EL2" then Just (CNTHPS_CVAL_EL2_ref.regval_of (CNTHPS_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHPS_TVAL_EL2" then Just (CNTHPS_TVAL_EL2_ref.regval_of (CNTHPS_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHP_CTL_EL2" then Just (CNTHP_CTL_EL2_ref.regval_of (CNTHP_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHP_CVAL_EL2" then Just (CNTHP_CVAL_EL2_ref.regval_of (CNTHP_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHP_TVAL_EL2" then Just (CNTHP_TVAL_EL2_ref.regval_of (CNTHP_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHVS_CTL_EL2" then Just (CNTHVS_CTL_EL2_ref.regval_of (CNTHVS_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHVS_CVAL_EL2" then Just (CNTHVS_CVAL_EL2_ref.regval_of (CNTHVS_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHVS_TVAL_EL2" then Just (CNTHVS_TVAL_EL2_ref.regval_of (CNTHVS_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHV_CTL_EL2" then Just (CNTHV_CTL_EL2_ref.regval_of (CNTHV_CTL_EL2_ref.read_from s)) else
  if reg_name = "CNTHV_CVAL_EL2" then Just (CNTHV_CVAL_EL2_ref.regval_of (CNTHV_CVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTHV_TVAL_EL2" then Just (CNTHV_TVAL_EL2_ref.regval_of (CNTHV_TVAL_EL2_ref.read_from s)) else
  if reg_name = "CNTKCTL_EL1" then Just (CNTKCTL_EL1_ref.regval_of (CNTKCTL_EL1_ref.read_from s)) else
  if reg_name = "CNTPCT_EL0" then Just (CNTPCT_EL0_ref.regval_of (CNTPCT_EL0_ref.read_from s)) else
  if reg_name = "CNTPS_CTL_EL1" then Just (CNTPS_CTL_EL1_ref.regval_of (CNTPS_CTL_EL1_ref.read_from s)) else
  if reg_name = "CNTPS_CVAL_EL1" then Just (CNTPS_CVAL_EL1_ref.regval_of (CNTPS_CVAL_EL1_ref.read_from s)) else
  if reg_name = "CNTPS_TVAL_EL1" then Just (CNTPS_TVAL_EL1_ref.regval_of (CNTPS_TVAL_EL1_ref.read_from s)) else
  if reg_name = "CNTP_CTL_EL0" then Just (CNTP_CTL_EL0_ref.regval_of (CNTP_CTL_EL0_ref.read_from s)) else
  if reg_name = "CNTP_CTL_S" then Just (CNTP_CTL_S_ref.regval_of (CNTP_CTL_S_ref.read_from s)) else
  if reg_name = "CNTP_CVAL_EL0" then Just (CNTP_CVAL_EL0_ref.regval_of (CNTP_CVAL_EL0_ref.read_from s)) else
  if reg_name = "CNTP_TVAL_EL0" then Just (CNTP_TVAL_EL0_ref.regval_of (CNTP_TVAL_EL0_ref.read_from s)) else
  if reg_name = "CNTVCT_EL0" then Just (CNTVCT_EL0_ref.regval_of (CNTVCT_EL0_ref.read_from s)) else
  if reg_name = "CNTVOFF_EL2" then Just (CNTVOFF_EL2_ref.regval_of (CNTVOFF_EL2_ref.read_from s)) else
  if reg_name = "CNTV_CTL_EL0" then Just (CNTV_CTL_EL0_ref.regval_of (CNTV_CTL_EL0_ref.read_from s)) else
  if reg_name = "CNTV_CVAL_EL0" then Just (CNTV_CVAL_EL0_ref.regval_of (CNTV_CVAL_EL0_ref.read_from s)) else
  if reg_name = "CNTV_TVAL_EL0" then Just (CNTV_TVAL_EL0_ref.regval_of (CNTV_TVAL_EL0_ref.read_from s)) else
  if reg_name = "CPACR_EL1" then Just (CPACR_EL1_ref.regval_of (CPACR_EL1_ref.read_from s)) else
  if reg_name = "CPTR_EL3" then Just (CPTR_EL3_ref.regval_of (CPTR_EL3_ref.read_from s)) else
  if reg_name = "CSSELR_EL1" then Just (CSSELR_EL1_ref.regval_of (CSSELR_EL1_ref.read_from s)) else
  if reg_name = "CSSELR_S" then Just (CSSELR_S_ref.regval_of (CSSELR_S_ref.read_from s)) else
  if reg_name = "CTR_EL0" then Just (CTR_EL0_ref.regval_of (CTR_EL0_ref.read_from s)) else
  if reg_name = "DBGAUTHSTATUS_EL1" then Just (DBGAUTHSTATUS_EL1_ref.regval_of (DBGAUTHSTATUS_EL1_ref.read_from s)) else
  if reg_name = "DBGCLAIMCLR_EL1" then Just (DBGCLAIMCLR_EL1_ref.regval_of (DBGCLAIMCLR_EL1_ref.read_from s)) else
  if reg_name = "DBGCLAIMSET_EL1" then Just (DBGCLAIMSET_EL1_ref.regval_of (DBGCLAIMSET_EL1_ref.read_from s)) else
  if reg_name = "DBGDEVID1" then Just (DBGDEVID1_ref.regval_of (DBGDEVID1_ref.read_from s)) else
  if reg_name = "DBGDEVID2" then Just (DBGDEVID2_ref.regval_of (DBGDEVID2_ref.read_from s)) else
  if reg_name = "DBGDSCRint" then Just (DBGDSCRint_ref.regval_of (DBGDSCRint_ref.read_from s)) else
  if reg_name = "DBGDTRRX_EL0" then Just (DBGDTRRX_EL0_ref.regval_of (DBGDTRRX_EL0_ref.read_from s)) else
  if reg_name = "DBGDTRTX_EL0" then Just (DBGDTRTX_EL0_ref.regval_of (DBGDTRTX_EL0_ref.read_from s)) else
  if reg_name = "DBGDTR_EL0" then Just (DBGDTR_EL0_ref.regval_of (DBGDTR_EL0_ref.read_from s)) else
  if reg_name = "DBGWFAR" then Just (DBGWFAR_ref.regval_of (DBGWFAR_ref.read_from s)) else
  if reg_name = "DCZID_EL0" then Just (DCZID_EL0_ref.regval_of (DCZID_EL0_ref.read_from s)) else
  if reg_name = "DISR_EL1" then Just (DISR_EL1_ref.regval_of (DISR_EL1_ref.read_from s)) else
  if reg_name = "EDECCR" then Just (EDECCR_ref.regval_of (EDECCR_ref.read_from s)) else
  if reg_name = "EDECR" then Just (EDECR_ref.regval_of (EDECR_ref.read_from s)) else
  if reg_name = "EDESR" then Just (EDESR_ref.regval_of (EDESR_ref.read_from s)) else
  if reg_name = "EDLSR" then Just (EDLSR_ref.regval_of (EDLSR_ref.read_from s)) else
  if reg_name = "EDPCSR" then Just (EDPCSR_ref.regval_of (EDPCSR_ref.read_from s)) else
  if reg_name = "EDPFR" then Just (EDPFR_ref.regval_of (EDPFR_ref.read_from s)) else
  if reg_name = "EDPRCR" then Just (EDPRCR_ref.regval_of (EDPRCR_ref.read_from s)) else
  if reg_name = "EDPRSR" then Just (EDPRSR_ref.regval_of (EDPRSR_ref.read_from s)) else
  if reg_name = "EDVIDSR" then Just (EDVIDSR_ref.regval_of (EDVIDSR_ref.read_from s)) else
  if reg_name = "ELR_EL0" then Just (ELR_EL0_ref.regval_of (ELR_EL0_ref.read_from s)) else
  if reg_name = "ESP_EL0" then Just (ESP_EL0_ref.regval_of (ESP_EL0_ref.read_from s)) else
  if reg_name = "ESR_EL0" then Just (ESR_EL0_ref.regval_of (ESR_EL0_ref.read_from s)) else
  if reg_name = "EventRegister" then Just (EventRegister_ref.regval_of (EventRegister_ref.read_from s)) else
  if reg_name = "FAR_EL0" then Just (FAR_EL0_ref.regval_of (FAR_EL0_ref.read_from s)) else
  if reg_name = "FCSEIDR" then Just (FCSEIDR_ref.regval_of (FCSEIDR_ref.read_from s)) else
  if reg_name = "FPCR" then Just (FPCR_ref.regval_of (FPCR_ref.read_from s)) else
  if reg_name = "FPEXC32_EL2" then Just (FPEXC32_EL2_ref.regval_of (FPEXC32_EL2_ref.read_from s)) else
  if reg_name = "FPSCR" then Just (FPSCR_ref.regval_of (FPSCR_ref.read_from s)) else
  if reg_name = "FPSID" then Just (FPSID_ref.regval_of (FPSID_ref.read_from s)) else
  if reg_name = "FPSR" then Just (FPSR_ref.regval_of (FPSR_ref.read_from s)) else
  if reg_name = "GCR_EL1" then Just (GCR_EL1_ref.regval_of (GCR_EL1_ref.read_from s)) else
  if reg_name = "HACR_EL2" then Just (HACR_EL2_ref.regval_of (HACR_EL2_ref.read_from s)) else
  if reg_name = "HSTR_EL2" then Just (HSTR_EL2_ref.regval_of (HSTR_EL2_ref.read_from s)) else
  if reg_name = "ICC_AP0R_EL1" then Just (ICC_AP0R_EL1_ref.regval_of (ICC_AP0R_EL1_ref.read_from s)) else
  if reg_name = "ICC_AP1R_EL1" then Just (ICC_AP1R_EL1_ref.regval_of (ICC_AP1R_EL1_ref.read_from s)) else
  if reg_name = "ICC_ASGI1R_EL1" then Just (ICC_ASGI1R_EL1_ref.regval_of (ICC_ASGI1R_EL1_ref.read_from s)) else
  if reg_name = "ICC_BPR0_EL1" then Just (ICC_BPR0_EL1_ref.regval_of (ICC_BPR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_BPR1_EL1_NS" then Just (ICC_BPR1_EL1_NS_ref.regval_of (ICC_BPR1_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_BPR1_EL1_S" then Just (ICC_BPR1_EL1_S_ref.regval_of (ICC_BPR1_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_CTLR_EL1_NS" then Just (ICC_CTLR_EL1_NS_ref.regval_of (ICC_CTLR_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_CTLR_EL1_S" then Just (ICC_CTLR_EL1_S_ref.regval_of (ICC_CTLR_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_CTLR_EL3" then Just (ICC_CTLR_EL3_ref.regval_of (ICC_CTLR_EL3_ref.read_from s)) else
  if reg_name = "ICC_DIR_EL1" then Just (ICC_DIR_EL1_ref.regval_of (ICC_DIR_EL1_ref.read_from s)) else
  if reg_name = "ICC_EOIR0_EL1" then Just (ICC_EOIR0_EL1_ref.regval_of (ICC_EOIR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_EOIR1_EL1" then Just (ICC_EOIR1_EL1_ref.regval_of (ICC_EOIR1_EL1_ref.read_from s)) else
  if reg_name = "ICC_HPPIR0_EL1" then Just (ICC_HPPIR0_EL1_ref.regval_of (ICC_HPPIR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_HPPIR1_EL1" then Just (ICC_HPPIR1_EL1_ref.regval_of (ICC_HPPIR1_EL1_ref.read_from s)) else
  if reg_name = "ICC_IAR0_EL1" then Just (ICC_IAR0_EL1_ref.regval_of (ICC_IAR0_EL1_ref.read_from s)) else
  if reg_name = "ICC_IAR1_EL1" then Just (ICC_IAR1_EL1_ref.regval_of (ICC_IAR1_EL1_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN0_EL1" then Just (ICC_IGRPEN0_EL1_ref.regval_of (ICC_IGRPEN0_EL1_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN1_EL1_NS" then Just (ICC_IGRPEN1_EL1_NS_ref.regval_of (ICC_IGRPEN1_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN1_EL1_S" then Just (ICC_IGRPEN1_EL1_S_ref.regval_of (ICC_IGRPEN1_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_IGRPEN1_EL3" then Just (ICC_IGRPEN1_EL3_ref.regval_of (ICC_IGRPEN1_EL3_ref.read_from s)) else
  if reg_name = "ICC_PMR_EL1" then Just (ICC_PMR_EL1_ref.regval_of (ICC_PMR_EL1_ref.read_from s)) else
  if reg_name = "ICC_RPR_EL1" then Just (ICC_RPR_EL1_ref.regval_of (ICC_RPR_EL1_ref.read_from s)) else
  if reg_name = "ICC_SGI0R_EL1" then Just (ICC_SGI0R_EL1_ref.regval_of (ICC_SGI0R_EL1_ref.read_from s)) else
  if reg_name = "ICC_SGI1R_EL1" then Just (ICC_SGI1R_EL1_ref.regval_of (ICC_SGI1R_EL1_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL1_NS" then Just (ICC_SRE_EL1_NS_ref.regval_of (ICC_SRE_EL1_NS_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL1_S" then Just (ICC_SRE_EL1_S_ref.regval_of (ICC_SRE_EL1_S_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL2" then Just (ICC_SRE_EL2_ref.regval_of (ICC_SRE_EL2_ref.read_from s)) else
  if reg_name = "ICC_SRE_EL3" then Just (ICC_SRE_EL3_ref.regval_of (ICC_SRE_EL3_ref.read_from s)) else
  if reg_name = "ICH_AP0R_EL2" then Just (ICH_AP0R_EL2_ref.regval_of (ICH_AP0R_EL2_ref.read_from s)) else
  if reg_name = "ICH_AP1R_EL2" then Just (ICH_AP1R_EL2_ref.regval_of (ICH_AP1R_EL2_ref.read_from s)) else
  if reg_name = "ICH_EISR_EL2" then Just (ICH_EISR_EL2_ref.regval_of (ICH_EISR_EL2_ref.read_from s)) else
  if reg_name = "ICH_ELRSR_EL2" then Just (ICH_ELRSR_EL2_ref.regval_of (ICH_ELRSR_EL2_ref.read_from s)) else
  if reg_name = "ICH_HCR_EL2" then Just (ICH_HCR_EL2_ref.regval_of (ICH_HCR_EL2_ref.read_from s)) else
  if reg_name = "ICH_MISR_EL2" then Just (ICH_MISR_EL2_ref.regval_of (ICH_MISR_EL2_ref.read_from s)) else
  if reg_name = "ICH_VMCR_EL2" then Just (ICH_VMCR_EL2_ref.regval_of (ICH_VMCR_EL2_ref.read_from s)) else
  if reg_name = "ICH_VTR_EL2" then Just (ICH_VTR_EL2_ref.regval_of (ICH_VTR_EL2_ref.read_from s)) else
  if reg_name = "ICV_AP0R_EL1" then Just (ICV_AP0R_EL1_ref.regval_of (ICV_AP0R_EL1_ref.read_from s)) else
  if reg_name = "ICV_AP1R_EL1" then Just (ICV_AP1R_EL1_ref.regval_of (ICV_AP1R_EL1_ref.read_from s)) else
  if reg_name = "ICV_BPR0_EL1" then Just (ICV_BPR0_EL1_ref.regval_of (ICV_BPR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_BPR1_EL1" then Just (ICV_BPR1_EL1_ref.regval_of (ICV_BPR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_CTLR_EL1" then Just (ICV_CTLR_EL1_ref.regval_of (ICV_CTLR_EL1_ref.read_from s)) else
  if reg_name = "ICV_DIR_EL1" then Just (ICV_DIR_EL1_ref.regval_of (ICV_DIR_EL1_ref.read_from s)) else
  if reg_name = "ICV_EOIR0_EL1" then Just (ICV_EOIR0_EL1_ref.regval_of (ICV_EOIR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_EOIR1_EL1" then Just (ICV_EOIR1_EL1_ref.regval_of (ICV_EOIR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_HPPIR0_EL1" then Just (ICV_HPPIR0_EL1_ref.regval_of (ICV_HPPIR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_HPPIR1_EL1" then Just (ICV_HPPIR1_EL1_ref.regval_of (ICV_HPPIR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_IAR0_EL1" then Just (ICV_IAR0_EL1_ref.regval_of (ICV_IAR0_EL1_ref.read_from s)) else
  if reg_name = "ICV_IAR1_EL1" then Just (ICV_IAR1_EL1_ref.regval_of (ICV_IAR1_EL1_ref.read_from s)) else
  if reg_name = "ICV_IGRPEN0_EL1" then Just (ICV_IGRPEN0_EL1_ref.regval_of (ICV_IGRPEN0_EL1_ref.read_from s)) else
  if reg_name = "ICV_IGRPEN1_EL1" then Just (ICV_IGRPEN1_EL1_ref.regval_of (ICV_IGRPEN1_EL1_ref.read_from s)) else
  if reg_name = "ICV_PMR_EL1" then Just (ICV_PMR_EL1_ref.regval_of (ICV_PMR_EL1_ref.read_from s)) else
  if reg_name = "ICV_RPR_EL1" then Just (ICV_RPR_EL1_ref.regval_of (ICV_RPR_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64AFR0_EL1" then Just (ID_AA64AFR0_EL1_ref.regval_of (ID_AA64AFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64AFR1_EL1" then Just (ID_AA64AFR1_EL1_ref.regval_of (ID_AA64AFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64DFR1_EL1" then Just (ID_AA64DFR1_EL1_ref.regval_of (ID_AA64DFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64ISAR0_EL1" then Just (ID_AA64ISAR0_EL1_ref.regval_of (ID_AA64ISAR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64ISAR1_EL1" then Just (ID_AA64ISAR1_EL1_ref.regval_of (ID_AA64ISAR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64MMFR0_EL1" then Just (ID_AA64MMFR0_EL1_ref.regval_of (ID_AA64MMFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64MMFR1_EL1" then Just (ID_AA64MMFR1_EL1_ref.regval_of (ID_AA64MMFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64MMFR2_EL1" then Just (ID_AA64MMFR2_EL1_ref.regval_of (ID_AA64MMFR2_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64PFR0_EL1" then Just (ID_AA64PFR0_EL1_ref.regval_of (ID_AA64PFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_AA64PFR1_EL1" then Just (ID_AA64PFR1_EL1_ref.regval_of (ID_AA64PFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_AFR0_EL1" then Just (ID_AFR0_EL1_ref.regval_of (ID_AFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_DFR0_EL1" then Just (ID_DFR0_EL1_ref.regval_of (ID_DFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR0_EL1" then Just (ID_ISAR0_EL1_ref.regval_of (ID_ISAR0_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR1_EL1" then Just (ID_ISAR1_EL1_ref.regval_of (ID_ISAR1_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR2_EL1" then Just (ID_ISAR2_EL1_ref.regval_of (ID_ISAR2_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR3_EL1" then Just (ID_ISAR3_EL1_ref.regval_of (ID_ISAR3_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR4_EL1" then Just (ID_ISAR4_EL1_ref.regval_of (ID_ISAR4_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR5_EL1" then Just (ID_ISAR5_EL1_ref.regval_of (ID_ISAR5_EL1_ref.read_from s)) else
  if reg_name = "ID_ISAR6_EL1" then Just (ID_ISAR6_EL1_ref.regval_of (ID_ISAR6_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR0_EL1" then Just (ID_MMFR0_EL1_ref.regval_of (ID_MMFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR1_EL1" then Just (ID_MMFR1_EL1_ref.regval_of (ID_MMFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR2_EL1" then Just (ID_MMFR2_EL1_ref.regval_of (ID_MMFR2_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR3_EL1" then Just (ID_MMFR3_EL1_ref.regval_of (ID_MMFR3_EL1_ref.read_from s)) else
  if reg_name = "ID_MMFR4_EL1" then Just (ID_MMFR4_EL1_ref.regval_of (ID_MMFR4_EL1_ref.read_from s)) else
  if reg_name = "ID_PFR0_EL1" then Just (ID_PFR0_EL1_ref.regval_of (ID_PFR0_EL1_ref.read_from s)) else
  if reg_name = "ID_PFR1_EL1" then Just (ID_PFR1_EL1_ref.regval_of (ID_PFR1_EL1_ref.read_from s)) else
  if reg_name = "ID_PFR2_EL1" then Just (ID_PFR2_EL1_ref.regval_of (ID_PFR2_EL1_ref.read_from s)) else
  if reg_name = "ISR_EL1" then Just (ISR_EL1_ref.regval_of (ISR_EL1_ref.read_from s)) else
  if reg_name = "LORC_EL1" then Just (LORC_EL1_ref.regval_of (LORC_EL1_ref.read_from s)) else
  if reg_name = "LOREA_EL1" then Just (LOREA_EL1_ref.regval_of (LOREA_EL1_ref.read_from s)) else
  if reg_name = "LORID_EL1" then Just (LORID_EL1_ref.regval_of (LORID_EL1_ref.read_from s)) else
  if reg_name = "LORN_EL1" then Just (LORN_EL1_ref.regval_of (LORN_EL1_ref.read_from s)) else
  if reg_name = "LORSA_EL1" then Just (LORSA_EL1_ref.regval_of (LORSA_EL1_ref.read_from s)) else
  if reg_name = "MDCCINT_EL1" then Just (MDCCINT_EL1_ref.regval_of (MDCCINT_EL1_ref.read_from s)) else
  if reg_name = "MDCCSR_EL0" then Just (MDCCSR_EL0_ref.regval_of (MDCCSR_EL0_ref.read_from s)) else
  if reg_name = "MDRAR_EL1" then Just (MDRAR_EL1_ref.regval_of (MDRAR_EL1_ref.read_from s)) else
  if reg_name = "MIDR_EL1" then Just (MIDR_EL1_ref.regval_of (MIDR_EL1_ref.read_from s)) else
  if reg_name = "MVFR0_EL1" then Just (MVFR0_EL1_ref.regval_of (MVFR0_EL1_ref.read_from s)) else
  if reg_name = "MVFR1_EL1" then Just (MVFR1_EL1_ref.regval_of (MVFR1_EL1_ref.read_from s)) else
  if reg_name = "MVFR2_EL1" then Just (MVFR2_EL1_ref.regval_of (MVFR2_EL1_ref.read_from s)) else
  if reg_name = "NSACR" then Just (NSACR_ref.regval_of (NSACR_ref.read_from s)) else
  if reg_name = "OSDTRRX_EL1" then Just (OSDTRRX_EL1_ref.regval_of (OSDTRRX_EL1_ref.read_from s)) else
  if reg_name = "OSDTRTX_EL1" then Just (OSDTRTX_EL1_ref.regval_of (OSDTRTX_EL1_ref.read_from s)) else
  if reg_name = "OSECCR_EL1" then Just (OSECCR_EL1_ref.regval_of (OSECCR_EL1_ref.read_from s)) else
  if reg_name = "OSLAR_EL1" then Just (OSLAR_EL1_ref.regval_of (OSLAR_EL1_ref.read_from s)) else
  if reg_name = "PAR_EL1" then Just (PAR_EL1_ref.regval_of (PAR_EL1_ref.read_from s)) else
  if reg_name = "PAR_S" then Just (PAR_S_ref.regval_of (PAR_S_ref.read_from s)) else
  if reg_name = "PMCCFILTR_EL0" then Just (PMCCFILTR_EL0_ref.regval_of (PMCCFILTR_EL0_ref.read_from s)) else
  if reg_name = "PMCCNTR_EL0" then Just (PMCCNTR_EL0_ref.regval_of (PMCCNTR_EL0_ref.read_from s)) else
  if reg_name = "PMCEID0_EL0" then Just (PMCEID0_EL0_ref.regval_of (PMCEID0_EL0_ref.read_from s)) else
  if reg_name = "PMCEID1_EL0" then Just (PMCEID1_EL0_ref.regval_of (PMCEID1_EL0_ref.read_from s)) else
  if reg_name = "PMCNTENCLR_EL0" then Just (PMCNTENCLR_EL0_ref.regval_of (PMCNTENCLR_EL0_ref.read_from s)) else
  if reg_name = "PMCNTENSET_EL0" then Just (PMCNTENSET_EL0_ref.regval_of (PMCNTENSET_EL0_ref.read_from s)) else
  if reg_name = "PMCR_EL0" then Just (PMCR_EL0_ref.regval_of (PMCR_EL0_ref.read_from s)) else
  if reg_name = "PMEVCNTR_EL0" then Just (PMEVCNTR_EL0_ref.regval_of (PMEVCNTR_EL0_ref.read_from s)) else
  if reg_name = "PMEVTYPER_EL0" then Just (PMEVTYPER_EL0_ref.regval_of (PMEVTYPER_EL0_ref.read_from s)) else
  if reg_name = "PMINTENCLR_EL1" then Just (PMINTENCLR_EL1_ref.regval_of (PMINTENCLR_EL1_ref.read_from s)) else
  if reg_name = "PMINTENSET_EL1" then Just (PMINTENSET_EL1_ref.regval_of (PMINTENSET_EL1_ref.read_from s)) else
  if reg_name = "PMLSR" then Just (PMLSR_ref.regval_of (PMLSR_ref.read_from s)) else
  if reg_name = "PMMIR" then Just (PMMIR_ref.regval_of (PMMIR_ref.read_from s)) else
  if reg_name = "PMMIR_EL1" then Just (PMMIR_EL1_ref.regval_of (PMMIR_EL1_ref.read_from s)) else
  if reg_name = "PMOVSCLR_EL0" then Just (PMOVSCLR_EL0_ref.regval_of (PMOVSCLR_EL0_ref.read_from s)) else
  if reg_name = "PMOVSSET_EL0" then Just (PMOVSSET_EL0_ref.regval_of (PMOVSSET_EL0_ref.read_from s)) else
  if reg_name = "PMPCSR" then Just (PMPCSR_ref.regval_of (PMPCSR_ref.read_from s)) else
  if reg_name = "PMSELR_EL0" then Just (PMSELR_EL0_ref.regval_of (PMSELR_EL0_ref.read_from s)) else
  if reg_name = "PMSWINC_EL0" then Just (PMSWINC_EL0_ref.regval_of (PMSWINC_EL0_ref.read_from s)) else
  if reg_name = "PMUSERENR_EL0" then Just (PMUSERENR_EL0_ref.regval_of (PMUSERENR_EL0_ref.read_from s)) else
  if reg_name = "PMVIDSR" then Just (PMVIDSR_ref.regval_of (PMVIDSR_ref.read_from s)) else
  if reg_name = "PMXEVCNTR_EL0" then Just (PMXEVCNTR_EL0_ref.regval_of (PMXEVCNTR_EL0_ref.read_from s)) else
  if reg_name = "PMXEVTYPER_EL0" then Just (PMXEVTYPER_EL0_ref.regval_of (PMXEVTYPER_EL0_ref.read_from s)) else
  if reg_name = "RC" then Just (RC_ref.regval_of (RC_ref.read_from s)) else
  if reg_name = "RD_EL0" then Just (RD_EL0_ref.regval_of (RD_EL0_ref.read_from s)) else
  if reg_name = "REVIDR_EL1" then Just (REVIDR_EL1_ref.regval_of (REVIDR_EL1_ref.read_from s)) else
  if reg_name = "RGSR_EL1" then Just (RGSR_EL1_ref.regval_of (RGSR_EL1_ref.read_from s)) else
  if reg_name = "RMR_EL1" then Just (RMR_EL1_ref.regval_of (RMR_EL1_ref.read_from s)) else
  if reg_name = "RMR_EL2" then Just (RMR_EL2_ref.regval_of (RMR_EL2_ref.read_from s)) else
  if reg_name = "RMR_EL3" then Just (RMR_EL3_ref.regval_of (RMR_EL3_ref.read_from s)) else
  if reg_name = "RMUID_EL0" then Just (RMUID_EL0_ref.regval_of (RMUID_EL0_ref.read_from s)) else
  if reg_name = "RNDR" then Just (RNDR_ref.regval_of (RNDR_ref.read_from s)) else
  if reg_name = "RNDRRS" then Just (RNDRRS_ref.regval_of (RNDRRS_ref.read_from s)) else
  if reg_name = "RVBAR" then Just (RVBAR_ref.regval_of (RVBAR_ref.read_from s)) else
  if reg_name = "RVBAR_EL1" then Just (RVBAR_EL1_ref.regval_of (RVBAR_EL1_ref.read_from s)) else
  if reg_name = "RVBAR_EL2" then Just (RVBAR_EL2_ref.regval_of (RVBAR_EL2_ref.read_from s)) else
  if reg_name = "RVBAR_EL3" then Just (RVBAR_EL3_ref.regval_of (RVBAR_EL3_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL0" then Just (SCXTNUM_EL0_ref.regval_of (SCXTNUM_EL0_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL1" then Just (SCXTNUM_EL1_ref.regval_of (SCXTNUM_EL1_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL2" then Just (SCXTNUM_EL2_ref.regval_of (SCXTNUM_EL2_ref.read_from s)) else
  if reg_name = "SCXTNUM_EL3" then Just (SCXTNUM_EL3_ref.regval_of (SCXTNUM_EL3_ref.read_from s)) else
  if reg_name = "SDER32_EL2" then Just (SDER32_EL2_ref.regval_of (SDER32_EL2_ref.read_from s)) else
  if reg_name = "SPSR_EL0" then Just (SPSR_EL0_ref.regval_of (SPSR_EL0_ref.read_from s)) else
  if reg_name = "SP_EL0" then Just (SP_EL0_ref.regval_of (SP_EL0_ref.read_from s)) else
  if reg_name = "SP_EL1" then Just (SP_EL1_ref.regval_of (SP_EL1_ref.read_from s)) else
  if reg_name = "SP_EL2" then Just (SP_EL2_ref.regval_of (SP_EL2_ref.read_from s)) else
  if reg_name = "SP_EL3" then Just (SP_EL3_ref.regval_of (SP_EL3_ref.read_from s)) else
  if reg_name = "ShouldAdvanceIT" then Just (ShouldAdvanceIT_ref.regval_of (ShouldAdvanceIT_ref.read_from s)) else
  if reg_name = "TLBTR" then Just (TLBTR_ref.regval_of (TLBTR_ref.read_from s)) else
  if reg_name = "TPIDRRO_EL0" then Just (TPIDRRO_EL0_ref.regval_of (TPIDRRO_EL0_ref.read_from s)) else
  if reg_name = "TPIDR_EL0" then Just (TPIDR_EL0_ref.regval_of (TPIDR_EL0_ref.read_from s)) else
  if reg_name = "TPIDR_EL1" then Just (TPIDR_EL1_ref.regval_of (TPIDR_EL1_ref.read_from s)) else
  if reg_name = "TPIDR_EL2" then Just (TPIDR_EL2_ref.regval_of (TPIDR_EL2_ref.read_from s)) else
  if reg_name = "TPIDR_EL3" then Just (TPIDR_EL3_ref.regval_of (TPIDR_EL3_ref.read_from s)) else
  if reg_name = "TRFCR_EL1" then Just (TRFCR_EL1_ref.regval_of (TRFCR_EL1_ref.read_from s)) else
  if reg_name = "TRFCR_EL2" then Just (TRFCR_EL2_ref.regval_of (TRFCR_EL2_ref.read_from s)) else
  if reg_name = "VBAR_EL0" then Just (VBAR_EL0_ref.regval_of (VBAR_EL0_ref.read_from s)) else
  if reg_name = "VDISR_EL2" then Just (VDISR_EL2_ref.regval_of (VDISR_EL2_ref.read_from s)) else
  if reg_name = "VMPIDR_EL2" then Just (VMPIDR_EL2_ref.regval_of (VMPIDR_EL2_ref.read_from s)) else
  if reg_name = "VNCR_EL2" then Just (VNCR_EL2_ref.regval_of (VNCR_EL2_ref.read_from s)) else
  if reg_name = "VPIDR_EL2" then Just (VPIDR_EL2_ref.regval_of (VPIDR_EL2_ref.read_from s)) else
  if reg_name = "_V" then Just (_V_ref.regval_of (_V_ref.read_from s)) else
  if reg_name = "__currentCond" then Just (__currentCond_ref.regval_of (__currentCond_ref.read_from s)) else
  if reg_name = "__exclusive_block_address" then Just (__exclusive_block_address_ref.regval_of (__exclusive_block_address_ref.read_from s)) else
  if reg_name = "__saved_exception_level" then Just (__saved_exception_level_ref.regval_of (__saved_exception_level_ref.read_from s)) else
  if reg_name = "__unconditional" then Just (__unconditional_ref.regval_of (__unconditional_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_S" then Just (CONTEXTIDR_S_ref.regval_of (CONTEXTIDR_S_ref.read_from s)) else
  if reg_name = "_GTEExtObsAccess" then Just (_GTEExtObsAccess_ref.regval_of (_GTEExtObsAccess_ref.read_from s)) else
  if reg_name = "_GTEExtObsAddress" then Just (_GTEExtObsAddress_ref.regval_of (_GTEExtObsAddress_ref.read_from s)) else
  if reg_name = "_GTEExtObsData" then Just (_GTEExtObsData_ref.regval_of (_GTEExtObsData_ref.read_from s)) else
  if reg_name = "_GTEExtObsResult" then Just (_GTEExtObsResult_ref.regval_of (_GTEExtObsResult_ref.read_from s)) else
  if reg_name = "_GTEExtObsActive" then Just (_GTEExtObsActive_ref.regval_of (_GTEExtObsActive_ref.read_from s)) else
  if reg_name = "_GTEExtObsCount" then Just (_GTEExtObsCount_ref.regval_of (_GTEExtObsCount_ref.read_from s)) else
  if reg_name = "_GTEExtObsIndex" then Just (_GTEExtObsIndex_ref.regval_of (_GTEExtObsIndex_ref.read_from s)) else
  if reg_name = "_GTEExtObsResultIndex" then Just (_GTEExtObsResultIndex_ref.regval_of (_GTEExtObsResultIndex_ref.read_from s)) else
  if reg_name = "_GTEExtObsResultIsAddress" then Just (_GTEExtObsResultIsAddress_ref.regval_of (_GTEExtObsResultIsAddress_ref.read_from s)) else
  if reg_name = "_GTEListParam0" then Just (_GTEListParam0_ref.regval_of (_GTEListParam0_ref.read_from s)) else
  if reg_name = "_GTEListParam1" then Just (_GTEListParam1_ref.regval_of (_GTEListParam1_ref.read_from s)) else
  if reg_name = "_GTEParam" then Just (_GTEParam_ref.regval_of (_GTEParam_ref.read_from s)) else
  if reg_name = "_GTE_AS_RecordedAccess" then Just (_GTE_AS_RecordedAccess_ref.regval_of (_GTE_AS_RecordedAccess_ref.read_from s)) else
  if reg_name = "_GTE_AS_RecordedAddress" then Just (_GTE_AS_RecordedAddress_ref.regval_of (_GTE_AS_RecordedAddress_ref.read_from s)) else
  if reg_name = "_GTE_AS_RecordedData" then Just (_GTE_AS_RecordedData_ref.regval_of (_GTE_AS_RecordedData_ref.read_from s)) else
  if reg_name = "_GTE_PPU_Access" then Just (_GTE_PPU_Access_ref.regval_of (_GTE_PPU_Access_ref.read_from s)) else
  if reg_name = "_GTE_PPU_Address" then Just (_GTE_PPU_Address_ref.regval_of (_GTE_PPU_Address_ref.read_from s)) else
  if reg_name = "_GTE_PPU_SizeEn" then Just (_GTE_PPU_SizeEn_ref.regval_of (_GTE_PPU_SizeEn_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi1" then Just (AbortRgn64Hi1_ref.regval_of (AbortRgn64Hi1_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi1_Hi" then Just (AbortRgn64Hi1_Hi_ref.regval_of (AbortRgn64Hi1_Hi_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi2" then Just (AbortRgn64Hi2_ref.regval_of (AbortRgn64Hi2_ref.read_from s)) else
  if reg_name = "AbortRgn64Hi2_Hi" then Just (AbortRgn64Hi2_Hi_ref.regval_of (AbortRgn64Hi2_Hi_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo1" then Just (AbortRgn64Lo1_ref.regval_of (AbortRgn64Lo1_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo1_Hi" then Just (AbortRgn64Lo1_Hi_ref.regval_of (AbortRgn64Lo1_Hi_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo2" then Just (AbortRgn64Lo2_ref.regval_of (AbortRgn64Lo2_ref.read_from s)) else
  if reg_name = "AbortRgn64Lo2_Hi" then Just (AbortRgn64Lo2_Hi_ref.regval_of (AbortRgn64Lo2_Hi_ref.read_from s)) else
  if reg_name = "CNTCR" then Just (CNTCR_ref.regval_of (CNTCR_ref.read_from s)) else
  if reg_name = "CNTCV" then Just (CNTCV_ref.regval_of (CNTCV_ref.read_from s)) else
  if reg_name = "CNTFID0" then Just (CNTFID0_ref.regval_of (CNTFID0_ref.read_from s)) else
  if reg_name = "CNTSR" then Just (CNTSR_ref.regval_of (CNTSR_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_EL1" then Just (CONTEXTIDR_EL1_ref.regval_of (CONTEXTIDR_EL1_ref.read_from s)) else
  if reg_name = "CONTEXTIDR_EL2" then Just (CONTEXTIDR_EL2_ref.regval_of (CONTEXTIDR_EL2_ref.read_from s)) else
  if reg_name = "DACR32_EL2" then Just (DACR32_EL2_ref.regval_of (DACR32_EL2_ref.read_from s)) else
  if reg_name = "DACR_S" then Just (DACR_S_ref.regval_of (DACR_S_ref.read_from s)) else
  if reg_name = "DBGBCR" then Just (DBGBCR_ref.regval_of (DBGBCR_ref.read_from s)) else
  if reg_name = "DBGBCR_EL1" then Just (DBGBCR_EL1_ref.regval_of (DBGBCR_EL1_ref.read_from s)) else
  if reg_name = "DBGBVR" then Just (DBGBVR_ref.regval_of (DBGBVR_ref.read_from s)) else
  if reg_name = "DBGBVR_EL1" then Just (DBGBVR_EL1_ref.regval_of (DBGBVR_EL1_ref.read_from s)) else
  if reg_name = "DBGBXVR" then Just (DBGBXVR_ref.regval_of (DBGBXVR_ref.read_from s)) else
  if reg_name = "DBGDIDR" then Just (DBGDIDR_ref.regval_of (DBGDIDR_ref.read_from s)) else
  if reg_name = "DBGEN" then Just (DBGEN_ref.regval_of (DBGEN_ref.read_from s)) else
  if reg_name = "DBGPRCR_EL1" then Just (DBGPRCR_EL1_ref.regval_of (DBGPRCR_EL1_ref.read_from s)) else
  if reg_name = "DBGVCR32_EL2" then Just (DBGVCR32_EL2_ref.regval_of (DBGVCR32_EL2_ref.read_from s)) else
  if reg_name = "DBGWCR" then Just (DBGWCR_ref.regval_of (DBGWCR_ref.read_from s)) else
  if reg_name = "DBGWCR_EL1" then Just (DBGWCR_EL1_ref.regval_of (DBGWCR_EL1_ref.read_from s)) else
  if reg_name = "DBGWVR" then Just (DBGWVR_ref.regval_of (DBGWVR_ref.read_from s)) else
  if reg_name = "DBGWVR_EL1" then Just (DBGWVR_EL1_ref.regval_of (DBGWVR_EL1_ref.read_from s)) else
  if reg_name = "DLR_EL0" then Just (DLR_EL0_ref.regval_of (DLR_EL0_ref.read_from s)) else
  if reg_name = "DSPSR_EL0" then Just (DSPSR_EL0_ref.regval_of (DSPSR_EL0_ref.read_from s)) else
  if reg_name = "EDSCR" then Just (EDSCR_ref.regval_of (EDSCR_ref.read_from s)) else
  if reg_name = "DFSR_S" then Just (DFSR_S_ref.regval_of (DFSR_S_ref.read_from s)) else
  if reg_name = "ELR_EL3" then Just (ELR_EL3_ref.regval_of (ELR_EL3_ref.read_from s)) else
  if reg_name = "ELR_EL1" then Just (ELR_EL1_ref.regval_of (ELR_EL1_ref.read_from s)) else
  if reg_name = "ESR_EL3" then Just (ESR_EL3_ref.regval_of (ESR_EL3_ref.read_from s)) else
  if reg_name = "ESR_EL1" then Just (ESR_EL1_ref.regval_of (ESR_EL1_ref.read_from s)) else
  if reg_name = "ELR_EL2" then Just (ELR_EL2_ref.regval_of (ELR_EL2_ref.read_from s)) else
  if reg_name = "TCR_EL2" then Just (TCR_EL2_ref.regval_of (TCR_EL2_ref.read_from s)) else
  if reg_name = "ESR_EL2" then Just (ESR_EL2_ref.regval_of (ESR_EL2_ref.read_from s)) else
  if reg_name = "FAR_EL1" then Just (FAR_EL1_ref.regval_of (FAR_EL1_ref.read_from s)) else
  if reg_name = "FAR_EL2" then Just (FAR_EL2_ref.regval_of (FAR_EL2_ref.read_from s)) else
  if reg_name = "FAR_EL3" then Just (FAR_EL3_ref.regval_of (FAR_EL3_ref.read_from s)) else
  if reg_name = "HCR_EL2" then Just (HCR_EL2_ref.regval_of (HCR_EL2_ref.read_from s)) else
  if reg_name = "HPFAR_EL2" then Just (HPFAR_EL2_ref.regval_of (HPFAR_EL2_ref.read_from s)) else
  if reg_name = "ID_AA64DFR0_EL1" then Just (ID_AA64DFR0_EL1_ref.regval_of (ID_AA64DFR0_EL1_ref.read_from s)) else
  if reg_name = "IFSR32_EL2" then Just (IFSR32_EL2_ref.regval_of (IFSR32_EL2_ref.read_from s)) else
  if reg_name = "IFSR_S" then Just (IFSR_S_ref.regval_of (IFSR_S_ref.read_from s)) else
  if reg_name = "InGuardedPage" then Just (InGuardedPage_ref.regval_of (InGuardedPage_ref.read_from s)) else
  if reg_name = "LR_mon" then Just (LR_mon_ref.regval_of (LR_mon_ref.read_from s)) else
  if reg_name = "MAIR0_S" then Just (MAIR0_S_ref.regval_of (MAIR0_S_ref.read_from s)) else
  if reg_name = "MAIR1_S" then Just (MAIR1_S_ref.regval_of (MAIR1_S_ref.read_from s)) else
  if reg_name = "MAIR_EL1" then Just (MAIR_EL1_ref.regval_of (MAIR_EL1_ref.read_from s)) else
  if reg_name = "MAIR_EL2" then Just (MAIR_EL2_ref.regval_of (MAIR_EL2_ref.read_from s)) else
  if reg_name = "MAIR_EL3" then Just (MAIR_EL3_ref.regval_of (MAIR_EL3_ref.read_from s)) else
  if reg_name = "MDCR_EL2" then Just (MDCR_EL2_ref.regval_of (MDCR_EL2_ref.read_from s)) else
  if reg_name = "MDCR_EL3" then Just (MDCR_EL3_ref.regval_of (MDCR_EL3_ref.read_from s)) else
  if reg_name = "MDSCR_EL1" then Just (MDSCR_EL1_ref.regval_of (MDSCR_EL1_ref.read_from s)) else
  if reg_name = "MPAM0_EL1" then Just (MPAM0_EL1_ref.regval_of (MPAM0_EL1_ref.read_from s)) else
  if reg_name = "MPAM1_EL1" then Just (MPAM1_EL1_ref.regval_of (MPAM1_EL1_ref.read_from s)) else
  if reg_name = "MPAM2_EL2" then Just (MPAM2_EL2_ref.regval_of (MPAM2_EL2_ref.read_from s)) else
  if reg_name = "MPAM3_EL3" then Just (MPAM3_EL3_ref.regval_of (MPAM3_EL3_ref.read_from s)) else
  if reg_name = "MPAMHCR_EL2" then Just (MPAMHCR_EL2_ref.regval_of (MPAMHCR_EL2_ref.read_from s)) else
  if reg_name = "MPAMIDR_EL1" then Just (MPAMIDR_EL1_ref.regval_of (MPAMIDR_EL1_ref.read_from s)) else
  if reg_name = "MPAMVPM0_EL2" then Just (MPAMVPM0_EL2_ref.regval_of (MPAMVPM0_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM1_EL2" then Just (MPAMVPM1_EL2_ref.regval_of (MPAMVPM1_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM2_EL2" then Just (MPAMVPM2_EL2_ref.regval_of (MPAMVPM2_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM3_EL2" then Just (MPAMVPM3_EL2_ref.regval_of (MPAMVPM3_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM4_EL2" then Just (MPAMVPM4_EL2_ref.regval_of (MPAMVPM4_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM5_EL2" then Just (MPAMVPM5_EL2_ref.regval_of (MPAMVPM5_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM6_EL2" then Just (MPAMVPM6_EL2_ref.regval_of (MPAMVPM6_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPM7_EL2" then Just (MPAMVPM7_EL2_ref.regval_of (MPAMVPM7_EL2_ref.read_from s)) else
  if reg_name = "MPAMVPMV_EL2" then Just (MPAMVPMV_EL2_ref.regval_of (MPAMVPMV_EL2_ref.read_from s)) else
  if reg_name = "MPIDR_EL1" then Just (MPIDR_EL1_ref.regval_of (MPIDR_EL1_ref.read_from s)) else
  if reg_name = "MVBAR" then Just (MVBAR_ref.regval_of (MVBAR_ref.read_from s)) else
  if reg_name = "NMRR_S" then Just (NMRR_S_ref.regval_of (NMRR_S_ref.read_from s)) else
  if reg_name = "OSDLR_EL1" then Just (OSDLR_EL1_ref.regval_of (OSDLR_EL1_ref.read_from s)) else
  if reg_name = "OSLSR_EL1" then Just (OSLSR_EL1_ref.regval_of (OSLSR_EL1_ref.read_from s)) else
  if reg_name = "PRRR_S" then Just (PRRR_S_ref.regval_of (PRRR_S_ref.read_from s)) else
  if reg_name = "PSTATE" then Just (PSTATE_ref.regval_of (PSTATE_ref.read_from s)) else
  if reg_name = "SCR_EL3" then Just (SCR_EL3_ref.regval_of (SCR_EL3_ref.read_from s)) else
  if reg_name = "SCTLR_EL1" then Just (SCTLR_EL1_ref.regval_of (SCTLR_EL1_ref.read_from s)) else
  if reg_name = "SCTLR_EL2" then Just (SCTLR_EL2_ref.regval_of (SCTLR_EL2_ref.read_from s)) else
  if reg_name = "SCTLR_EL3" then Just (SCTLR_EL3_ref.regval_of (SCTLR_EL3_ref.read_from s)) else
  if reg_name = "SCTLR_S" then Just (SCTLR_S_ref.regval_of (SCTLR_S_ref.read_from s)) else
  if reg_name = "SDER32_EL3" then Just (SDER32_EL3_ref.regval_of (SDER32_EL3_ref.read_from s)) else
  if reg_name = "SPIDEN" then Just (SPIDEN_ref.regval_of (SPIDEN_ref.read_from s)) else
  if reg_name = "SPSR_EL1" then Just (SPSR_EL1_ref.regval_of (SPSR_EL1_ref.read_from s)) else
  if reg_name = "SPSR_EL2" then Just (SPSR_EL2_ref.regval_of (SPSR_EL2_ref.read_from s)) else
  if reg_name = "SPSR_EL3" then Just (SPSR_EL3_ref.regval_of (SPSR_EL3_ref.read_from s)) else
  if reg_name = "SPSR_abt" then Just (SPSR_abt_ref.regval_of (SPSR_abt_ref.read_from s)) else
  if reg_name = "SPSR_fiq" then Just (SPSR_fiq_ref.regval_of (SPSR_fiq_ref.read_from s)) else
  if reg_name = "SPSR_irq" then Just (SPSR_irq_ref.regval_of (SPSR_irq_ref.read_from s)) else
  if reg_name = "SPSR_und" then Just (SPSR_und_ref.regval_of (SPSR_und_ref.read_from s)) else
  if reg_name = "SP_mon" then Just (SP_mon_ref.regval_of (SP_mon_ref.read_from s)) else
  if reg_name = "ScheduledFIQ" then Just (ScheduledFIQ_ref.regval_of (ScheduledFIQ_ref.read_from s)) else
  if reg_name = "ScheduledIRQ" then Just (ScheduledIRQ_ref.regval_of (ScheduledIRQ_ref.read_from s)) else
  if reg_name = "TCR_EL1" then Just (TCR_EL1_ref.regval_of (TCR_EL1_ref.read_from s)) else
  if reg_name = "TCR_EL3" then Just (TCR_EL3_ref.regval_of (TCR_EL3_ref.read_from s)) else
  if reg_name = "TFSRE0_EL1" then Just (TFSRE0_EL1_ref.regval_of (TFSRE0_EL1_ref.read_from s)) else
  if reg_name = "TFSR_EL1" then Just (TFSR_EL1_ref.regval_of (TFSR_EL1_ref.read_from s)) else
  if reg_name = "TFSR_EL2" then Just (TFSR_EL2_ref.regval_of (TFSR_EL2_ref.read_from s)) else
  if reg_name = "TFSR_EL3" then Just (TFSR_EL3_ref.regval_of (TFSR_EL3_ref.read_from s)) else
  if reg_name = "TLBHits" then Just (TLBHits_ref.regval_of (TLBHits_ref.read_from s)) else
  if reg_name = "TLBMisses" then Just (TLBMisses_ref.regval_of (TLBMisses_ref.read_from s)) else
  if reg_name = "TTBCR2_S" then Just (TTBCR2_S_ref.regval_of (TTBCR2_S_ref.read_from s)) else
  if reg_name = "TTBCR_S" then Just (TTBCR_S_ref.regval_of (TTBCR_S_ref.read_from s)) else
  if reg_name = "TTBR0_EL1" then Just (TTBR0_EL1_ref.regval_of (TTBR0_EL1_ref.read_from s)) else
  if reg_name = "TTBR0_EL2" then Just (TTBR0_EL2_ref.regval_of (TTBR0_EL2_ref.read_from s)) else
  if reg_name = "TTBR0_EL3" then Just (TTBR0_EL3_ref.regval_of (TTBR0_EL3_ref.read_from s)) else
  if reg_name = "TTBR0_S" then Just (TTBR0_S_ref.regval_of (TTBR0_S_ref.read_from s)) else
  if reg_name = "TTBR1_EL1" then Just (TTBR1_EL1_ref.regval_of (TTBR1_EL1_ref.read_from s)) else
  if reg_name = "TTBR1_EL2" then Just (TTBR1_EL2_ref.regval_of (TTBR1_EL2_ref.read_from s)) else
  if reg_name = "TTBR1_S" then Just (TTBR1_S_ref.regval_of (TTBR1_S_ref.read_from s)) else
  if reg_name = "VBAR_EL1" then Just (VBAR_EL1_ref.regval_of (VBAR_EL1_ref.read_from s)) else
  if reg_name = "VBAR_EL2" then Just (VBAR_EL2_ref.regval_of (VBAR_EL2_ref.read_from s)) else
  if reg_name = "VBAR_EL3" then Just (VBAR_EL3_ref.regval_of (VBAR_EL3_ref.read_from s)) else
  if reg_name = "VBAR_S" then Just (VBAR_S_ref.regval_of (VBAR_S_ref.read_from s)) else
  if reg_name = "VSESR_EL2" then Just (VSESR_EL2_ref.regval_of (VSESR_EL2_ref.read_from s)) else
  if reg_name = "VSTCR_EL2" then Just (VSTCR_EL2_ref.regval_of (VSTCR_EL2_ref.read_from s)) else
  if reg_name = "VSTTBR_EL2" then Just (VSTTBR_EL2_ref.regval_of (VSTTBR_EL2_ref.read_from s)) else
  if reg_name = "VTCR_EL2" then Just (VTCR_EL2_ref.regval_of (VTCR_EL2_ref.read_from s)) else
  if reg_name = "VTTBR_EL2" then Just (VTTBR_EL2_ref.regval_of (VTTBR_EL2_ref.read_from s)) else
  if reg_name = "_AXIAbortCtl" then Just (_AXIAbortCtl_ref.regval_of (_AXIAbortCtl_ref.read_from s)) else
  if reg_name = "_ClearFIQ" then Just (_ClearFIQ_ref.regval_of (_ClearFIQ_ref.read_from s)) else
  if reg_name = "_ClearIRQ" then Just (_ClearIRQ_ref.regval_of (_ClearIRQ_ref.read_from s)) else
  if reg_name = "_FIQPending" then Just (_FIQPending_ref.regval_of (_FIQPending_ref.read_from s)) else
  if reg_name = "_GTEActive" then Just (_GTEActive_ref.regval_of (_GTEActive_ref.read_from s)) else
  if reg_name = "_GTECurrentAPI" then Just (_GTECurrentAPI_ref.regval_of (_GTECurrentAPI_ref.read_from s)) else
  if reg_name = "_GTEHaveParamLo" then Just (_GTEHaveParamLo_ref.regval_of (_GTEHaveParamLo_ref.read_from s)) else
  if reg_name = "_GTEListParam" then Just (_GTEListParam_ref.regval_of (_GTEListParam_ref.read_from s)) else
  if reg_name = "_GTEListParamIndex" then Just (_GTEListParamIndex_ref.regval_of (_GTEListParamIndex_ref.read_from s)) else
  if reg_name = "_GTEListParamTerminator" then Just (_GTEListParamTerminator_ref.regval_of (_GTEListParamTerminator_ref.read_from s)) else
  if reg_name = "_GTEListParamTerminatorCount" then Just (_GTEListParamTerminatorCount_ref.regval_of (_GTEListParamTerminatorCount_ref.read_from s)) else
  if reg_name = "_GTEListParamTerminators" then Just (_GTEListParamTerminators_ref.regval_of (_GTEListParamTerminators_ref.read_from s)) else
  if reg_name = "_GTEParamCount" then Just (_GTEParamCount_ref.regval_of (_GTEParamCount_ref.read_from s)) else
  if reg_name = "_GTEParamLo" then Just (_GTEParamLo_ref.regval_of (_GTEParamLo_ref.read_from s)) else
  if reg_name = "_GTEParamType" then Just (_GTEParamType_ref.regval_of (_GTEParamType_ref.read_from s)) else
  if reg_name = "_GTEParamsComplete" then Just (_GTEParamsComplete_ref.regval_of (_GTEParamsComplete_ref.read_from s)) else
  if reg_name = "_GTEStatus" then Just (_GTEStatus_ref.regval_of (_GTEStatus_ref.read_from s)) else
  if reg_name = "_GTE_AS_Access" then Just (_GTE_AS_Access_ref.regval_of (_GTE_AS_Access_ref.read_from s)) else
  if reg_name = "_GTE_AS_AccessCount" then Just (_GTE_AS_AccessCount_ref.regval_of (_GTE_AS_AccessCount_ref.read_from s)) else
  if reg_name = "_GTE_AS_Address" then Just (_GTE_AS_Address_ref.regval_of (_GTE_AS_Address_ref.read_from s)) else
  if reg_name = "_GTE_AS_Size" then Just (_GTE_AS_Size_ref.regval_of (_GTE_AS_Size_ref.read_from s)) else
  if reg_name = "_IRQPending" then Just (_IRQPending_ref.regval_of (_IRQPending_ref.read_from s)) else
  if reg_name = "_PC" then Just (_PC_ref.regval_of (_PC_ref.read_from s)) else
  if reg_name = "_PPURACR" then Just (_PPURACR_ref.regval_of (_PPURACR_ref.read_from s)) else
  if reg_name = "_PPURBAR" then Just (_PPURBAR_ref.regval_of (_PPURBAR_ref.read_from s)) else
  if reg_name = "_PPURSER" then Just (_PPURSER_ref.regval_of (_PPURSER_ref.read_from s)) else
  if reg_name = "_PendingPhysicalSE" then Just (_PendingPhysicalSE_ref.regval_of (_PendingPhysicalSE_ref.read_from s)) else
  if reg_name = "_R" then Just (_R_ref.regval_of (_R_ref.read_from s)) else
  if reg_name = "_ScheduleFIQ" then Just (_ScheduleFIQ_ref.regval_of (_ScheduleFIQ_ref.read_from s)) else
  if reg_name = "_ScheduleIRQ" then Just (_ScheduleIRQ_ref.regval_of (_ScheduleIRQ_ref.read_from s)) else
  if reg_name = "_TLB" then Just (_TLB_ref.regval_of (_TLB_ref.read_from s)) else
  if reg_name = "_TargetCPU" then Just (_TargetCPU_ref.regval_of (_TargetCPU_ref.read_from s)) else
  if reg_name = "__CNTControlBase" then Just (__CNTControlBase_ref.regval_of (__CNTControlBase_ref.read_from s)) else
  if reg_name = "__LSISyndrome" then Just (__LSISyndrome_ref.regval_of (__LSISyndrome_ref.read_from s)) else
  if reg_name = "__PC_changed" then Just (__PC_changed_ref.regval_of (__PC_changed_ref.read_from s)) else
  if reg_name = "__currentInstr" then Just (__currentInstr_ref.regval_of (__currentInstr_ref.read_from s)) else
  if reg_name = "__currentInstrLength" then Just (__currentInstrLength_ref.regval_of (__currentInstrLength_ref.read_from s)) else
  if reg_name = "__defaultRAM" then Just (__defaultRAM_ref.regval_of (__defaultRAM_ref.read_from s)) else
  if reg_name = "__highest_el_aarch32" then Just (__highest_el_aarch32_ref.regval_of (__highest_el_aarch32_ref.read_from s)) else
  Nothing

val set_regval : string -> register_value -> regstate -> maybe regstate
let set_regval reg_name v s =
  if reg_name = "CNTHCTL_EL2" then Maybe.map (fun v -> CNTHCTL_EL2_ref.write_to v s) (CNTHCTL_EL2_ref.of_regval v) else
  if reg_name = "CPTR_EL2" then Maybe.map (fun v -> CPTR_EL2_ref.write_to v s) (CPTR_EL2_ref.of_regval v) else
  if reg_name = "CCSIDR_EL1" then Maybe.map (fun v -> CCSIDR_EL1_ref.write_to v s) (CCSIDR_EL1_ref.of_regval v) else
  if reg_name = "ACTLR_EL1" then Maybe.map (fun v -> ACTLR_EL1_ref.write_to v s) (ACTLR_EL1_ref.of_regval v) else
  if reg_name = "ACTLR_EL2" then Maybe.map (fun v -> ACTLR_EL2_ref.write_to v s) (ACTLR_EL2_ref.of_regval v) else
  if reg_name = "ACTLR_EL3" then Maybe.map (fun v -> ACTLR_EL3_ref.write_to v s) (ACTLR_EL3_ref.of_regval v) else
  if reg_name = "AFSR0_EL1" then Maybe.map (fun v -> AFSR0_EL1_ref.write_to v s) (AFSR0_EL1_ref.of_regval v) else
  if reg_name = "AFSR0_EL2" then Maybe.map (fun v -> AFSR0_EL2_ref.write_to v s) (AFSR0_EL2_ref.of_regval v) else
  if reg_name = "AFSR0_EL3" then Maybe.map (fun v -> AFSR0_EL3_ref.write_to v s) (AFSR0_EL3_ref.of_regval v) else
  if reg_name = "AFSR1_EL1" then Maybe.map (fun v -> AFSR1_EL1_ref.write_to v s) (AFSR1_EL1_ref.of_regval v) else
  if reg_name = "AFSR1_EL2" then Maybe.map (fun v -> AFSR1_EL2_ref.write_to v s) (AFSR1_EL2_ref.of_regval v) else
  if reg_name = "AFSR1_EL3" then Maybe.map (fun v -> AFSR1_EL3_ref.write_to v s) (AFSR1_EL3_ref.of_regval v) else
  if reg_name = "AIDR_EL1" then Maybe.map (fun v -> AIDR_EL1_ref.write_to v s) (AIDR_EL1_ref.of_regval v) else
  if reg_name = "AMAIR_EL1" then Maybe.map (fun v -> AMAIR_EL1_ref.write_to v s) (AMAIR_EL1_ref.of_regval v) else
  if reg_name = "AMAIR_EL2" then Maybe.map (fun v -> AMAIR_EL2_ref.write_to v s) (AMAIR_EL2_ref.of_regval v) else
  if reg_name = "AMAIR_EL3" then Maybe.map (fun v -> AMAIR_EL3_ref.write_to v s) (AMAIR_EL3_ref.of_regval v) else
  if reg_name = "APDAKeyHi_EL1" then Maybe.map (fun v -> APDAKeyHi_EL1_ref.write_to v s) (APDAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APDAKeyLo_EL1" then Maybe.map (fun v -> APDAKeyLo_EL1_ref.write_to v s) (APDAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APDBKeyHi_EL1" then Maybe.map (fun v -> APDBKeyHi_EL1_ref.write_to v s) (APDBKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APDBKeyLo_EL1" then Maybe.map (fun v -> APDBKeyLo_EL1_ref.write_to v s) (APDBKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APGAKeyHi_EL1" then Maybe.map (fun v -> APGAKeyHi_EL1_ref.write_to v s) (APGAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APGAKeyLo_EL1" then Maybe.map (fun v -> APGAKeyLo_EL1_ref.write_to v s) (APGAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APIAKeyHi_EL1" then Maybe.map (fun v -> APIAKeyHi_EL1_ref.write_to v s) (APIAKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APIAKeyLo_EL1" then Maybe.map (fun v -> APIAKeyLo_EL1_ref.write_to v s) (APIAKeyLo_EL1_ref.of_regval v) else
  if reg_name = "APIBKeyHi_EL1" then Maybe.map (fun v -> APIBKeyHi_EL1_ref.write_to v s) (APIBKeyHi_EL1_ref.of_regval v) else
  if reg_name = "APIBKeyLo_EL1" then Maybe.map (fun v -> APIBKeyLo_EL1_ref.write_to v s) (APIBKeyLo_EL1_ref.of_regval v) else
  if reg_name = "BTypeCompatible" then Maybe.map (fun v -> BTypeCompatible_ref.write_to v s) (BTypeCompatible_ref.of_regval v) else
  if reg_name = "BTypeNext" then Maybe.map (fun v -> BTypeNext_ref.write_to v s) (BTypeNext_ref.of_regval v) else
  if reg_name = "CCSIDR2_EL1" then Maybe.map (fun v -> CCSIDR2_EL1_ref.write_to v s) (CCSIDR2_EL1_ref.of_regval v) else
  if reg_name = "CLIDR_EL1" then Maybe.map (fun v -> CLIDR_EL1_ref.write_to v s) (CLIDR_EL1_ref.of_regval v) else
  if reg_name = "CNTFRQ_EL0" then Maybe.map (fun v -> CNTFRQ_EL0_ref.write_to v s) (CNTFRQ_EL0_ref.of_regval v) else
  if reg_name = "CNTHPS_CTL_EL2" then Maybe.map (fun v -> CNTHPS_CTL_EL2_ref.write_to v s) (CNTHPS_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHPS_CVAL_EL2" then Maybe.map (fun v -> CNTHPS_CVAL_EL2_ref.write_to v s) (CNTHPS_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHPS_TVAL_EL2" then Maybe.map (fun v -> CNTHPS_TVAL_EL2_ref.write_to v s) (CNTHPS_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHP_CTL_EL2" then Maybe.map (fun v -> CNTHP_CTL_EL2_ref.write_to v s) (CNTHP_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHP_CVAL_EL2" then Maybe.map (fun v -> CNTHP_CVAL_EL2_ref.write_to v s) (CNTHP_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHP_TVAL_EL2" then Maybe.map (fun v -> CNTHP_TVAL_EL2_ref.write_to v s) (CNTHP_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHVS_CTL_EL2" then Maybe.map (fun v -> CNTHVS_CTL_EL2_ref.write_to v s) (CNTHVS_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHVS_CVAL_EL2" then Maybe.map (fun v -> CNTHVS_CVAL_EL2_ref.write_to v s) (CNTHVS_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHVS_TVAL_EL2" then Maybe.map (fun v -> CNTHVS_TVAL_EL2_ref.write_to v s) (CNTHVS_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHV_CTL_EL2" then Maybe.map (fun v -> CNTHV_CTL_EL2_ref.write_to v s) (CNTHV_CTL_EL2_ref.of_regval v) else
  if reg_name = "CNTHV_CVAL_EL2" then Maybe.map (fun v -> CNTHV_CVAL_EL2_ref.write_to v s) (CNTHV_CVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTHV_TVAL_EL2" then Maybe.map (fun v -> CNTHV_TVAL_EL2_ref.write_to v s) (CNTHV_TVAL_EL2_ref.of_regval v) else
  if reg_name = "CNTKCTL_EL1" then Maybe.map (fun v -> CNTKCTL_EL1_ref.write_to v s) (CNTKCTL_EL1_ref.of_regval v) else
  if reg_name = "CNTPCT_EL0" then Maybe.map (fun v -> CNTPCT_EL0_ref.write_to v s) (CNTPCT_EL0_ref.of_regval v) else
  if reg_name = "CNTPS_CTL_EL1" then Maybe.map (fun v -> CNTPS_CTL_EL1_ref.write_to v s) (CNTPS_CTL_EL1_ref.of_regval v) else
  if reg_name = "CNTPS_CVAL_EL1" then Maybe.map (fun v -> CNTPS_CVAL_EL1_ref.write_to v s) (CNTPS_CVAL_EL1_ref.of_regval v) else
  if reg_name = "CNTPS_TVAL_EL1" then Maybe.map (fun v -> CNTPS_TVAL_EL1_ref.write_to v s) (CNTPS_TVAL_EL1_ref.of_regval v) else
  if reg_name = "CNTP_CTL_EL0" then Maybe.map (fun v -> CNTP_CTL_EL0_ref.write_to v s) (CNTP_CTL_EL0_ref.of_regval v) else
  if reg_name = "CNTP_CTL_S" then Maybe.map (fun v -> CNTP_CTL_S_ref.write_to v s) (CNTP_CTL_S_ref.of_regval v) else
  if reg_name = "CNTP_CVAL_EL0" then Maybe.map (fun v -> CNTP_CVAL_EL0_ref.write_to v s) (CNTP_CVAL_EL0_ref.of_regval v) else
  if reg_name = "CNTP_TVAL_EL0" then Maybe.map (fun v -> CNTP_TVAL_EL0_ref.write_to v s) (CNTP_TVAL_EL0_ref.of_regval v) else
  if reg_name = "CNTVCT_EL0" then Maybe.map (fun v -> CNTVCT_EL0_ref.write_to v s) (CNTVCT_EL0_ref.of_regval v) else
  if reg_name = "CNTVOFF_EL2" then Maybe.map (fun v -> CNTVOFF_EL2_ref.write_to v s) (CNTVOFF_EL2_ref.of_regval v) else
  if reg_name = "CNTV_CTL_EL0" then Maybe.map (fun v -> CNTV_CTL_EL0_ref.write_to v s) (CNTV_CTL_EL0_ref.of_regval v) else
  if reg_name = "CNTV_CVAL_EL0" then Maybe.map (fun v -> CNTV_CVAL_EL0_ref.write_to v s) (CNTV_CVAL_EL0_ref.of_regval v) else
  if reg_name = "CNTV_TVAL_EL0" then Maybe.map (fun v -> CNTV_TVAL_EL0_ref.write_to v s) (CNTV_TVAL_EL0_ref.of_regval v) else
  if reg_name = "CPACR_EL1" then Maybe.map (fun v -> CPACR_EL1_ref.write_to v s) (CPACR_EL1_ref.of_regval v) else
  if reg_name = "CPTR_EL3" then Maybe.map (fun v -> CPTR_EL3_ref.write_to v s) (CPTR_EL3_ref.of_regval v) else
  if reg_name = "CSSELR_EL1" then Maybe.map (fun v -> CSSELR_EL1_ref.write_to v s) (CSSELR_EL1_ref.of_regval v) else
  if reg_name = "CSSELR_S" then Maybe.map (fun v -> CSSELR_S_ref.write_to v s) (CSSELR_S_ref.of_regval v) else
  if reg_name = "CTR_EL0" then Maybe.map (fun v -> CTR_EL0_ref.write_to v s) (CTR_EL0_ref.of_regval v) else
  if reg_name = "DBGAUTHSTATUS_EL1" then Maybe.map (fun v -> DBGAUTHSTATUS_EL1_ref.write_to v s) (DBGAUTHSTATUS_EL1_ref.of_regval v) else
  if reg_name = "DBGCLAIMCLR_EL1" then Maybe.map (fun v -> DBGCLAIMCLR_EL1_ref.write_to v s) (DBGCLAIMCLR_EL1_ref.of_regval v) else
  if reg_name = "DBGCLAIMSET_EL1" then Maybe.map (fun v -> DBGCLAIMSET_EL1_ref.write_to v s) (DBGCLAIMSET_EL1_ref.of_regval v) else
  if reg_name = "DBGDEVID1" then Maybe.map (fun v -> DBGDEVID1_ref.write_to v s) (DBGDEVID1_ref.of_regval v) else
  if reg_name = "DBGDEVID2" then Maybe.map (fun v -> DBGDEVID2_ref.write_to v s) (DBGDEVID2_ref.of_regval v) else
  if reg_name = "DBGDSCRint" then Maybe.map (fun v -> DBGDSCRint_ref.write_to v s) (DBGDSCRint_ref.of_regval v) else
  if reg_name = "DBGDTRRX_EL0" then Maybe.map (fun v -> DBGDTRRX_EL0_ref.write_to v s) (DBGDTRRX_EL0_ref.of_regval v) else
  if reg_name = "DBGDTRTX_EL0" then Maybe.map (fun v -> DBGDTRTX_EL0_ref.write_to v s) (DBGDTRTX_EL0_ref.of_regval v) else
  if reg_name = "DBGDTR_EL0" then Maybe.map (fun v -> DBGDTR_EL0_ref.write_to v s) (DBGDTR_EL0_ref.of_regval v) else
  if reg_name = "DBGWFAR" then Maybe.map (fun v -> DBGWFAR_ref.write_to v s) (DBGWFAR_ref.of_regval v) else
  if reg_name = "DCZID_EL0" then Maybe.map (fun v -> DCZID_EL0_ref.write_to v s) (DCZID_EL0_ref.of_regval v) else
  if reg_name = "DISR_EL1" then Maybe.map (fun v -> DISR_EL1_ref.write_to v s) (DISR_EL1_ref.of_regval v) else
  if reg_name = "EDECCR" then Maybe.map (fun v -> EDECCR_ref.write_to v s) (EDECCR_ref.of_regval v) else
  if reg_name = "EDECR" then Maybe.map (fun v -> EDECR_ref.write_to v s) (EDECR_ref.of_regval v) else
  if reg_name = "EDESR" then Maybe.map (fun v -> EDESR_ref.write_to v s) (EDESR_ref.of_regval v) else
  if reg_name = "EDLSR" then Maybe.map (fun v -> EDLSR_ref.write_to v s) (EDLSR_ref.of_regval v) else
  if reg_name = "EDPCSR" then Maybe.map (fun v -> EDPCSR_ref.write_to v s) (EDPCSR_ref.of_regval v) else
  if reg_name = "EDPFR" then Maybe.map (fun v -> EDPFR_ref.write_to v s) (EDPFR_ref.of_regval v) else
  if reg_name = "EDPRCR" then Maybe.map (fun v -> EDPRCR_ref.write_to v s) (EDPRCR_ref.of_regval v) else
  if reg_name = "EDPRSR" then Maybe.map (fun v -> EDPRSR_ref.write_to v s) (EDPRSR_ref.of_regval v) else
  if reg_name = "EDVIDSR" then Maybe.map (fun v -> EDVIDSR_ref.write_to v s) (EDVIDSR_ref.of_regval v) else
  if reg_name = "ELR_EL0" then Maybe.map (fun v -> ELR_EL0_ref.write_to v s) (ELR_EL0_ref.of_regval v) else
  if reg_name = "ESP_EL0" then Maybe.map (fun v -> ESP_EL0_ref.write_to v s) (ESP_EL0_ref.of_regval v) else
  if reg_name = "ESR_EL0" then Maybe.map (fun v -> ESR_EL0_ref.write_to v s) (ESR_EL0_ref.of_regval v) else
  if reg_name = "EventRegister" then Maybe.map (fun v -> EventRegister_ref.write_to v s) (EventRegister_ref.of_regval v) else
  if reg_name = "FAR_EL0" then Maybe.map (fun v -> FAR_EL0_ref.write_to v s) (FAR_EL0_ref.of_regval v) else
  if reg_name = "FCSEIDR" then Maybe.map (fun v -> FCSEIDR_ref.write_to v s) (FCSEIDR_ref.of_regval v) else
  if reg_name = "FPCR" then Maybe.map (fun v -> FPCR_ref.write_to v s) (FPCR_ref.of_regval v) else
  if reg_name = "FPEXC32_EL2" then Maybe.map (fun v -> FPEXC32_EL2_ref.write_to v s) (FPEXC32_EL2_ref.of_regval v) else
  if reg_name = "FPSCR" then Maybe.map (fun v -> FPSCR_ref.write_to v s) (FPSCR_ref.of_regval v) else
  if reg_name = "FPSID" then Maybe.map (fun v -> FPSID_ref.write_to v s) (FPSID_ref.of_regval v) else
  if reg_name = "FPSR" then Maybe.map (fun v -> FPSR_ref.write_to v s) (FPSR_ref.of_regval v) else
  if reg_name = "GCR_EL1" then Maybe.map (fun v -> GCR_EL1_ref.write_to v s) (GCR_EL1_ref.of_regval v) else
  if reg_name = "HACR_EL2" then Maybe.map (fun v -> HACR_EL2_ref.write_to v s) (HACR_EL2_ref.of_regval v) else
  if reg_name = "HSTR_EL2" then Maybe.map (fun v -> HSTR_EL2_ref.write_to v s) (HSTR_EL2_ref.of_regval v) else
  if reg_name = "ICC_AP0R_EL1" then Maybe.map (fun v -> ICC_AP0R_EL1_ref.write_to v s) (ICC_AP0R_EL1_ref.of_regval v) else
  if reg_name = "ICC_AP1R_EL1" then Maybe.map (fun v -> ICC_AP1R_EL1_ref.write_to v s) (ICC_AP1R_EL1_ref.of_regval v) else
  if reg_name = "ICC_ASGI1R_EL1" then Maybe.map (fun v -> ICC_ASGI1R_EL1_ref.write_to v s) (ICC_ASGI1R_EL1_ref.of_regval v) else
  if reg_name = "ICC_BPR0_EL1" then Maybe.map (fun v -> ICC_BPR0_EL1_ref.write_to v s) (ICC_BPR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_BPR1_EL1_NS" then Maybe.map (fun v -> ICC_BPR1_EL1_NS_ref.write_to v s) (ICC_BPR1_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_BPR1_EL1_S" then Maybe.map (fun v -> ICC_BPR1_EL1_S_ref.write_to v s) (ICC_BPR1_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_CTLR_EL1_NS" then Maybe.map (fun v -> ICC_CTLR_EL1_NS_ref.write_to v s) (ICC_CTLR_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_CTLR_EL1_S" then Maybe.map (fun v -> ICC_CTLR_EL1_S_ref.write_to v s) (ICC_CTLR_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_CTLR_EL3" then Maybe.map (fun v -> ICC_CTLR_EL3_ref.write_to v s) (ICC_CTLR_EL3_ref.of_regval v) else
  if reg_name = "ICC_DIR_EL1" then Maybe.map (fun v -> ICC_DIR_EL1_ref.write_to v s) (ICC_DIR_EL1_ref.of_regval v) else
  if reg_name = "ICC_EOIR0_EL1" then Maybe.map (fun v -> ICC_EOIR0_EL1_ref.write_to v s) (ICC_EOIR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_EOIR1_EL1" then Maybe.map (fun v -> ICC_EOIR1_EL1_ref.write_to v s) (ICC_EOIR1_EL1_ref.of_regval v) else
  if reg_name = "ICC_HPPIR0_EL1" then Maybe.map (fun v -> ICC_HPPIR0_EL1_ref.write_to v s) (ICC_HPPIR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_HPPIR1_EL1" then Maybe.map (fun v -> ICC_HPPIR1_EL1_ref.write_to v s) (ICC_HPPIR1_EL1_ref.of_regval v) else
  if reg_name = "ICC_IAR0_EL1" then Maybe.map (fun v -> ICC_IAR0_EL1_ref.write_to v s) (ICC_IAR0_EL1_ref.of_regval v) else
  if reg_name = "ICC_IAR1_EL1" then Maybe.map (fun v -> ICC_IAR1_EL1_ref.write_to v s) (ICC_IAR1_EL1_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN0_EL1" then Maybe.map (fun v -> ICC_IGRPEN0_EL1_ref.write_to v s) (ICC_IGRPEN0_EL1_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN1_EL1_NS" then Maybe.map (fun v -> ICC_IGRPEN1_EL1_NS_ref.write_to v s) (ICC_IGRPEN1_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN1_EL1_S" then Maybe.map (fun v -> ICC_IGRPEN1_EL1_S_ref.write_to v s) (ICC_IGRPEN1_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_IGRPEN1_EL3" then Maybe.map (fun v -> ICC_IGRPEN1_EL3_ref.write_to v s) (ICC_IGRPEN1_EL3_ref.of_regval v) else
  if reg_name = "ICC_PMR_EL1" then Maybe.map (fun v -> ICC_PMR_EL1_ref.write_to v s) (ICC_PMR_EL1_ref.of_regval v) else
  if reg_name = "ICC_RPR_EL1" then Maybe.map (fun v -> ICC_RPR_EL1_ref.write_to v s) (ICC_RPR_EL1_ref.of_regval v) else
  if reg_name = "ICC_SGI0R_EL1" then Maybe.map (fun v -> ICC_SGI0R_EL1_ref.write_to v s) (ICC_SGI0R_EL1_ref.of_regval v) else
  if reg_name = "ICC_SGI1R_EL1" then Maybe.map (fun v -> ICC_SGI1R_EL1_ref.write_to v s) (ICC_SGI1R_EL1_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL1_NS" then Maybe.map (fun v -> ICC_SRE_EL1_NS_ref.write_to v s) (ICC_SRE_EL1_NS_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL1_S" then Maybe.map (fun v -> ICC_SRE_EL1_S_ref.write_to v s) (ICC_SRE_EL1_S_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL2" then Maybe.map (fun v -> ICC_SRE_EL2_ref.write_to v s) (ICC_SRE_EL2_ref.of_regval v) else
  if reg_name = "ICC_SRE_EL3" then Maybe.map (fun v -> ICC_SRE_EL3_ref.write_to v s) (ICC_SRE_EL3_ref.of_regval v) else
  if reg_name = "ICH_AP0R_EL2" then Maybe.map (fun v -> ICH_AP0R_EL2_ref.write_to v s) (ICH_AP0R_EL2_ref.of_regval v) else
  if reg_name = "ICH_AP1R_EL2" then Maybe.map (fun v -> ICH_AP1R_EL2_ref.write_to v s) (ICH_AP1R_EL2_ref.of_regval v) else
  if reg_name = "ICH_EISR_EL2" then Maybe.map (fun v -> ICH_EISR_EL2_ref.write_to v s) (ICH_EISR_EL2_ref.of_regval v) else
  if reg_name = "ICH_ELRSR_EL2" then Maybe.map (fun v -> ICH_ELRSR_EL2_ref.write_to v s) (ICH_ELRSR_EL2_ref.of_regval v) else
  if reg_name = "ICH_HCR_EL2" then Maybe.map (fun v -> ICH_HCR_EL2_ref.write_to v s) (ICH_HCR_EL2_ref.of_regval v) else
  if reg_name = "ICH_MISR_EL2" then Maybe.map (fun v -> ICH_MISR_EL2_ref.write_to v s) (ICH_MISR_EL2_ref.of_regval v) else
  if reg_name = "ICH_VMCR_EL2" then Maybe.map (fun v -> ICH_VMCR_EL2_ref.write_to v s) (ICH_VMCR_EL2_ref.of_regval v) else
  if reg_name = "ICH_VTR_EL2" then Maybe.map (fun v -> ICH_VTR_EL2_ref.write_to v s) (ICH_VTR_EL2_ref.of_regval v) else
  if reg_name = "ICV_AP0R_EL1" then Maybe.map (fun v -> ICV_AP0R_EL1_ref.write_to v s) (ICV_AP0R_EL1_ref.of_regval v) else
  if reg_name = "ICV_AP1R_EL1" then Maybe.map (fun v -> ICV_AP1R_EL1_ref.write_to v s) (ICV_AP1R_EL1_ref.of_regval v) else
  if reg_name = "ICV_BPR0_EL1" then Maybe.map (fun v -> ICV_BPR0_EL1_ref.write_to v s) (ICV_BPR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_BPR1_EL1" then Maybe.map (fun v -> ICV_BPR1_EL1_ref.write_to v s) (ICV_BPR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_CTLR_EL1" then Maybe.map (fun v -> ICV_CTLR_EL1_ref.write_to v s) (ICV_CTLR_EL1_ref.of_regval v) else
  if reg_name = "ICV_DIR_EL1" then Maybe.map (fun v -> ICV_DIR_EL1_ref.write_to v s) (ICV_DIR_EL1_ref.of_regval v) else
  if reg_name = "ICV_EOIR0_EL1" then Maybe.map (fun v -> ICV_EOIR0_EL1_ref.write_to v s) (ICV_EOIR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_EOIR1_EL1" then Maybe.map (fun v -> ICV_EOIR1_EL1_ref.write_to v s) (ICV_EOIR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_HPPIR0_EL1" then Maybe.map (fun v -> ICV_HPPIR0_EL1_ref.write_to v s) (ICV_HPPIR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_HPPIR1_EL1" then Maybe.map (fun v -> ICV_HPPIR1_EL1_ref.write_to v s) (ICV_HPPIR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_IAR0_EL1" then Maybe.map (fun v -> ICV_IAR0_EL1_ref.write_to v s) (ICV_IAR0_EL1_ref.of_regval v) else
  if reg_name = "ICV_IAR1_EL1" then Maybe.map (fun v -> ICV_IAR1_EL1_ref.write_to v s) (ICV_IAR1_EL1_ref.of_regval v) else
  if reg_name = "ICV_IGRPEN0_EL1" then Maybe.map (fun v -> ICV_IGRPEN0_EL1_ref.write_to v s) (ICV_IGRPEN0_EL1_ref.of_regval v) else
  if reg_name = "ICV_IGRPEN1_EL1" then Maybe.map (fun v -> ICV_IGRPEN1_EL1_ref.write_to v s) (ICV_IGRPEN1_EL1_ref.of_regval v) else
  if reg_name = "ICV_PMR_EL1" then Maybe.map (fun v -> ICV_PMR_EL1_ref.write_to v s) (ICV_PMR_EL1_ref.of_regval v) else
  if reg_name = "ICV_RPR_EL1" then Maybe.map (fun v -> ICV_RPR_EL1_ref.write_to v s) (ICV_RPR_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64AFR0_EL1" then Maybe.map (fun v -> ID_AA64AFR0_EL1_ref.write_to v s) (ID_AA64AFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64AFR1_EL1" then Maybe.map (fun v -> ID_AA64AFR1_EL1_ref.write_to v s) (ID_AA64AFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64DFR1_EL1" then Maybe.map (fun v -> ID_AA64DFR1_EL1_ref.write_to v s) (ID_AA64DFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64ISAR0_EL1" then Maybe.map (fun v -> ID_AA64ISAR0_EL1_ref.write_to v s) (ID_AA64ISAR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64ISAR1_EL1" then Maybe.map (fun v -> ID_AA64ISAR1_EL1_ref.write_to v s) (ID_AA64ISAR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64MMFR0_EL1" then Maybe.map (fun v -> ID_AA64MMFR0_EL1_ref.write_to v s) (ID_AA64MMFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64MMFR1_EL1" then Maybe.map (fun v -> ID_AA64MMFR1_EL1_ref.write_to v s) (ID_AA64MMFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64MMFR2_EL1" then Maybe.map (fun v -> ID_AA64MMFR2_EL1_ref.write_to v s) (ID_AA64MMFR2_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64PFR0_EL1" then Maybe.map (fun v -> ID_AA64PFR0_EL1_ref.write_to v s) (ID_AA64PFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_AA64PFR1_EL1" then Maybe.map (fun v -> ID_AA64PFR1_EL1_ref.write_to v s) (ID_AA64PFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_AFR0_EL1" then Maybe.map (fun v -> ID_AFR0_EL1_ref.write_to v s) (ID_AFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_DFR0_EL1" then Maybe.map (fun v -> ID_DFR0_EL1_ref.write_to v s) (ID_DFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR0_EL1" then Maybe.map (fun v -> ID_ISAR0_EL1_ref.write_to v s) (ID_ISAR0_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR1_EL1" then Maybe.map (fun v -> ID_ISAR1_EL1_ref.write_to v s) (ID_ISAR1_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR2_EL1" then Maybe.map (fun v -> ID_ISAR2_EL1_ref.write_to v s) (ID_ISAR2_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR3_EL1" then Maybe.map (fun v -> ID_ISAR3_EL1_ref.write_to v s) (ID_ISAR3_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR4_EL1" then Maybe.map (fun v -> ID_ISAR4_EL1_ref.write_to v s) (ID_ISAR4_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR5_EL1" then Maybe.map (fun v -> ID_ISAR5_EL1_ref.write_to v s) (ID_ISAR5_EL1_ref.of_regval v) else
  if reg_name = "ID_ISAR6_EL1" then Maybe.map (fun v -> ID_ISAR6_EL1_ref.write_to v s) (ID_ISAR6_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR0_EL1" then Maybe.map (fun v -> ID_MMFR0_EL1_ref.write_to v s) (ID_MMFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR1_EL1" then Maybe.map (fun v -> ID_MMFR1_EL1_ref.write_to v s) (ID_MMFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR2_EL1" then Maybe.map (fun v -> ID_MMFR2_EL1_ref.write_to v s) (ID_MMFR2_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR3_EL1" then Maybe.map (fun v -> ID_MMFR3_EL1_ref.write_to v s) (ID_MMFR3_EL1_ref.of_regval v) else
  if reg_name = "ID_MMFR4_EL1" then Maybe.map (fun v -> ID_MMFR4_EL1_ref.write_to v s) (ID_MMFR4_EL1_ref.of_regval v) else
  if reg_name = "ID_PFR0_EL1" then Maybe.map (fun v -> ID_PFR0_EL1_ref.write_to v s) (ID_PFR0_EL1_ref.of_regval v) else
  if reg_name = "ID_PFR1_EL1" then Maybe.map (fun v -> ID_PFR1_EL1_ref.write_to v s) (ID_PFR1_EL1_ref.of_regval v) else
  if reg_name = "ID_PFR2_EL1" then Maybe.map (fun v -> ID_PFR2_EL1_ref.write_to v s) (ID_PFR2_EL1_ref.of_regval v) else
  if reg_name = "ISR_EL1" then Maybe.map (fun v -> ISR_EL1_ref.write_to v s) (ISR_EL1_ref.of_regval v) else
  if reg_name = "LORC_EL1" then Maybe.map (fun v -> LORC_EL1_ref.write_to v s) (LORC_EL1_ref.of_regval v) else
  if reg_name = "LOREA_EL1" then Maybe.map (fun v -> LOREA_EL1_ref.write_to v s) (LOREA_EL1_ref.of_regval v) else
  if reg_name = "LORID_EL1" then Maybe.map (fun v -> LORID_EL1_ref.write_to v s) (LORID_EL1_ref.of_regval v) else
  if reg_name = "LORN_EL1" then Maybe.map (fun v -> LORN_EL1_ref.write_to v s) (LORN_EL1_ref.of_regval v) else
  if reg_name = "LORSA_EL1" then Maybe.map (fun v -> LORSA_EL1_ref.write_to v s) (LORSA_EL1_ref.of_regval v) else
  if reg_name = "MDCCINT_EL1" then Maybe.map (fun v -> MDCCINT_EL1_ref.write_to v s) (MDCCINT_EL1_ref.of_regval v) else
  if reg_name = "MDCCSR_EL0" then Maybe.map (fun v -> MDCCSR_EL0_ref.write_to v s) (MDCCSR_EL0_ref.of_regval v) else
  if reg_name = "MDRAR_EL1" then Maybe.map (fun v -> MDRAR_EL1_ref.write_to v s) (MDRAR_EL1_ref.of_regval v) else
  if reg_name = "MIDR_EL1" then Maybe.map (fun v -> MIDR_EL1_ref.write_to v s) (MIDR_EL1_ref.of_regval v) else
  if reg_name = "MVFR0_EL1" then Maybe.map (fun v -> MVFR0_EL1_ref.write_to v s) (MVFR0_EL1_ref.of_regval v) else
  if reg_name = "MVFR1_EL1" then Maybe.map (fun v -> MVFR1_EL1_ref.write_to v s) (MVFR1_EL1_ref.of_regval v) else
  if reg_name = "MVFR2_EL1" then Maybe.map (fun v -> MVFR2_EL1_ref.write_to v s) (MVFR2_EL1_ref.of_regval v) else
  if reg_name = "NSACR" then Maybe.map (fun v -> NSACR_ref.write_to v s) (NSACR_ref.of_regval v) else
  if reg_name = "OSDTRRX_EL1" then Maybe.map (fun v -> OSDTRRX_EL1_ref.write_to v s) (OSDTRRX_EL1_ref.of_regval v) else
  if reg_name = "OSDTRTX_EL1" then Maybe.map (fun v -> OSDTRTX_EL1_ref.write_to v s) (OSDTRTX_EL1_ref.of_regval v) else
  if reg_name = "OSECCR_EL1" then Maybe.map (fun v -> OSECCR_EL1_ref.write_to v s) (OSECCR_EL1_ref.of_regval v) else
  if reg_name = "OSLAR_EL1" then Maybe.map (fun v -> OSLAR_EL1_ref.write_to v s) (OSLAR_EL1_ref.of_regval v) else
  if reg_name = "PAR_EL1" then Maybe.map (fun v -> PAR_EL1_ref.write_to v s) (PAR_EL1_ref.of_regval v) else
  if reg_name = "PAR_S" then Maybe.map (fun v -> PAR_S_ref.write_to v s) (PAR_S_ref.of_regval v) else
  if reg_name = "PMCCFILTR_EL0" then Maybe.map (fun v -> PMCCFILTR_EL0_ref.write_to v s) (PMCCFILTR_EL0_ref.of_regval v) else
  if reg_name = "PMCCNTR_EL0" then Maybe.map (fun v -> PMCCNTR_EL0_ref.write_to v s) (PMCCNTR_EL0_ref.of_regval v) else
  if reg_name = "PMCEID0_EL0" then Maybe.map (fun v -> PMCEID0_EL0_ref.write_to v s) (PMCEID0_EL0_ref.of_regval v) else
  if reg_name = "PMCEID1_EL0" then Maybe.map (fun v -> PMCEID1_EL0_ref.write_to v s) (PMCEID1_EL0_ref.of_regval v) else
  if reg_name = "PMCNTENCLR_EL0" then Maybe.map (fun v -> PMCNTENCLR_EL0_ref.write_to v s) (PMCNTENCLR_EL0_ref.of_regval v) else
  if reg_name = "PMCNTENSET_EL0" then Maybe.map (fun v -> PMCNTENSET_EL0_ref.write_to v s) (PMCNTENSET_EL0_ref.of_regval v) else
  if reg_name = "PMCR_EL0" then Maybe.map (fun v -> PMCR_EL0_ref.write_to v s) (PMCR_EL0_ref.of_regval v) else
  if reg_name = "PMEVCNTR_EL0" then Maybe.map (fun v -> PMEVCNTR_EL0_ref.write_to v s) (PMEVCNTR_EL0_ref.of_regval v) else
  if reg_name = "PMEVTYPER_EL0" then Maybe.map (fun v -> PMEVTYPER_EL0_ref.write_to v s) (PMEVTYPER_EL0_ref.of_regval v) else
  if reg_name = "PMINTENCLR_EL1" then Maybe.map (fun v -> PMINTENCLR_EL1_ref.write_to v s) (PMINTENCLR_EL1_ref.of_regval v) else
  if reg_name = "PMINTENSET_EL1" then Maybe.map (fun v -> PMINTENSET_EL1_ref.write_to v s) (PMINTENSET_EL1_ref.of_regval v) else
  if reg_name = "PMLSR" then Maybe.map (fun v -> PMLSR_ref.write_to v s) (PMLSR_ref.of_regval v) else
  if reg_name = "PMMIR" then Maybe.map (fun v -> PMMIR_ref.write_to v s) (PMMIR_ref.of_regval v) else
  if reg_name = "PMMIR_EL1" then Maybe.map (fun v -> PMMIR_EL1_ref.write_to v s) (PMMIR_EL1_ref.of_regval v) else
  if reg_name = "PMOVSCLR_EL0" then Maybe.map (fun v -> PMOVSCLR_EL0_ref.write_to v s) (PMOVSCLR_EL0_ref.of_regval v) else
  if reg_name = "PMOVSSET_EL0" then Maybe.map (fun v -> PMOVSSET_EL0_ref.write_to v s) (PMOVSSET_EL0_ref.of_regval v) else
  if reg_name = "PMPCSR" then Maybe.map (fun v -> PMPCSR_ref.write_to v s) (PMPCSR_ref.of_regval v) else
  if reg_name = "PMSELR_EL0" then Maybe.map (fun v -> PMSELR_EL0_ref.write_to v s) (PMSELR_EL0_ref.of_regval v) else
  if reg_name = "PMSWINC_EL0" then Maybe.map (fun v -> PMSWINC_EL0_ref.write_to v s) (PMSWINC_EL0_ref.of_regval v) else
  if reg_name = "PMUSERENR_EL0" then Maybe.map (fun v -> PMUSERENR_EL0_ref.write_to v s) (PMUSERENR_EL0_ref.of_regval v) else
  if reg_name = "PMVIDSR" then Maybe.map (fun v -> PMVIDSR_ref.write_to v s) (PMVIDSR_ref.of_regval v) else
  if reg_name = "PMXEVCNTR_EL0" then Maybe.map (fun v -> PMXEVCNTR_EL0_ref.write_to v s) (PMXEVCNTR_EL0_ref.of_regval v) else
  if reg_name = "PMXEVTYPER_EL0" then Maybe.map (fun v -> PMXEVTYPER_EL0_ref.write_to v s) (PMXEVTYPER_EL0_ref.of_regval v) else
  if reg_name = "RC" then Maybe.map (fun v -> RC_ref.write_to v s) (RC_ref.of_regval v) else
  if reg_name = "RD_EL0" then Maybe.map (fun v -> RD_EL0_ref.write_to v s) (RD_EL0_ref.of_regval v) else
  if reg_name = "REVIDR_EL1" then Maybe.map (fun v -> REVIDR_EL1_ref.write_to v s) (REVIDR_EL1_ref.of_regval v) else
  if reg_name = "RGSR_EL1" then Maybe.map (fun v -> RGSR_EL1_ref.write_to v s) (RGSR_EL1_ref.of_regval v) else
  if reg_name = "RMR_EL1" then Maybe.map (fun v -> RMR_EL1_ref.write_to v s) (RMR_EL1_ref.of_regval v) else
  if reg_name = "RMR_EL2" then Maybe.map (fun v -> RMR_EL2_ref.write_to v s) (RMR_EL2_ref.of_regval v) else
  if reg_name = "RMR_EL3" then Maybe.map (fun v -> RMR_EL3_ref.write_to v s) (RMR_EL3_ref.of_regval v) else
  if reg_name = "RMUID_EL0" then Maybe.map (fun v -> RMUID_EL0_ref.write_to v s) (RMUID_EL0_ref.of_regval v) else
  if reg_name = "RNDR" then Maybe.map (fun v -> RNDR_ref.write_to v s) (RNDR_ref.of_regval v) else
  if reg_name = "RNDRRS" then Maybe.map (fun v -> RNDRRS_ref.write_to v s) (RNDRRS_ref.of_regval v) else
  if reg_name = "RVBAR" then Maybe.map (fun v -> RVBAR_ref.write_to v s) (RVBAR_ref.of_regval v) else
  if reg_name = "RVBAR_EL1" then Maybe.map (fun v -> RVBAR_EL1_ref.write_to v s) (RVBAR_EL1_ref.of_regval v) else
  if reg_name = "RVBAR_EL2" then Maybe.map (fun v -> RVBAR_EL2_ref.write_to v s) (RVBAR_EL2_ref.of_regval v) else
  if reg_name = "RVBAR_EL3" then Maybe.map (fun v -> RVBAR_EL3_ref.write_to v s) (RVBAR_EL3_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL0" then Maybe.map (fun v -> SCXTNUM_EL0_ref.write_to v s) (SCXTNUM_EL0_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL1" then Maybe.map (fun v -> SCXTNUM_EL1_ref.write_to v s) (SCXTNUM_EL1_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL2" then Maybe.map (fun v -> SCXTNUM_EL2_ref.write_to v s) (SCXTNUM_EL2_ref.of_regval v) else
  if reg_name = "SCXTNUM_EL3" then Maybe.map (fun v -> SCXTNUM_EL3_ref.write_to v s) (SCXTNUM_EL3_ref.of_regval v) else
  if reg_name = "SDER32_EL2" then Maybe.map (fun v -> SDER32_EL2_ref.write_to v s) (SDER32_EL2_ref.of_regval v) else
  if reg_name = "SPSR_EL0" then Maybe.map (fun v -> SPSR_EL0_ref.write_to v s) (SPSR_EL0_ref.of_regval v) else
  if reg_name = "SP_EL0" then Maybe.map (fun v -> SP_EL0_ref.write_to v s) (SP_EL0_ref.of_regval v) else
  if reg_name = "SP_EL1" then Maybe.map (fun v -> SP_EL1_ref.write_to v s) (SP_EL1_ref.of_regval v) else
  if reg_name = "SP_EL2" then Maybe.map (fun v -> SP_EL2_ref.write_to v s) (SP_EL2_ref.of_regval v) else
  if reg_name = "SP_EL3" then Maybe.map (fun v -> SP_EL3_ref.write_to v s) (SP_EL3_ref.of_regval v) else
  if reg_name = "ShouldAdvanceIT" then Maybe.map (fun v -> ShouldAdvanceIT_ref.write_to v s) (ShouldAdvanceIT_ref.of_regval v) else
  if reg_name = "TLBTR" then Maybe.map (fun v -> TLBTR_ref.write_to v s) (TLBTR_ref.of_regval v) else
  if reg_name = "TPIDRRO_EL0" then Maybe.map (fun v -> TPIDRRO_EL0_ref.write_to v s) (TPIDRRO_EL0_ref.of_regval v) else
  if reg_name = "TPIDR_EL0" then Maybe.map (fun v -> TPIDR_EL0_ref.write_to v s) (TPIDR_EL0_ref.of_regval v) else
  if reg_name = "TPIDR_EL1" then Maybe.map (fun v -> TPIDR_EL1_ref.write_to v s) (TPIDR_EL1_ref.of_regval v) else
  if reg_name = "TPIDR_EL2" then Maybe.map (fun v -> TPIDR_EL2_ref.write_to v s) (TPIDR_EL2_ref.of_regval v) else
  if reg_name = "TPIDR_EL3" then Maybe.map (fun v -> TPIDR_EL3_ref.write_to v s) (TPIDR_EL3_ref.of_regval v) else
  if reg_name = "TRFCR_EL1" then Maybe.map (fun v -> TRFCR_EL1_ref.write_to v s) (TRFCR_EL1_ref.of_regval v) else
  if reg_name = "TRFCR_EL2" then Maybe.map (fun v -> TRFCR_EL2_ref.write_to v s) (TRFCR_EL2_ref.of_regval v) else
  if reg_name = "VBAR_EL0" then Maybe.map (fun v -> VBAR_EL0_ref.write_to v s) (VBAR_EL0_ref.of_regval v) else
  if reg_name = "VDISR_EL2" then Maybe.map (fun v -> VDISR_EL2_ref.write_to v s) (VDISR_EL2_ref.of_regval v) else
  if reg_name = "VMPIDR_EL2" then Maybe.map (fun v -> VMPIDR_EL2_ref.write_to v s) (VMPIDR_EL2_ref.of_regval v) else
  if reg_name = "VNCR_EL2" then Maybe.map (fun v -> VNCR_EL2_ref.write_to v s) (VNCR_EL2_ref.of_regval v) else
  if reg_name = "VPIDR_EL2" then Maybe.map (fun v -> VPIDR_EL2_ref.write_to v s) (VPIDR_EL2_ref.of_regval v) else
  if reg_name = "_V" then Maybe.map (fun v -> _V_ref.write_to v s) (_V_ref.of_regval v) else
  if reg_name = "__currentCond" then Maybe.map (fun v -> __currentCond_ref.write_to v s) (__currentCond_ref.of_regval v) else
  if reg_name = "__exclusive_block_address" then Maybe.map (fun v -> __exclusive_block_address_ref.write_to v s) (__exclusive_block_address_ref.of_regval v) else
  if reg_name = "__saved_exception_level" then Maybe.map (fun v -> __saved_exception_level_ref.write_to v s) (__saved_exception_level_ref.of_regval v) else
  if reg_name = "__unconditional" then Maybe.map (fun v -> __unconditional_ref.write_to v s) (__unconditional_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_S" then Maybe.map (fun v -> CONTEXTIDR_S_ref.write_to v s) (CONTEXTIDR_S_ref.of_regval v) else
  if reg_name = "_GTEExtObsAccess" then Maybe.map (fun v -> _GTEExtObsAccess_ref.write_to v s) (_GTEExtObsAccess_ref.of_regval v) else
  if reg_name = "_GTEExtObsAddress" then Maybe.map (fun v -> _GTEExtObsAddress_ref.write_to v s) (_GTEExtObsAddress_ref.of_regval v) else
  if reg_name = "_GTEExtObsData" then Maybe.map (fun v -> _GTEExtObsData_ref.write_to v s) (_GTEExtObsData_ref.of_regval v) else
  if reg_name = "_GTEExtObsResult" then Maybe.map (fun v -> _GTEExtObsResult_ref.write_to v s) (_GTEExtObsResult_ref.of_regval v) else
  if reg_name = "_GTEExtObsActive" then Maybe.map (fun v -> _GTEExtObsActive_ref.write_to v s) (_GTEExtObsActive_ref.of_regval v) else
  if reg_name = "_GTEExtObsCount" then Maybe.map (fun v -> _GTEExtObsCount_ref.write_to v s) (_GTEExtObsCount_ref.of_regval v) else
  if reg_name = "_GTEExtObsIndex" then Maybe.map (fun v -> _GTEExtObsIndex_ref.write_to v s) (_GTEExtObsIndex_ref.of_regval v) else
  if reg_name = "_GTEExtObsResultIndex" then Maybe.map (fun v -> _GTEExtObsResultIndex_ref.write_to v s) (_GTEExtObsResultIndex_ref.of_regval v) else
  if reg_name = "_GTEExtObsResultIsAddress" then Maybe.map (fun v -> _GTEExtObsResultIsAddress_ref.write_to v s) (_GTEExtObsResultIsAddress_ref.of_regval v) else
  if reg_name = "_GTEListParam0" then Maybe.map (fun v -> _GTEListParam0_ref.write_to v s) (_GTEListParam0_ref.of_regval v) else
  if reg_name = "_GTEListParam1" then Maybe.map (fun v -> _GTEListParam1_ref.write_to v s) (_GTEListParam1_ref.of_regval v) else
  if reg_name = "_GTEParam" then Maybe.map (fun v -> _GTEParam_ref.write_to v s) (_GTEParam_ref.of_regval v) else
  if reg_name = "_GTE_AS_RecordedAccess" then Maybe.map (fun v -> _GTE_AS_RecordedAccess_ref.write_to v s) (_GTE_AS_RecordedAccess_ref.of_regval v) else
  if reg_name = "_GTE_AS_RecordedAddress" then Maybe.map (fun v -> _GTE_AS_RecordedAddress_ref.write_to v s) (_GTE_AS_RecordedAddress_ref.of_regval v) else
  if reg_name = "_GTE_AS_RecordedData" then Maybe.map (fun v -> _GTE_AS_RecordedData_ref.write_to v s) (_GTE_AS_RecordedData_ref.of_regval v) else
  if reg_name = "_GTE_PPU_Access" then Maybe.map (fun v -> _GTE_PPU_Access_ref.write_to v s) (_GTE_PPU_Access_ref.of_regval v) else
  if reg_name = "_GTE_PPU_Address" then Maybe.map (fun v -> _GTE_PPU_Address_ref.write_to v s) (_GTE_PPU_Address_ref.of_regval v) else
  if reg_name = "_GTE_PPU_SizeEn" then Maybe.map (fun v -> _GTE_PPU_SizeEn_ref.write_to v s) (_GTE_PPU_SizeEn_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi1" then Maybe.map (fun v -> AbortRgn64Hi1_ref.write_to v s) (AbortRgn64Hi1_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi1_Hi" then Maybe.map (fun v -> AbortRgn64Hi1_Hi_ref.write_to v s) (AbortRgn64Hi1_Hi_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi2" then Maybe.map (fun v -> AbortRgn64Hi2_ref.write_to v s) (AbortRgn64Hi2_ref.of_regval v) else
  if reg_name = "AbortRgn64Hi2_Hi" then Maybe.map (fun v -> AbortRgn64Hi2_Hi_ref.write_to v s) (AbortRgn64Hi2_Hi_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo1" then Maybe.map (fun v -> AbortRgn64Lo1_ref.write_to v s) (AbortRgn64Lo1_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo1_Hi" then Maybe.map (fun v -> AbortRgn64Lo1_Hi_ref.write_to v s) (AbortRgn64Lo1_Hi_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo2" then Maybe.map (fun v -> AbortRgn64Lo2_ref.write_to v s) (AbortRgn64Lo2_ref.of_regval v) else
  if reg_name = "AbortRgn64Lo2_Hi" then Maybe.map (fun v -> AbortRgn64Lo2_Hi_ref.write_to v s) (AbortRgn64Lo2_Hi_ref.of_regval v) else
  if reg_name = "CNTCR" then Maybe.map (fun v -> CNTCR_ref.write_to v s) (CNTCR_ref.of_regval v) else
  if reg_name = "CNTCV" then Maybe.map (fun v -> CNTCV_ref.write_to v s) (CNTCV_ref.of_regval v) else
  if reg_name = "CNTFID0" then Maybe.map (fun v -> CNTFID0_ref.write_to v s) (CNTFID0_ref.of_regval v) else
  if reg_name = "CNTSR" then Maybe.map (fun v -> CNTSR_ref.write_to v s) (CNTSR_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_EL1" then Maybe.map (fun v -> CONTEXTIDR_EL1_ref.write_to v s) (CONTEXTIDR_EL1_ref.of_regval v) else
  if reg_name = "CONTEXTIDR_EL2" then Maybe.map (fun v -> CONTEXTIDR_EL2_ref.write_to v s) (CONTEXTIDR_EL2_ref.of_regval v) else
  if reg_name = "DACR32_EL2" then Maybe.map (fun v -> DACR32_EL2_ref.write_to v s) (DACR32_EL2_ref.of_regval v) else
  if reg_name = "DACR_S" then Maybe.map (fun v -> DACR_S_ref.write_to v s) (DACR_S_ref.of_regval v) else
  if reg_name = "DBGBCR" then Maybe.map (fun v -> DBGBCR_ref.write_to v s) (DBGBCR_ref.of_regval v) else
  if reg_name = "DBGBCR_EL1" then Maybe.map (fun v -> DBGBCR_EL1_ref.write_to v s) (DBGBCR_EL1_ref.of_regval v) else
  if reg_name = "DBGBVR" then Maybe.map (fun v -> DBGBVR_ref.write_to v s) (DBGBVR_ref.of_regval v) else
  if reg_name = "DBGBVR_EL1" then Maybe.map (fun v -> DBGBVR_EL1_ref.write_to v s) (DBGBVR_EL1_ref.of_regval v) else
  if reg_name = "DBGBXVR" then Maybe.map (fun v -> DBGBXVR_ref.write_to v s) (DBGBXVR_ref.of_regval v) else
  if reg_name = "DBGDIDR" then Maybe.map (fun v -> DBGDIDR_ref.write_to v s) (DBGDIDR_ref.of_regval v) else
  if reg_name = "DBGEN" then Maybe.map (fun v -> DBGEN_ref.write_to v s) (DBGEN_ref.of_regval v) else
  if reg_name = "DBGPRCR_EL1" then Maybe.map (fun v -> DBGPRCR_EL1_ref.write_to v s) (DBGPRCR_EL1_ref.of_regval v) else
  if reg_name = "DBGVCR32_EL2" then Maybe.map (fun v -> DBGVCR32_EL2_ref.write_to v s) (DBGVCR32_EL2_ref.of_regval v) else
  if reg_name = "DBGWCR" then Maybe.map (fun v -> DBGWCR_ref.write_to v s) (DBGWCR_ref.of_regval v) else
  if reg_name = "DBGWCR_EL1" then Maybe.map (fun v -> DBGWCR_EL1_ref.write_to v s) (DBGWCR_EL1_ref.of_regval v) else
  if reg_name = "DBGWVR" then Maybe.map (fun v -> DBGWVR_ref.write_to v s) (DBGWVR_ref.of_regval v) else
  if reg_name = "DBGWVR_EL1" then Maybe.map (fun v -> DBGWVR_EL1_ref.write_to v s) (DBGWVR_EL1_ref.of_regval v) else
  if reg_name = "DLR_EL0" then Maybe.map (fun v -> DLR_EL0_ref.write_to v s) (DLR_EL0_ref.of_regval v) else
  if reg_name = "DSPSR_EL0" then Maybe.map (fun v -> DSPSR_EL0_ref.write_to v s) (DSPSR_EL0_ref.of_regval v) else
  if reg_name = "EDSCR" then Maybe.map (fun v -> EDSCR_ref.write_to v s) (EDSCR_ref.of_regval v) else
  if reg_name = "DFSR_S" then Maybe.map (fun v -> DFSR_S_ref.write_to v s) (DFSR_S_ref.of_regval v) else
  if reg_name = "ELR_EL3" then Maybe.map (fun v -> ELR_EL3_ref.write_to v s) (ELR_EL3_ref.of_regval v) else
  if reg_name = "ELR_EL1" then Maybe.map (fun v -> ELR_EL1_ref.write_to v s) (ELR_EL1_ref.of_regval v) else
  if reg_name = "ESR_EL3" then Maybe.map (fun v -> ESR_EL3_ref.write_to v s) (ESR_EL3_ref.of_regval v) else
  if reg_name = "ESR_EL1" then Maybe.map (fun v -> ESR_EL1_ref.write_to v s) (ESR_EL1_ref.of_regval v) else
  if reg_name = "ELR_EL2" then Maybe.map (fun v -> ELR_EL2_ref.write_to v s) (ELR_EL2_ref.of_regval v) else
  if reg_name = "TCR_EL2" then Maybe.map (fun v -> TCR_EL2_ref.write_to v s) (TCR_EL2_ref.of_regval v) else
  if reg_name = "ESR_EL2" then Maybe.map (fun v -> ESR_EL2_ref.write_to v s) (ESR_EL2_ref.of_regval v) else
  if reg_name = "FAR_EL1" then Maybe.map (fun v -> FAR_EL1_ref.write_to v s) (FAR_EL1_ref.of_regval v) else
  if reg_name = "FAR_EL2" then Maybe.map (fun v -> FAR_EL2_ref.write_to v s) (FAR_EL2_ref.of_regval v) else
  if reg_name = "FAR_EL3" then Maybe.map (fun v -> FAR_EL3_ref.write_to v s) (FAR_EL3_ref.of_regval v) else
  if reg_name = "HCR_EL2" then Maybe.map (fun v -> HCR_EL2_ref.write_to v s) (HCR_EL2_ref.of_regval v) else
  if reg_name = "HPFAR_EL2" then Maybe.map (fun v -> HPFAR_EL2_ref.write_to v s) (HPFAR_EL2_ref.of_regval v) else
  if reg_name = "ID_AA64DFR0_EL1" then Maybe.map (fun v -> ID_AA64DFR0_EL1_ref.write_to v s) (ID_AA64DFR0_EL1_ref.of_regval v) else
  if reg_name = "IFSR32_EL2" then Maybe.map (fun v -> IFSR32_EL2_ref.write_to v s) (IFSR32_EL2_ref.of_regval v) else
  if reg_name = "IFSR_S" then Maybe.map (fun v -> IFSR_S_ref.write_to v s) (IFSR_S_ref.of_regval v) else
  if reg_name = "InGuardedPage" then Maybe.map (fun v -> InGuardedPage_ref.write_to v s) (InGuardedPage_ref.of_regval v) else
  if reg_name = "LR_mon" then Maybe.map (fun v -> LR_mon_ref.write_to v s) (LR_mon_ref.of_regval v) else
  if reg_name = "MAIR0_S" then Maybe.map (fun v -> MAIR0_S_ref.write_to v s) (MAIR0_S_ref.of_regval v) else
  if reg_name = "MAIR1_S" then Maybe.map (fun v -> MAIR1_S_ref.write_to v s) (MAIR1_S_ref.of_regval v) else
  if reg_name = "MAIR_EL1" then Maybe.map (fun v -> MAIR_EL1_ref.write_to v s) (MAIR_EL1_ref.of_regval v) else
  if reg_name = "MAIR_EL2" then Maybe.map (fun v -> MAIR_EL2_ref.write_to v s) (MAIR_EL2_ref.of_regval v) else
  if reg_name = "MAIR_EL3" then Maybe.map (fun v -> MAIR_EL3_ref.write_to v s) (MAIR_EL3_ref.of_regval v) else
  if reg_name = "MDCR_EL2" then Maybe.map (fun v -> MDCR_EL2_ref.write_to v s) (MDCR_EL2_ref.of_regval v) else
  if reg_name = "MDCR_EL3" then Maybe.map (fun v -> MDCR_EL3_ref.write_to v s) (MDCR_EL3_ref.of_regval v) else
  if reg_name = "MDSCR_EL1" then Maybe.map (fun v -> MDSCR_EL1_ref.write_to v s) (MDSCR_EL1_ref.of_regval v) else
  if reg_name = "MPAM0_EL1" then Maybe.map (fun v -> MPAM0_EL1_ref.write_to v s) (MPAM0_EL1_ref.of_regval v) else
  if reg_name = "MPAM1_EL1" then Maybe.map (fun v -> MPAM1_EL1_ref.write_to v s) (MPAM1_EL1_ref.of_regval v) else
  if reg_name = "MPAM2_EL2" then Maybe.map (fun v -> MPAM2_EL2_ref.write_to v s) (MPAM2_EL2_ref.of_regval v) else
  if reg_name = "MPAM3_EL3" then Maybe.map (fun v -> MPAM3_EL3_ref.write_to v s) (MPAM3_EL3_ref.of_regval v) else
  if reg_name = "MPAMHCR_EL2" then Maybe.map (fun v -> MPAMHCR_EL2_ref.write_to v s) (MPAMHCR_EL2_ref.of_regval v) else
  if reg_name = "MPAMIDR_EL1" then Maybe.map (fun v -> MPAMIDR_EL1_ref.write_to v s) (MPAMIDR_EL1_ref.of_regval v) else
  if reg_name = "MPAMVPM0_EL2" then Maybe.map (fun v -> MPAMVPM0_EL2_ref.write_to v s) (MPAMVPM0_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM1_EL2" then Maybe.map (fun v -> MPAMVPM1_EL2_ref.write_to v s) (MPAMVPM1_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM2_EL2" then Maybe.map (fun v -> MPAMVPM2_EL2_ref.write_to v s) (MPAMVPM2_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM3_EL2" then Maybe.map (fun v -> MPAMVPM3_EL2_ref.write_to v s) (MPAMVPM3_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM4_EL2" then Maybe.map (fun v -> MPAMVPM4_EL2_ref.write_to v s) (MPAMVPM4_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM5_EL2" then Maybe.map (fun v -> MPAMVPM5_EL2_ref.write_to v s) (MPAMVPM5_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM6_EL2" then Maybe.map (fun v -> MPAMVPM6_EL2_ref.write_to v s) (MPAMVPM6_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPM7_EL2" then Maybe.map (fun v -> MPAMVPM7_EL2_ref.write_to v s) (MPAMVPM7_EL2_ref.of_regval v) else
  if reg_name = "MPAMVPMV_EL2" then Maybe.map (fun v -> MPAMVPMV_EL2_ref.write_to v s) (MPAMVPMV_EL2_ref.of_regval v) else
  if reg_name = "MPIDR_EL1" then Maybe.map (fun v -> MPIDR_EL1_ref.write_to v s) (MPIDR_EL1_ref.of_regval v) else
  if reg_name = "MVBAR" then Maybe.map (fun v -> MVBAR_ref.write_to v s) (MVBAR_ref.of_regval v) else
  if reg_name = "NMRR_S" then Maybe.map (fun v -> NMRR_S_ref.write_to v s) (NMRR_S_ref.of_regval v) else
  if reg_name = "OSDLR_EL1" then Maybe.map (fun v -> OSDLR_EL1_ref.write_to v s) (OSDLR_EL1_ref.of_regval v) else
  if reg_name = "OSLSR_EL1" then Maybe.map (fun v -> OSLSR_EL1_ref.write_to v s) (OSLSR_EL1_ref.of_regval v) else
  if reg_name = "PRRR_S" then Maybe.map (fun v -> PRRR_S_ref.write_to v s) (PRRR_S_ref.of_regval v) else
  if reg_name = "PSTATE" then Maybe.map (fun v -> PSTATE_ref.write_to v s) (PSTATE_ref.of_regval v) else
  if reg_name = "SCR_EL3" then Maybe.map (fun v -> SCR_EL3_ref.write_to v s) (SCR_EL3_ref.of_regval v) else
  if reg_name = "SCTLR_EL1" then Maybe.map (fun v -> SCTLR_EL1_ref.write_to v s) (SCTLR_EL1_ref.of_regval v) else
  if reg_name = "SCTLR_EL2" then Maybe.map (fun v -> SCTLR_EL2_ref.write_to v s) (SCTLR_EL2_ref.of_regval v) else
  if reg_name = "SCTLR_EL3" then Maybe.map (fun v -> SCTLR_EL3_ref.write_to v s) (SCTLR_EL3_ref.of_regval v) else
  if reg_name = "SCTLR_S" then Maybe.map (fun v -> SCTLR_S_ref.write_to v s) (SCTLR_S_ref.of_regval v) else
  if reg_name = "SDER32_EL3" then Maybe.map (fun v -> SDER32_EL3_ref.write_to v s) (SDER32_EL3_ref.of_regval v) else
  if reg_name = "SPIDEN" then Maybe.map (fun v -> SPIDEN_ref.write_to v s) (SPIDEN_ref.of_regval v) else
  if reg_name = "SPSR_EL1" then Maybe.map (fun v -> SPSR_EL1_ref.write_to v s) (SPSR_EL1_ref.of_regval v) else
  if reg_name = "SPSR_EL2" then Maybe.map (fun v -> SPSR_EL2_ref.write_to v s) (SPSR_EL2_ref.of_regval v) else
  if reg_name = "SPSR_EL3" then Maybe.map (fun v -> SPSR_EL3_ref.write_to v s) (SPSR_EL3_ref.of_regval v) else
  if reg_name = "SPSR_abt" then Maybe.map (fun v -> SPSR_abt_ref.write_to v s) (SPSR_abt_ref.of_regval v) else
  if reg_name = "SPSR_fiq" then Maybe.map (fun v -> SPSR_fiq_ref.write_to v s) (SPSR_fiq_ref.of_regval v) else
  if reg_name = "SPSR_irq" then Maybe.map (fun v -> SPSR_irq_ref.write_to v s) (SPSR_irq_ref.of_regval v) else
  if reg_name = "SPSR_und" then Maybe.map (fun v -> SPSR_und_ref.write_to v s) (SPSR_und_ref.of_regval v) else
  if reg_name = "SP_mon" then Maybe.map (fun v -> SP_mon_ref.write_to v s) (SP_mon_ref.of_regval v) else
  if reg_name = "ScheduledFIQ" then Maybe.map (fun v -> ScheduledFIQ_ref.write_to v s) (ScheduledFIQ_ref.of_regval v) else
  if reg_name = "ScheduledIRQ" then Maybe.map (fun v -> ScheduledIRQ_ref.write_to v s) (ScheduledIRQ_ref.of_regval v) else
  if reg_name = "TCR_EL1" then Maybe.map (fun v -> TCR_EL1_ref.write_to v s) (TCR_EL1_ref.of_regval v) else
  if reg_name = "TCR_EL3" then Maybe.map (fun v -> TCR_EL3_ref.write_to v s) (TCR_EL3_ref.of_regval v) else
  if reg_name = "TFSRE0_EL1" then Maybe.map (fun v -> TFSRE0_EL1_ref.write_to v s) (TFSRE0_EL1_ref.of_regval v) else
  if reg_name = "TFSR_EL1" then Maybe.map (fun v -> TFSR_EL1_ref.write_to v s) (TFSR_EL1_ref.of_regval v) else
  if reg_name = "TFSR_EL2" then Maybe.map (fun v -> TFSR_EL2_ref.write_to v s) (TFSR_EL2_ref.of_regval v) else
  if reg_name = "TFSR_EL3" then Maybe.map (fun v -> TFSR_EL3_ref.write_to v s) (TFSR_EL3_ref.of_regval v) else
  if reg_name = "TLBHits" then Maybe.map (fun v -> TLBHits_ref.write_to v s) (TLBHits_ref.of_regval v) else
  if reg_name = "TLBMisses" then Maybe.map (fun v -> TLBMisses_ref.write_to v s) (TLBMisses_ref.of_regval v) else
  if reg_name = "TTBCR2_S" then Maybe.map (fun v -> TTBCR2_S_ref.write_to v s) (TTBCR2_S_ref.of_regval v) else
  if reg_name = "TTBCR_S" then Maybe.map (fun v -> TTBCR_S_ref.write_to v s) (TTBCR_S_ref.of_regval v) else
  if reg_name = "TTBR0_EL1" then Maybe.map (fun v -> TTBR0_EL1_ref.write_to v s) (TTBR0_EL1_ref.of_regval v) else
  if reg_name = "TTBR0_EL2" then Maybe.map (fun v -> TTBR0_EL2_ref.write_to v s) (TTBR0_EL2_ref.of_regval v) else
  if reg_name = "TTBR0_EL3" then Maybe.map (fun v -> TTBR0_EL3_ref.write_to v s) (TTBR0_EL3_ref.of_regval v) else
  if reg_name = "TTBR0_S" then Maybe.map (fun v -> TTBR0_S_ref.write_to v s) (TTBR0_S_ref.of_regval v) else
  if reg_name = "TTBR1_EL1" then Maybe.map (fun v -> TTBR1_EL1_ref.write_to v s) (TTBR1_EL1_ref.of_regval v) else
  if reg_name = "TTBR1_EL2" then Maybe.map (fun v -> TTBR1_EL2_ref.write_to v s) (TTBR1_EL2_ref.of_regval v) else
  if reg_name = "TTBR1_S" then Maybe.map (fun v -> TTBR1_S_ref.write_to v s) (TTBR1_S_ref.of_regval v) else
  if reg_name = "VBAR_EL1" then Maybe.map (fun v -> VBAR_EL1_ref.write_to v s) (VBAR_EL1_ref.of_regval v) else
  if reg_name = "VBAR_EL2" then Maybe.map (fun v -> VBAR_EL2_ref.write_to v s) (VBAR_EL2_ref.of_regval v) else
  if reg_name = "VBAR_EL3" then Maybe.map (fun v -> VBAR_EL3_ref.write_to v s) (VBAR_EL3_ref.of_regval v) else
  if reg_name = "VBAR_S" then Maybe.map (fun v -> VBAR_S_ref.write_to v s) (VBAR_S_ref.of_regval v) else
  if reg_name = "VSESR_EL2" then Maybe.map (fun v -> VSESR_EL2_ref.write_to v s) (VSESR_EL2_ref.of_regval v) else
  if reg_name = "VSTCR_EL2" then Maybe.map (fun v -> VSTCR_EL2_ref.write_to v s) (VSTCR_EL2_ref.of_regval v) else
  if reg_name = "VSTTBR_EL2" then Maybe.map (fun v -> VSTTBR_EL2_ref.write_to v s) (VSTTBR_EL2_ref.of_regval v) else
  if reg_name = "VTCR_EL2" then Maybe.map (fun v -> VTCR_EL2_ref.write_to v s) (VTCR_EL2_ref.of_regval v) else
  if reg_name = "VTTBR_EL2" then Maybe.map (fun v -> VTTBR_EL2_ref.write_to v s) (VTTBR_EL2_ref.of_regval v) else
  if reg_name = "_AXIAbortCtl" then Maybe.map (fun v -> _AXIAbortCtl_ref.write_to v s) (_AXIAbortCtl_ref.of_regval v) else
  if reg_name = "_ClearFIQ" then Maybe.map (fun v -> _ClearFIQ_ref.write_to v s) (_ClearFIQ_ref.of_regval v) else
  if reg_name = "_ClearIRQ" then Maybe.map (fun v -> _ClearIRQ_ref.write_to v s) (_ClearIRQ_ref.of_regval v) else
  if reg_name = "_FIQPending" then Maybe.map (fun v -> _FIQPending_ref.write_to v s) (_FIQPending_ref.of_regval v) else
  if reg_name = "_GTEActive" then Maybe.map (fun v -> _GTEActive_ref.write_to v s) (_GTEActive_ref.of_regval v) else
  if reg_name = "_GTECurrentAPI" then Maybe.map (fun v -> _GTECurrentAPI_ref.write_to v s) (_GTECurrentAPI_ref.of_regval v) else
  if reg_name = "_GTEHaveParamLo" then Maybe.map (fun v -> _GTEHaveParamLo_ref.write_to v s) (_GTEHaveParamLo_ref.of_regval v) else
  if reg_name = "_GTEListParam" then Maybe.map (fun v -> _GTEListParam_ref.write_to v s) (_GTEListParam_ref.of_regval v) else
  if reg_name = "_GTEListParamIndex" then Maybe.map (fun v -> _GTEListParamIndex_ref.write_to v s) (_GTEListParamIndex_ref.of_regval v) else
  if reg_name = "_GTEListParamTerminator" then Maybe.map (fun v -> _GTEListParamTerminator_ref.write_to v s) (_GTEListParamTerminator_ref.of_regval v) else
  if reg_name = "_GTEListParamTerminatorCount" then Maybe.map (fun v -> _GTEListParamTerminatorCount_ref.write_to v s) (_GTEListParamTerminatorCount_ref.of_regval v) else
  if reg_name = "_GTEListParamTerminators" then Maybe.map (fun v -> _GTEListParamTerminators_ref.write_to v s) (_GTEListParamTerminators_ref.of_regval v) else
  if reg_name = "_GTEParamCount" then Maybe.map (fun v -> _GTEParamCount_ref.write_to v s) (_GTEParamCount_ref.of_regval v) else
  if reg_name = "_GTEParamLo" then Maybe.map (fun v -> _GTEParamLo_ref.write_to v s) (_GTEParamLo_ref.of_regval v) else
  if reg_name = "_GTEParamType" then Maybe.map (fun v -> _GTEParamType_ref.write_to v s) (_GTEParamType_ref.of_regval v) else
  if reg_name = "_GTEParamsComplete" then Maybe.map (fun v -> _GTEParamsComplete_ref.write_to v s) (_GTEParamsComplete_ref.of_regval v) else
  if reg_name = "_GTEStatus" then Maybe.map (fun v -> _GTEStatus_ref.write_to v s) (_GTEStatus_ref.of_regval v) else
  if reg_name = "_GTE_AS_Access" then Maybe.map (fun v -> _GTE_AS_Access_ref.write_to v s) (_GTE_AS_Access_ref.of_regval v) else
  if reg_name = "_GTE_AS_AccessCount" then Maybe.map (fun v -> _GTE_AS_AccessCount_ref.write_to v s) (_GTE_AS_AccessCount_ref.of_regval v) else
  if reg_name = "_GTE_AS_Address" then Maybe.map (fun v -> _GTE_AS_Address_ref.write_to v s) (_GTE_AS_Address_ref.of_regval v) else
  if reg_name = "_GTE_AS_Size" then Maybe.map (fun v -> _GTE_AS_Size_ref.write_to v s) (_GTE_AS_Size_ref.of_regval v) else
  if reg_name = "_IRQPending" then Maybe.map (fun v -> _IRQPending_ref.write_to v s) (_IRQPending_ref.of_regval v) else
  if reg_name = "_PC" then Maybe.map (fun v -> _PC_ref.write_to v s) (_PC_ref.of_regval v) else
  if reg_name = "_PPURACR" then Maybe.map (fun v -> _PPURACR_ref.write_to v s) (_PPURACR_ref.of_regval v) else
  if reg_name = "_PPURBAR" then Maybe.map (fun v -> _PPURBAR_ref.write_to v s) (_PPURBAR_ref.of_regval v) else
  if reg_name = "_PPURSER" then Maybe.map (fun v -> _PPURSER_ref.write_to v s) (_PPURSER_ref.of_regval v) else
  if reg_name = "_PendingPhysicalSE" then Maybe.map (fun v -> _PendingPhysicalSE_ref.write_to v s) (_PendingPhysicalSE_ref.of_regval v) else
  if reg_name = "_R" then Maybe.map (fun v -> _R_ref.write_to v s) (_R_ref.of_regval v) else
  if reg_name = "_ScheduleFIQ" then Maybe.map (fun v -> _ScheduleFIQ_ref.write_to v s) (_ScheduleFIQ_ref.of_regval v) else
  if reg_name = "_ScheduleIRQ" then Maybe.map (fun v -> _ScheduleIRQ_ref.write_to v s) (_ScheduleIRQ_ref.of_regval v) else
  if reg_name = "_TLB" then Maybe.map (fun v -> _TLB_ref.write_to v s) (_TLB_ref.of_regval v) else
  if reg_name = "_TargetCPU" then Maybe.map (fun v -> _TargetCPU_ref.write_to v s) (_TargetCPU_ref.of_regval v) else
  if reg_name = "__CNTControlBase" then Maybe.map (fun v -> __CNTControlBase_ref.write_to v s) (__CNTControlBase_ref.of_regval v) else
  if reg_name = "__LSISyndrome" then Maybe.map (fun v -> __LSISyndrome_ref.write_to v s) (__LSISyndrome_ref.of_regval v) else
  if reg_name = "__PC_changed" then Maybe.map (fun v -> __PC_changed_ref.write_to v s) (__PC_changed_ref.of_regval v) else
  if reg_name = "__currentInstr" then Maybe.map (fun v -> __currentInstr_ref.write_to v s) (__currentInstr_ref.of_regval v) else
  if reg_name = "__currentInstrLength" then Maybe.map (fun v -> __currentInstrLength_ref.write_to v s) (__currentInstrLength_ref.of_regval v) else
  if reg_name = "__defaultRAM" then Maybe.map (fun v -> __defaultRAM_ref.write_to v s) (__defaultRAM_ref.of_regval v) else
  if reg_name = "__highest_el_aarch32" then Maybe.map (fun v -> __highest_el_aarch32_ref.write_to v s) (__highest_el_aarch32_ref.of_regval v) else
  Nothing

let register_accessors = (get_regval, set_regval)


type MR 'a 'r = base_monadR register_value regstate 'a 'r exception
type M 'a = base_monad register_value regstate 'a exception
